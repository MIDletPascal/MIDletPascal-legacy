Модифицированный компилятор MIDletPascal.  v3.0.0101  от  25.07.10
Компиляция:
1. Запустить "run.bat"
2. После успешной компиляции все появившиеся "*.class" файлы упаковать в архив "NewProject.jar.zip"
3. Проверить наличие в файл "NewProject.jar.zip" классов, которые отображаются в консоли после компиляции каждого модуля, например: "<<RS.class"  (Float1.class соответствует файлу F.class; Float2 соответствует файлам Real*.class)
4. Если необходимо, добавить в архив ресурсы для программы
5. Переименовываем "NewProject.jar.zip" в файл "NewProject.jar"
6. Запускаем получившийся мидлет

Неполадки:
* Если при компиляции программа вылетает с ошибкой, то это из-за операций выделения памяти.
Чтобы устранить неполадку необходимо на файле MPC.EXE: правой кнопкой мыши - свойства - совместимость - запустить программу в режиме совместимости с Windows 95

* Если в исходнике встречаются русские строки, необходимо сохранять его в кодировке Utf-8.

* MPC не создает дерево компиляции модулей, поэтому порядок компиляции вы устанавливаете сами: первыми компилируйте обособленные модули, не использующие ни какие из этого проекта; затем компилируйте те, которые используют эти, и т.д... в завершении компилируется основная программа.


======================================
исправления / обновления:

1. Переписан лексический анализатор: "sources\lex\lex.yy.c" 

2. Запись строк через: 'text'#13#10'text'#9#13#10'text' 

3. Добавлены команды: shr shl

4. Убрано ограничение длины массивов, (макс. длина была 16000 элементов)

5. inline вставки кода:
asm-код записывается через ";" на любую длину, может состоять из байта или опкода.
опкод может иметь параметры, которые проверяются для данной команды (число / ссылка_на_константный_пул_с_указанием_типа_записи)
указание_типа_записи: int / utf8 / str / class / nametype / field / method
проверка параметров опкода производиться на:
1 байтовый эл-т
2-х байтовый эл-т
4-х байтовый эл-т
1 байт - индекс конст.пула
2 байт - индекс конст.пула
тип записи конст.пула
параметры типа константного пула

Пример
var
  myint : integer;

procedure memclean;
begin
  inline(invokestatic  method  'java/lang/System', 'gc', '()V');
end;

begin
  //myint:=10;
  inline(  //inline demo1
    16; $10;
    putstatic		field	'M','myint','I'
  ) ;
  //myint:=getWidth;
    inline(
    getstatic	field	'M', 'I', 'Ljavax/microedition/lcdui/Image;';		//rem1
    invokevirtual	method	'javax/microedition/lcdui/Image', 'getWidth', '()I';		{rem2}
    putstatic	field	'M','myint','I'					(*rem3*)
  );
  memclean;
end.

6. Добавлены директивы компиляции:
	{$R-}	- fixed point (задействован по умолчанию)
	{$R+}	- float point
	{$T-}	- отключить lowcase текста исходника
	{$T+}	- включить lowcase текста исходника (задействован по умолчанию)
	{$C-}	- canvas is NORMAL (задействован по умолчанию)
	{$C+}	- canvas is FULL_MIDP20
	{$C*}	- canvas is FULL_NOKIA
Примечания:
Директивы  float point и canvas необходимо располагать в самом начале файла, чтобы компилятор включил в заголовки класса необходимую информацию, если же требуется режим fixed point, то его нужно применять только непосредственно перед объявлением переменной или перед вычислениями с ней.
Режимы lowcase - необходимы для создания и доступа к переменным, которые содержат буквы верхнего регистра. (например создание модуля в паскале с именем "Lib_....class")

7. Частично исправлено выделение памяти. Исправлен вылет при неправильном обращении к массивам, а также ошибка при повторном объявлении переменной.

8. Во время работы отображается номер строки компилируемого файла, что позволяет локализовать проблемный участок, при возможном вылете компилятора.


По всем найденным ошибкам работы MPC просьба отравлять на e-mail: сообщение об ошибке, исходный код в котором обнаружилась, номер версии компилятора.

======================================



arT(c). 2009-2010
e-mail: IronWoodcutter@bk.ru
