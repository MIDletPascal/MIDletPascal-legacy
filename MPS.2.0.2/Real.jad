// Decompiled by DJ v3.7.7.81 Copyright 2004 Atanas Neshkov  Date: 11.1.2006 17:27:58
// Home Page : http://members.fortunecity.com/neshkov/dj.html  - Check often for new version!
// Decompiler options: packimports(3) annotate_fullnames definits deadcode debugmode 
// Class Version:      46.0


// flag ACC_SUPER is set
public final class Real
{
    // Constants:          523
    // Interfaces:         0
    // Fields:             41
    // Methods:            98
    // Class Attributes:   1

    public static class NumberFormat
    {
        // Constants:          54
        // Interfaces:         0
        // Fields:             16
        // Methods:            1
        // Class Attributes:   1


        public int base = 0;
        public int maxwidth = 0;
        public int precision = 0;
        public int fse = 0;
        public char point = 0;
        public boolean removePoint = false;
        public char thousand = 0;
        public int align = 0;
        public static final int FSE_NONE = 0;
        public static final int FSE_FIX = 1;
        public static final int FSE_SCI = 2;
        public static final int FSE_ENG = 3;
        public static final int ALIGN_NONE = 0;
        public static final int ALIGN_LEFT = 1;
        public static final int ALIGN_RIGHT = 2;
        public static final int ALIGN_CENTER = 3;

        // Decompiling method: <init>  Signature: ()V
        // Max stack: 2, #locals: 1, #params: 1
        // Code length: 49 bytes, Code offset: 654
        NumberFormat()
        {
            /* super(); */
        //    0    0:aload_0         
        //    1    1:invokespecial   #1   <Method void Object()>
            base = 10;
        //    2    4:aload_0         
        //    3    5:bipush          10
        //    4    7:putfield        #2   <Field int Real$NumberFormat.base>
            maxwidth = 30;
        //    5   10:aload_0         
        //    6   11:bipush          30
        //    7   13:putfield        #3   <Field int Real$NumberFormat.maxwidth>
            precision = 16;
        //    8   16:aload_0         
        //    9   17:bipush          16
        //   10   19:putfield        #4   <Field int Real$NumberFormat.precision>
            fse = 0;
        //   11   22:aload_0         
        //   12   23:iconst_0        
        //   13   24:putfield        #5   <Field int Real$NumberFormat.fse>
            point = '.';
        //   14   27:aload_0         
        //   15   28:bipush          46
        //   16   30:putfield        #6   <Field char Real$NumberFormat.point>
            removePoint = true;
        //   17   33:aload_0         
        //   18   34:iconst_1        
        //   19   35:putfield        #7   <Field boolean Real$NumberFormat.removePoint>
            thousand = '\0';
        //   20   38:aload_0         
        //   21   39:iconst_0        
        //   22   40:putfield        #8   <Field char Real$NumberFormat.thousand>
            align = 0;
        //   23   43:aload_0         
        //   24   44:iconst_0        
        //   25   45:putfield        #9   <Field int Real$NumberFormat.align>
            /* return; */
        //   26   48:return          
        }
    }


    // Decompiling method: <init>  Signature: ()V
    // Max stack: 1, #locals: 1, #params: 1
    // Code length: 5 bytes, Code offset: 4116
    // Parameter  0 added: Name this Type LReal; At 0 5 Range 0 4 Init 0 fixed
    // RetValue   1 added: Name <returnValue> Type V At 0 5 Range 0 4 Init 0 fixed
    public Real()
    {
        /* super(); */
    //    0    0:aload_0         
    //    1    1:invokespecial   #1   <Method void Object()>
        /* return; */
    //    2    4:return          
    }

    // Decompiling method: <init>  Signature: (LReal;)V
    // Max stack: 3, #locals: 2, #params: 2
    // Code length: 29 bytes, Code offset: 4147
    // Parameter  0 added: Name this Type LReal; At 0 29 Range 0 28 Init 0 fixed
    // Parameter  1 added: Name real Type LReal; At 0 29 Range 0 28 Init 0
    // RetValue   2 added: Name <returnValue> Type V At 0 29 Range 0 28 Init 0 fixed
    public Real(Real real)
    {
        /* super(); */
    //    0    0:aload_0         
    //    1    1:invokespecial   #1   <Method void Object()>
        mantissa = real.mantissa;
    //    2    4:aload_0         
    //    3    5:aload_1         
    //    4    6:getfield        #2   <Field long Real.mantissa>
    //    5    9:putfield        #2   <Field long Real.mantissa>
        exponent = real.exponent;
    //    6   12:aload_0         
    //    7   13:aload_1         
    //    8   14:getfield        #3   <Field int Real.exponent>
    //    9   17:putfield        #3   <Field int Real.exponent>
        sign = real.sign;
    //   10   20:aload_0         
    //   11   21:aload_1         
    //   12   22:getfield        #4   <Field byte Real.sign>
    //   13   25:putfield        #4   <Field byte Real.sign>
        /* return; */
    //   14   28:return          
    }

    // Decompiling method: <init>  Signature: (I)V
    // Max stack: 2, #locals: 2, #params: 2
    // Code length: 10 bytes, Code offset: 4202
    // Parameter  0 added: Name this Type LReal; At 0 10 Range 0 9 Init 0 fixed
    // Parameter  1 added: Name i Type I At 0 10 Range 0 9 Init 0
    // RetValue   2 added: Name <returnValue> Type V At 0 10 Range 0 9 Init 0 fixed
    public Real(int i)
    {
        /* super(); */
    //    0    0:aload_0         
    //    1    1:invokespecial   #1   <Method void Object()>
        assign(i);
    //    2    4:aload_0         
    //    3    5:iload_1         
    //    4    6:invokevirtual   #5   <Method void Real.assign(int)>
        /* return; */
    //    5    9:return          
    }

    // Decompiling method: <init>  Signature: (Ljava/lang/String;)V
    // Max stack: 3, #locals: 2, #params: 2
    // Code length: 12 bytes, Code offset: 4238
    // Parameter  0 added: Name this Type LReal; At 0 12 Range 0 11 Init 0 fixed
    // Parameter  1 added: Name s Type Ljava/lang/String; At 0 12 Range 0 11 Init 0
    // RetValue   2 added: Name <returnValue> Type V At 0 12 Range 0 11 Init 0 fixed
    public Real(String s)
    {
        /* super(); */
    //    0    0:aload_0         
    //    1    1:invokespecial   #1   <Method void Object()>
        assign(s, 10);
    //    2    4:aload_0         
    //    3    5:aload_1         
    //    4    6:bipush          10
    //    5    8:invokevirtual   #6   <Method void Real.assign(java.lang.String, int)>
        /* return; */
    //    6   11:return          
    }

    // Decompiling method: <init>  Signature: (Ljava/lang/String;I)V
    // Max stack: 3, #locals: 3, #params: 3
    // Code length: 11 bytes, Code offset: 4276
    // Parameter  0 added: Name this Type LReal; At 0 11 Range 0 10 Init 0 fixed
    // Parameter  1 added: Name s Type Ljava/lang/String; At 0 11 Range 0 10 Init 0
    // Parameter  2 added: Name i Type I At 0 11 Range 0 10 Init 0
    // RetValue   3 added: Name <returnValue> Type V At 0 11 Range 0 10 Init 0 fixed
    public Real(String s, int i)
    {
        /* super(); */
    //    0    0:aload_0         
    //    1    1:invokespecial   #1   <Method void Object()>
        assign(s, i);
    //    2    4:aload_0         
    //    3    5:aload_1         
    //    4    6:iload_2         
    //    5    7:invokevirtual   #6   <Method void Real.assign(java.lang.String, int)>
        /* return; */
    //    6   10:return          
    }

    // Decompiling method: <init>  Signature: (IIJ)V
    // Max stack: 5, #locals: 5, #params: 5
    // Code length: 12 bytes, Code offset: 4313
    // Parameter  0 added: Name this Type LReal; At 0 12 Range 0 11 Init 0 fixed
    // Parameter  1 added: Name i Type I At 0 12 Range 0 11 Init 0
    // Parameter  2 added: Name j Type I At 0 12 Range 0 11 Init 0
    // Parameter  3 added: Name l Type J At 0 12 Range 0 11 Init 0
    // RetValue   5 added: Name <returnValue> Type V At 0 12 Range 0 11 Init 0 fixed
    public Real(int i, int j, long l)
    {
        /* super(); */
    //    0    0:aload_0         
    //    1    1:invokespecial   #1   <Method void Object()>
        assign(i, j, l);
    //    2    4:aload_0         
    //    3    5:iload_1         
    //    4    6:iload_2         
    //    5    7:lload_3         
    //    6    8:invokevirtual   #7   <Method void Real.assign(int, int, long)>
        /* return; */
    //    7   11:return          
    }

    // Decompiling method: assign  Signature: (LReal;)V
    // Max stack: 3, #locals: 2, #params: 2
    // Code length: 34 bytes, Code offset: 4351
    // Parameter  0 added: Name this Type LReal; At 0 34 Range 0 33 Init 0 fixed
    // Parameter  1 added: Name real Type LReal; At 0 34 Range 0 33 Init 0
    // RetValue   2 added: Name <returnValue> Type V At 0 34 Range 0 33 Init 0 fixed
    public void assign(Real real)
    {
        if(real == null)
    //*   0    0:aload_1         
    //*   1    1:ifnonnull       9
        {
            makeZero();
    //    2    4:aload_0         
    //    3    5:invokevirtual   #8   <Method void Real.makeZero()>
            return;
    //    4    8:return          
        } else
        {
            sign = real.sign;
    //    5    9:aload_0         
    //    6   10:aload_1         
    //    7   11:getfield        #4   <Field byte Real.sign>
    //    8   14:putfield        #4   <Field byte Real.sign>
            exponent = real.exponent;
    //    9   17:aload_0         
    //   10   18:aload_1         
    //   11   19:getfield        #3   <Field int Real.exponent>
    //   12   22:putfield        #3   <Field int Real.exponent>
            mantissa = real.mantissa;
    //   13   25:aload_0         
    //   14   26:aload_1         
    //   15   27:getfield        #2   <Field long Real.mantissa>
    //   16   30:putfield        #2   <Field long Real.mantissa>
            return;
    //   17   33:return          
        }
    }

    // Decompiling method: assign  Signature: (I)V
    // Max stack: 5, #locals: 3, #params: 2
    // Code length: 94 bytes, Code offset: 4431
    // Parameter  0 added: Name this Type LReal; At 0 94 Range 0 93 Init 0 fixed
    // Parameter  1 added: Name i Type I At 0 94 Range 0 93 Init 0
    // RetValue   3 added: Name <returnValue> Type V At 0 94 Range 0 93 Init 0 fixed
    // LocalVar   2 added: Name j Type I At 27 3 Range 27 29 Init 27
    // LocalVar   2 added: Name k Type I At 33 3 Range 33 35 Init 33
    // LocalVar   2 added: Name l Type I At 39 3 Range 39 41 Init 39
    // LocalVar   2 added: Name i1 Type I At 45 3 Range 45 47 Init 45
    // LocalVar   2 added: Name j1 Type I At 52 3 Range 52 54 Init 52
    // LocalVar   2 added: Name k1 Type I At 59 5 Range 59 63 Init 59
    // LocalVar   2 added: Name l1 Type I At 73 15 Range 73 87 Init 73
    // LocalVar   2 name k(I) merged out into j(I)
    // LocalVar   2 name l(I) merged out into j(I)
    // LocalVar   2 name i1(I) merged out into j(I)
    // LocalVar   2 name j1(I) merged out into j(I)
    // LocalVar   2 name k1(I) merged out into j(I)
    // LocalVar   2 name l1(I) merged out into j(I)
    public void assign(int i)
    {
        if(i == 0)
    //*   0    0:iload_1         
    //*   1    1:ifne            9
        {
            makeZero();
    //    2    4:aload_0         
    //    3    5:invokevirtual   #8   <Method void Real.makeZero()>
            return;
    //    4    8:return          
        }
        sign = 0;
    //    5    9:aload_0         
    //    6   10:iconst_0        
    //    7   11:putfield        #4   <Field byte Real.sign>
        if(i < 0)
    //*   8   14:iload_1         
    //*   9   15:ifge            26
        {
            sign = 1;
    //   10   18:aload_0         
    //   11   19:iconst_1        
    //   12   20:putfield        #4   <Field byte Real.sign>
            i = -i;
    //   13   23:iload_1         
    //   14   24:ineg            
    //   15   25:istore_1        
        }
        int j = i;
    //   16   26:iload_1         
    //   17   27:istore_2        
        j |= j >> 1;
    //   18   28:iload_2         
    //   19   29:iload_2         
    //   20   30:iconst_1        
    //   21   31:ishr            
    //   22   32:ior             
    //   23   33:istore_2        
        j |= j >> 2;
    //   24   34:iload_2         
    //   25   35:iload_2         
    //   26   36:iconst_2        
    //   27   37:ishr            
    //   28   38:ior             
    //   29   39:istore_2        
        j |= j >> 4;
    //   30   40:iload_2         
    //   31   41:iload_2         
    //   32   42:iconst_4        
    //   33   43:ishr            
    //   34   44:ior             
    //   35   45:istore_2        
        j |= j >> 8;
    //   36   46:iload_2         
    //   37   47:iload_2         
    //   38   48:bipush          8
    //   39   50:ishr            
    //   40   51:ior             
    //   41   52:istore_2        
        j |= j >> 16;
    //   42   53:iload_2         
    //   43   54:iload_2         
    //   44   55:bipush          16
    //   45   57:ishr            
    //   46   58:ior             
    //   47   59:istore_2        
        j = clz_tab[j * 0x7c4acdd >>> 27] - 1;
    //   48   60:getstatic       #9   <Field byte[] Real.clz_tab>
    //   49   63:iload_2         
    //   50   64:ldc1            #10  <Int 0x7c4acdd>
    //   51   66:imul            
    //   52   67:bipush          27
    //   53   69:iushr           
    //   54   70:baload          
    //   55   71:iconst_1        
    //   56   72:isub            
    //   57   73:istore_2        
        exponent = 0x4000001e - j;
    //   58   74:aload_0         
    //   59   75:ldc1            #11  <Int 0x4000001e>
    //   60   77:iload_2         
    //   61   78:isub            
    //   62   79:putfield        #3   <Field int Real.exponent>
        mantissa = (long)i << 32 + j;
    //   63   82:aload_0         
    //   64   83:iload_1         
    //   65   84:i2l             
    //   66   85:bipush          32
    //   67   87:iload_2         
    //   68   88:iadd            
    //   69   89:lshl            
    //   70   90:putfield        #2   <Field long Real.mantissa>
        /* return; */
    //   71   93:return          
    }

    // Decompiling method: assign  Signature: (Ljava/lang/String;)V
    // Max stack: 3, #locals: 2, #params: 2
    // Code length: 8 bytes, Code offset: 4579
    // Parameter  0 added: Name this Type LReal; At 0 8 Range 0 7 Init 0 fixed
    // Parameter  1 added: Name s Type Ljava/lang/String; At 0 8 Range 0 7 Init 0
    // RetValue   2 added: Name <returnValue> Type V At 0 8 Range 0 7 Init 0 fixed
    public void assign(String s)
    {
        assign(s, 10);
    //    0    0:aload_0         
    //    1    1:aload_1         
    //    2    2:bipush          10
    //    3    4:invokevirtual   #6   <Method void Real.assign(java.lang.String, int)>
        /* return; */
    //    4    7:return          
    }

    // Decompiling method: assign  Signature: (Ljava/lang/String;I)V
    // Max stack: 3, #locals: 3, #params: 3
    // Code length: 26 bytes, Code offset: 4613
    // Parameter  0 added: Name this Type LReal; At 0 26 Range 0 25 Init 0 fixed
    // Parameter  1 added: Name s Type Ljava/lang/String; At 0 26 Range 0 25 Init 0
    // Parameter  2 added: Name i Type I At 0 26 Range 0 25 Init 0
    // RetValue   3 added: Name <returnValue> Type V At 0 26 Range 0 25 Init 0 fixed
    public void assign(String s, int i)
    {
        if(s == null || s.length() == 0)
    //*   0    0:aload_1         
    //*   1    1:ifnull          11
    //*   2    4:aload_1         
    //*   3    5:invokevirtual   #12  <Method int java.lang.String.length()>
    //*   4    8:ifne            19
        {
            assign(ZERO);
    //    5   11:aload_0         
    //    6   12:getstatic       #13  <Field Real Real.ZERO>
    //    7   15:invokevirtual   #14  <Method void Real.assign(Real)>
            return;
    //    8   18:return          
        } else
        {
            atof(s, i);
    //    9   19:aload_0         
    //   10   20:aload_1         
    //   11   21:iload_2         
    //   12   22:invokespecial   #15  <Method void Real.atof(java.lang.String, int)>
            return;
    //   13   25:return          
        }
    }

    // Decompiling method: assign  Signature: (IIJ)V
    // Max stack: 3, #locals: 5, #params: 5
    // Code length: 17 bytes, Code offset: 4699
    // Parameter  0 added: Name this Type LReal; At 0 17 Range 0 16 Init 0 fixed
    // Parameter  1 added: Name i Type I At 0 17 Range 0 16 Init 0
    // Parameter  2 added: Name j Type I At 0 17 Range 0 16 Init 0
    // Parameter  3 added: Name l Type J At 0 17 Range 0 16 Init 0
    // RetValue   5 added: Name <returnValue> Type V At 0 17 Range 0 16 Init 0 fixed
    public void assign(int i, int j, long l)
    {
        sign = (byte)i;
    //    0    0:aload_0         
    //    1    1:iload_1         
    //    2    2:int2byte        
    //    3    3:putfield        #4   <Field byte Real.sign>
        exponent = j;
    //    4    6:aload_0         
    //    5    7:iload_2         
    //    6    8:putfield        #3   <Field int Real.exponent>
        mantissa = l;
    //    7   11:aload_0         
    //    8   12:lload_3         
    //    9   13:putfield        #2   <Field long Real.mantissa>
        /* return; */
    //   10   16:return          
    }

    // Decompiling method: assignFloatBits  Signature: (I)V
    // Max stack: 5, #locals: 2, #params: 2
    // Code length: 136 bytes, Code offset: 4742
    // Parameter  0 added: Name this Type LReal; At 0 136 Range 0 135 Init 0 fixed
    // Parameter  1 added: Name i Type I At 0 136 Range 0 135 Init 0
    // RetValue   2 added: Name <returnValue> Type V At 0 136 Range 0 135 Init 0 fixed
    public void assignFloatBits(int i)
    {
        sign = (byte)(i >>> 31);
    //    0    0:aload_0         
    //    1    1:iload_1         
    //    2    2:bipush          31
    //    3    4:iushr           
    //    4    5:int2byte        
    //    5    6:putfield        #4   <Field byte Real.sign>
        exponent = i >> 23 & 0xff;
    //    6    9:aload_0         
    //    7   10:iload_1         
    //    8   11:bipush          23
    //    9   13:ishr            
    //   10   14:sipush          255
    //   11   17:iand            
    //   12   18:putfield        #3   <Field int Real.exponent>
        mantissa = (long)(i & 0x7fffff) << 39;
    //   13   21:aload_0         
    //   14   22:iload_1         
    //   15   23:ldc1            #16  <Int 0x7fffff>
    //   16   25:iand            
    //   17   26:i2l             
    //   18   27:bipush          39
    //   19   29:lshl            
    //   20   30:putfield        #2   <Field long Real.mantissa>
        if(exponent == 0 && mantissa == 0L)
    //*  21   33:aload_0         
    //*  22   34:getfield        #3   <Field int Real.exponent>
    //*  23   37:ifne            50
    //*  24   40:aload_0         
    //*  25   41:getfield        #2   <Field long Real.mantissa>
    //*  26   44:lconst_0        
    //*  27   45:lcmp            
    //*  28   46:ifne            50
            return;
    //   29   49:return          
        if(exponent == 0 && mantissa != 0L)
    //*  30   50:aload_0         
    //*  31   51:getfield        #3   <Field int Real.exponent>
    //*  32   54:ifne            77
    //*  33   57:aload_0         
    //*  34   58:getfield        #2   <Field long Real.mantissa>
    //*  35   61:lconst_0        
    //*  36   62:lcmp            
    //*  37   63:ifeq            77
        {
            exponent = 0x3fffff82;
    //   38   66:aload_0         
    //   39   67:ldc1            #17  <Int 0x3fffff82>
    //   40   69:putfield        #3   <Field int Real.exponent>
            normalize();
    //   41   72:aload_0         
    //   42   73:invokevirtual   #18  <Method void Real.normalize()>
            return;
    //   43   76:return          
        }
        if(exponent <= 254)
    //*  44   77:aload_0         
    //*  45   78:getfield        #3   <Field int Real.exponent>
    //*  46   81:sipush          254
    //*  47   84:icmpgt          111
        {
            exponent += 0x3fffff81;
    //   48   87:aload_0         
    //   49   88:dup             
    //   50   89:getfield        #3   <Field int Real.exponent>
    //   51   92:ldc1            #19  <Int 0x3fffff81>
    //   52   94:iadd            
    //   53   95:putfield        #3   <Field int Real.exponent>
            mantissa |= 0x4000000000000000L;
    //   54   98:aload_0         
    //   55   99:dup             
    //   56  100:getfield        #2   <Field long Real.mantissa>
    //   57  103:ldc2w           #20  <Long 0x4000000000000000L>
    //   58  106:lor             
    //   59  107:putfield        #2   <Field long Real.mantissa>
            return;
    //   60  110:return          
        }
        if(mantissa == 0L)
    //*  61  111:aload_0         
    //*  62  112:getfield        #2   <Field long Real.mantissa>
    //*  63  115:lconst_0        
    //*  64  116:lcmp            
    //*  65  117:ifne            131
            makeInfinity(sign);
    //   66  120:aload_0         
    //   67  121:aload_0         
    //   68  122:getfield        #4   <Field byte Real.sign>
    //   69  125:invokevirtual   #22  <Method void Real.makeInfinity(int)>
        else
    //*  70  128:goto            135
            makeNan();
    //   71  131:aload_0         
    //   72  132:invokevirtual   #23  <Method void Real.makeNan()>
        /* return; */
    //   73  135:return          
    }

    // Decompiling method: makeZero  Signature: ()V
    // Max stack: 3, #locals: 1, #params: 1
    // Code length: 16 bytes, Code offset: 4962
    // Parameter  0 added: Name this Type LReal; At 0 16 Range 0 15 Init 0 fixed
    // RetValue   1 added: Name <returnValue> Type V At 0 16 Range 0 15 Init 0 fixed
    public void makeZero()
    {
        sign = 0;
    //    0    0:aload_0         
    //    1    1:iconst_0        
    //    2    2:putfield        #4   <Field byte Real.sign>
        mantissa = 0L;
    //    3    5:aload_0         
    //    4    6:lconst_0        
    //    5    7:putfield        #2   <Field long Real.mantissa>
        exponent = 0;
    //    6   10:aload_0         
    //    7   11:iconst_0        
    //    8   12:putfield        #3   <Field int Real.exponent>
        /* return; */
    //    9   15:return          
    }

    // Decompiling method: makeZero  Signature: (I)V
    // Max stack: 3, #locals: 2, #params: 2
    // Code length: 17 bytes, Code offset: 5004
    // Parameter  0 added: Name this Type LReal; At 0 17 Range 0 16 Init 0 fixed
    // Parameter  1 added: Name i Type I At 0 17 Range 0 16 Init 0
    // RetValue   2 added: Name <returnValue> Type V At 0 17 Range 0 16 Init 0 fixed
    public void makeZero(int i)
    {
        sign = (byte)i;
    //    0    0:aload_0         
    //    1    1:iload_1         
    //    2    2:int2byte        
    //    3    3:putfield        #4   <Field byte Real.sign>
        mantissa = 0L;
    //    4    6:aload_0         
    //    5    7:lconst_0        
    //    6    8:putfield        #2   <Field long Real.mantissa>
        exponent = 0;
    //    7   11:aload_0         
    //    8   12:iconst_0        
    //    9   13:putfield        #3   <Field int Real.exponent>
        /* return; */
    //   10   16:return          
    }

    // Decompiling method: makeInfinity  Signature: (I)V
    // Max stack: 3, #locals: 2, #params: 2
    // Code length: 18 bytes, Code offset: 5047
    // Parameter  0 added: Name this Type LReal; At 0 18 Range 0 17 Init 0 fixed
    // Parameter  1 added: Name i Type I At 0 18 Range 0 17 Init 0
    // RetValue   2 added: Name <returnValue> Type V At 0 18 Range 0 17 Init 0 fixed
    public void makeInfinity(int i)
    {
        sign = (byte)i;
    //    0    0:aload_0         
    //    1    1:iload_1         
    //    2    2:int2byte        
    //    3    3:putfield        #4   <Field byte Real.sign>
        mantissa = 0L;
    //    4    6:aload_0         
    //    5    7:lconst_0        
    //    6    8:putfield        #2   <Field long Real.mantissa>
        exponent = 0x80000000;
    //    7   11:aload_0         
    //    8   12:ldc1            #24  <Int 0x80000000>
    //    9   14:putfield        #3   <Field int Real.exponent>
        /* return; */
    //   10   17:return          
    }

    // Decompiling method: makeNan  Signature: ()V
    // Max stack: 3, #locals: 1, #params: 1
    // Code length: 19 bytes, Code offset: 5091
    // Parameter  0 added: Name this Type LReal; At 0 19 Range 0 18 Init 0 fixed
    // RetValue   1 added: Name <returnValue> Type V At 0 19 Range 0 18 Init 0 fixed
    public void makeNan()
    {
        sign = 0;
    //    0    0:aload_0         
    //    1    1:iconst_0        
    //    2    2:putfield        #4   <Field byte Real.sign>
        mantissa = 0x4000000000000000L;
    //    3    5:aload_0         
    //    4    6:ldc2w           #20  <Long 0x4000000000000000L>
    //    5    9:putfield        #2   <Field long Real.mantissa>
        exponent = 0x80000000;
    //    6   12:aload_0         
    //    7   13:ldc1            #24  <Int 0x80000000>
    //    8   15:putfield        #3   <Field int Real.exponent>
        /* return; */
    //    9   18:return          
    }

    // Decompiling method: isZero  Signature: ()Z
    // Max stack: 4, #locals: 1, #params: 1
    // Code length: 22 bytes, Code offset: 5136
    // Parameter  0 added: Name this Type LReal; At 0 22 Range 0 21 Init 0 fixed
    // RetValue   1 added: Name <returnValue> Type Z At 0 22 Range 0 21 Init 0 fixed
    public boolean isZero()
    {
        return exponent == 0 && mantissa == 0L;
    //    0    0:aload_0         
    //    1    1:getfield        #3   <Field int Real.exponent>
    //    2    4:ifne            20
    //    3    7:aload_0         
    //    4    8:getfield        #2   <Field long Real.mantissa>
    //    5   11:lconst_0        
    //    6   12:lcmp            
    //    7   13:ifne            20
    //    8   16:iconst_1        
    //    9   17:goto            21
    //   10   20:iconst_0        
    //   11   21:ireturn         
    }

    // Decompiling method: isInfinity  Signature: ()Z
    // Max stack: 4, #locals: 1, #params: 1
    // Code length: 22 bytes, Code offset: 5211
    // Parameter  0 added: Name this Type LReal; At 0 22 Range 0 21 Init 0 fixed
    // RetValue   1 added: Name <returnValue> Type Z At 0 22 Range 0 21 Init 0 fixed
    public boolean isInfinity()
    {
        return exponent < 0 && mantissa == 0L;
    //    0    0:aload_0         
    //    1    1:getfield        #3   <Field int Real.exponent>
    //    2    4:ifge            20
    //    3    7:aload_0         
    //    4    8:getfield        #2   <Field long Real.mantissa>
    //    5   11:lconst_0        
    //    6   12:lcmp            
    //    7   13:ifne            20
    //    8   16:iconst_1        
    //    9   17:goto            21
    //   10   20:iconst_0        
    //   11   21:ireturn         
    }

    // Decompiling method: isNan  Signature: ()Z
    // Max stack: 4, #locals: 1, #params: 1
    // Code length: 22 bytes, Code offset: 5286
    // Parameter  0 added: Name this Type LReal; At 0 22 Range 0 21 Init 0 fixed
    // RetValue   1 added: Name <returnValue> Type Z At 0 22 Range 0 21 Init 0 fixed
    public boolean isNan()
    {
        return exponent < 0 && mantissa != 0L;
    //    0    0:aload_0         
    //    1    1:getfield        #3   <Field int Real.exponent>
    //    2    4:ifge            20
    //    3    7:aload_0         
    //    4    8:getfield        #2   <Field long Real.mantissa>
    //    5   11:lconst_0        
    //    6   12:lcmp            
    //    7   13:ifeq            20
    //    8   16:iconst_1        
    //    9   17:goto            21
    //   10   20:iconst_0        
    //   11   21:ireturn         
    }

    // Decompiling method: isFinite  Signature: ()Z
    // Max stack: 1, #locals: 1, #params: 1
    // Code length: 13 bytes, Code offset: 5361
    // Parameter  0 added: Name this Type LReal; At 0 13 Range 0 12 Init 0 fixed
    // RetValue   1 added: Name <returnValue> Type Z At 0 13 Range 0 12 Init 0 fixed
    public boolean isFinite()
    {
        return exponent >= 0;
    //    0    0:aload_0         
    //    1    1:getfield        #3   <Field int Real.exponent>
    //    2    4:iflt            11
    //    3    7:iconst_1        
    //    4    8:goto            12
    //    5   11:iconst_0        
    //    6   12:ireturn         
    }

    // Decompiling method: isFiniteNonZero  Signature: ()Z
    // Max stack: 4, #locals: 1, #params: 1
    // Code length: 22 bytes, Code offset: 5427
    // Parameter  0 added: Name this Type LReal; At 0 22 Range 0 21 Init 0 fixed
    // RetValue   1 added: Name <returnValue> Type Z At 0 22 Range 0 21 Init 0 fixed
    public boolean isFiniteNonZero()
    {
        return exponent >= 0 && mantissa != 0L;
    //    0    0:aload_0         
    //    1    1:getfield        #3   <Field int Real.exponent>
    //    2    4:iflt            20
    //    3    7:aload_0         
    //    4    8:getfield        #2   <Field long Real.mantissa>
    //    5   11:lconst_0        
    //    6   12:lcmp            
    //    7   13:ifeq            20
    //    8   16:iconst_1        
    //    9   17:goto            21
    //   10   20:iconst_0        
    //   11   21:ireturn         
    }

    // Decompiling method: isNegative  Signature: ()Z
    // Max stack: 1, #locals: 1, #params: 1
    // Code length: 13 bytes, Code offset: 5502
    // Parameter  0 added: Name this Type LReal; At 0 13 Range 0 12 Init 0 fixed
    // RetValue   1 added: Name <returnValue> Type Z At 0 13 Range 0 12 Init 0 fixed
    public boolean isNegative()
    {
        return sign != 0;
    //    0    0:aload_0         
    //    1    1:getfield        #4   <Field byte Real.sign>
    //    2    4:ifeq            11
    //    3    7:iconst_1        
    //    4    8:goto            12
    //    5   11:iconst_0        
    //    6   12:ireturn         
    }

    // Decompiling method: abs  Signature: ()V
    // Max stack: 2, #locals: 1, #params: 1
    // Code length: 6 bytes, Code offset: 5568
    // Parameter  0 added: Name this Type LReal; At 0 6 Range 0 5 Init 0 fixed
    // RetValue   1 added: Name <returnValue> Type V At 0 6 Range 0 5 Init 0 fixed
    public void abs()
    {
        sign = 0;
    //    0    0:aload_0         
    //    1    1:iconst_0        
    //    2    2:putfield        #4   <Field byte Real.sign>
        /* return; */
    //    3    5:return          
    }

    // Decompiling method: neg  Signature: ()V
    // Max stack: 4, #locals: 1, #params: 1
    // Code length: 28 bytes, Code offset: 5600
    // Parameter  0 added: Name this Type LReal; At 0 28 Range 0 27 Init 0 fixed
    // RetValue   1 added: Name <returnValue> Type V At 0 28 Range 0 27 Init 0 fixed
    public void neg()
    {
        if(exponent >= 0 || mantissa == 0L)
    //*   0    0:aload_0         
    //*   1    1:getfield        #3   <Field int Real.exponent>
    //*   2    4:ifge            16
    //*   3    7:aload_0         
    //*   4    8:getfield        #2   <Field long Real.mantissa>
    //*   5   11:lconst_0        
    //*   6   12:lcmp            
    //*   7   13:ifne            27
            sign ^= 1;
    //    8   16:aload_0         
    //    9   17:dup             
    //   10   18:getfield        #4   <Field byte Real.sign>
    //   11   21:iconst_1        
    //   12   22:ixor            
    //   13   23:int2byte        
    //   14   24:putfield        #4   <Field byte Real.sign>
        /* return; */
    //   15   27:return          
    }

    // Decompiling method: copysign  Signature: (LReal;)V
    // Max stack: 4, #locals: 2, #params: 2
    // Code length: 46 bytes, Code offset: 5680
    // Parameter  0 added: Name this Type LReal; At 0 46 Range 0 45 Init 0 fixed
    // Parameter  1 added: Name real Type LReal; At 0 46 Range 0 45 Init 0
    // RetValue   2 added: Name <returnValue> Type V At 0 46 Range 0 45 Init 0 fixed
    public void copysign(Real real)
    {
        if(exponent < 0 && mantissa != 0L || real.exponent < 0 && real.mantissa != 0L)
    //*   0    0:aload_0         
    //*   1    1:getfield        #3   <Field int Real.exponent>
    //*   2    4:ifge            16
    //*   3    7:aload_0         
    //*   4    8:getfield        #2   <Field long Real.mantissa>
    //*   5   11:lconst_0        
    //*   6   12:lcmp            
    //*   7   13:ifne            32
    //*   8   16:aload_1         
    //*   9   17:getfield        #3   <Field int Real.exponent>
    //*  10   20:ifge            37
    //*  11   23:aload_1         
    //*  12   24:getfield        #2   <Field long Real.mantissa>
    //*  13   27:lconst_0        
    //*  14   28:lcmp            
    //*  15   29:ifeq            37
        {
            makeNan();
    //   16   32:aload_0         
    //   17   33:invokevirtual   #23  <Method void Real.makeNan()>
            return;
    //   18   36:return          
        } else
        {
            sign = real.sign;
    //   19   37:aload_0         
    //   20   38:aload_1         
    //   21   39:getfield        #4   <Field byte Real.sign>
    //   22   42:putfield        #4   <Field byte Real.sign>
            return;
    //   23   45:return          
        }
    }

    // Decompiling method: normalize  Signature: ()V
    // Max stack: 5, #locals: 3, #params: 1
    // Code length: 207 bytes, Code offset: 5796
    // Parameter  0 added: Name this Type LReal; At 0 207 Range 0 206 Init 0 fixed
    // RetValue   3 added: Name <returnValue> Type V At 0 207 Range 0 206 Init 0 fixed
    // LocalVar   1 added: Name flag Type Z At 17 56 Range 17 72 Init 17
    // LocalVar   2 added: Name i Type I At 26 16 Range 26 41 Init 26
    // LocalVar   1 chged: Name byte0 Oname flag Type B At 33 40 Range 17 72 Init 17
    // LocalVar   2 added: Name j Type I At 45 3 Range 45 47 Init 45
    // LocalVar   2 added: Name k Type I At 51 3 Range 51 53 Init 51
    // LocalVar   2 added: Name l Type I At 57 3 Range 57 59 Init 57
    // LocalVar   2 added: Name i1 Type I At 64 3 Range 64 66 Init 64
    // LocalVar   2 added: Name j1 Type I At 71 6 Range 71 76 Init 71
    // LocalVar   1 added: Name k1 Type I At 87 17 Range 87 103 Init 87
    // LocalVar   1 chged: Name l1 Oname byte0 Type I At 17 56 Range 17 72 Init 17
    // LocalVar   1 name k1(I) merged out into l1(I)
    // LocalVar   2 name j(I) merged out into i(I)
    // LocalVar   2 name k(I) merged out into i(I)
    // LocalVar   2 name l(I) merged out into i(I)
    // LocalVar   2 name i1(I) merged out into i(I)
    // LocalVar   2 name j1(I) merged out into i(I)
    public void normalize()
    {
        if(exponent >= 0)
    //*   0    0:aload_0         
    //*   1    1:getfield        #3   <Field int Real.exponent>
    //*   2    4:iflt            206
            if(mantissa > 0L)
    //*   3    7:aload_0         
    //*   4    8:getfield        #2   <Field long Real.mantissa>
    //*   5   11:lconst_0        
    //*   6   12:lcmp            
    //*   7   13:ifle            126
            {
                int i = 0;
    //    8   16:iconst_0        
    //    9   17:istore_1        
                int j = (int)(mantissa >>> 32);
    //   10   18:aload_0         
    //   11   19:getfield        #2   <Field long Real.mantissa>
    //   12   22:bipush          32
    //   13   24:lushr           
    //   14   25:l2i             
    //   15   26:istore_2        
                if(j == 0)
    //*  16   27:iload_2         
    //*  17   28:ifne            40
                {
                    i = 32;
    //   18   31:bipush          32
    //   19   33:istore_1        
                    j = (int)mantissa;
    //   20   34:aload_0         
    //   21   35:getfield        #2   <Field long Real.mantissa>
    //   22   38:l2i             
    //   23   39:istore_2        
                }
                j |= j >> 1;
    //   24   40:iload_2         
    //   25   41:iload_2         
    //   26   42:iconst_1        
    //   27   43:ishr            
    //   28   44:ior             
    //   29   45:istore_2        
                j |= j >> 2;
    //   30   46:iload_2         
    //   31   47:iload_2         
    //   32   48:iconst_2        
    //   33   49:ishr            
    //   34   50:ior             
    //   35   51:istore_2        
                j |= j >> 4;
    //   36   52:iload_2         
    //   37   53:iload_2         
    //   38   54:iconst_4        
    //   39   55:ishr            
    //   40   56:ior             
    //   41   57:istore_2        
                j |= j >> 8;
    //   42   58:iload_2         
    //   43   59:iload_2         
    //   44   60:bipush          8
    //   45   62:ishr            
    //   46   63:ior             
    //   47   64:istore_2        
                j |= j >> 16;
    //   48   65:iload_2         
    //   49   66:iload_2         
    //   50   67:bipush          16
    //   51   69:ishr            
    //   52   70:ior             
    //   53   71:istore_2        
                i += clz_tab[j * 0x7c4acdd >>> 27] - 1;
    //   54   72:iload_1         
    //   55   73:getstatic       #9   <Field byte[] Real.clz_tab>
    //   56   76:iload_2         
    //   57   77:ldc1            #10  <Int 0x7c4acdd>
    //   58   79:imul            
    //   59   80:bipush          27
    //   60   82:iushr           
    //   61   83:baload          
    //   62   84:iconst_1        
    //   63   85:isub            
    //   64   86:iadd            
    //   65   87:istore_1        
                mantissa <<= i;
    //   66   88:aload_0         
    //   67   89:dup             
    //   68   90:getfield        #2   <Field long Real.mantissa>
    //   69   93:iload_1         
    //   70   94:lshl            
    //   71   95:putfield        #2   <Field long Real.mantissa>
                exponent -= i;
    //   72   98:aload_0         
    //   73   99:dup             
    //   74  100:getfield        #3   <Field int Real.exponent>
    //   75  103:iload_1         
    //   76  104:isub            
    //   77  105:putfield        #3   <Field int Real.exponent>
                if(exponent < 0)
    //*  78  108:aload_0         
    //*  79  109:getfield        #3   <Field int Real.exponent>
    //*  80  112:ifge            206
                    makeZero(sign);
    //   81  115:aload_0         
    //   82  116:aload_0         
    //   83  117:getfield        #4   <Field byte Real.sign>
    //   84  120:invokevirtual   #25  <Method void Real.makeZero(int)>
            } else
    //*  85  123:goto            206
            if(mantissa < 0L)
    //*  86  126:aload_0         
    //*  87  127:getfield        #2   <Field long Real.mantissa>
    //*  88  130:lconst_0        
    //*  89  131:lcmp            
    //*  90  132:ifge            201
            {
                mantissa = mantissa + 1L >>> 1;
    //   91  135:aload_0         
    //   92  136:aload_0         
    //   93  137:getfield        #2   <Field long Real.mantissa>
    //   94  140:lconst_1        
    //   95  141:ladd            
    //   96  142:iconst_1        
    //   97  143:lushr           
    //   98  144:putfield        #2   <Field long Real.mantissa>
                exponent++;
    //   99  147:aload_0         
    //  100  148:dup             
    //  101  149:getfield        #3   <Field int Real.exponent>
    //  102  152:iconst_1        
    //  103  153:iadd            
    //  104  154:putfield        #3   <Field int Real.exponent>
                if(mantissa == 0L)
    //* 105  157:aload_0         
    //* 106  158:getfield        #2   <Field long Real.mantissa>
    //* 107  161:lconst_0        
    //* 108  162:lcmp            
    //* 109  163:ifne            183
                {
                    mantissa = 0x4000000000000000L;
    //  110  166:aload_0         
    //  111  167:ldc2w           #20  <Long 0x4000000000000000L>
    //  112  170:putfield        #2   <Field long Real.mantissa>
                    exponent++;
    //  113  173:aload_0         
    //  114  174:dup             
    //  115  175:getfield        #3   <Field int Real.exponent>
    //  116  178:iconst_1        
    //  117  179:iadd            
    //  118  180:putfield        #3   <Field int Real.exponent>
                }
                if(exponent < 0)
    //* 119  183:aload_0         
    //* 120  184:getfield        #3   <Field int Real.exponent>
    //* 121  187:ifge            206
                    makeInfinity(sign);
    //  122  190:aload_0         
    //  123  191:aload_0         
    //  124  192:getfield        #4   <Field byte Real.sign>
    //  125  195:invokevirtual   #22  <Method void Real.makeInfinity(int)>
            } else
    //* 126  198:goto            206
            {
                exponent = 0;
    //  127  201:aload_0         
    //  128  202:iconst_0        
    //  129  203:putfield        #3   <Field int Real.exponent>
            }
        /* return; */
    //  130  206:return          
    }

    // Decompiling method: normalize128  Signature: (J)J
    // Max stack: 6, #locals: 3, #params: 3
    // Code length: 240 bytes, Code offset: 6084
    // Parameter  0 added: Name this Type LReal; At 0 240 Range 0 239 Init 0 fixed
    // Parameter  1 added: Name l Type J At 0 240 Range 0 239 Init 0
    // RetValue   3 added: Name <returnValue> Type J At 0 240 Range 0 239 Init 0 fixed
    public long normalize128(long l)
    {
        if(exponent < 0)
    //*   0    0:aload_0         
    //*   1    1:getfield        #3   <Field int Real.exponent>
    //*   2    4:ifge            9
            return 0L;
    //    3    7:lconst_0        
    //    4    8:lreturn         
        if(mantissa == 0L && l == 0L)
    //*   5    9:aload_0         
    //*   6   10:getfield        #2   <Field long Real.mantissa>
    //*   7   13:lconst_0        
    //*   8   14:lcmp            
    //*   9   15:ifne            31
    //*  10   18:lload_1         
    //*  11   19:lconst_0        
    //*  12   20:lcmp            
    //*  13   21:ifne            31
        {
            exponent = 0;
    //   14   24:aload_0         
    //   15   25:iconst_0        
    //   16   26:putfield        #3   <Field int Real.exponent>
            return 0L;
    //   17   29:lconst_0        
    //   18   30:lreturn         
        }
        if(mantissa < 0L)
    //*  19   31:aload_0         
    //*  20   32:getfield        #2   <Field long Real.mantissa>
    //*  21   35:lconst_0        
    //*  22   36:lcmp            
    //*  23   37:ifge            121
        {
            l = (mantissa << 63) + (l >>> 1);
    //   24   40:aload_0         
    //   25   41:getfield        #2   <Field long Real.mantissa>
    //   26   44:bipush          63
    //   27   46:lshl            
    //   28   47:lload_1         
    //   29   48:iconst_1        
    //   30   49:lushr           
    //   31   50:ladd            
    //   32   51:lstore_1        
            mantissa >>>= 1;
    //   33   52:aload_0         
    //   34   53:dup             
    //   35   54:getfield        #2   <Field long Real.mantissa>
    //   36   57:iconst_1        
    //   37   58:lushr           
    //   38   59:putfield        #2   <Field long Real.mantissa>
            exponent++;
    //   39   62:aload_0         
    //   40   63:dup             
    //   41   64:getfield        #3   <Field int Real.exponent>
    //   42   67:iconst_1        
    //   43   68:iadd            
    //   44   69:putfield        #3   <Field int Real.exponent>
            if(exponent < 0)
    //*  45   72:aload_0         
    //*  46   73:getfield        #3   <Field int Real.exponent>
    //*  47   76:ifge            87
                makeInfinity(sign);
    //   48   79:aload_0         
    //   49   80:aload_0         
    //   50   81:getfield        #4   <Field byte Real.sign>
    //   51   84:invokevirtual   #22  <Method void Real.makeInfinity(int)>
            return l;
    //   52   87:lload_1         
    //   53   88:lreturn         
        }
        while(mantissa >>> 47 == 0L) 
        {
            mantissa = (mantissa << 16) + (l >>> 48);
    //   54   89:aload_0         
    //   55   90:aload_0         
    //   56   91:getfield        #2   <Field long Real.mantissa>
    //   57   94:bipush          16
    //   58   96:lshl            
    //   59   97:lload_1         
    //   60   98:bipush          48
    //   61  100:lushr           
    //   62  101:ladd            
    //   63  102:putfield        #2   <Field long Real.mantissa>
            l <<= 16;
    //   64  105:lload_1         
    //   65  106:bipush          16
    //   66  108:lshl            
    //   67  109:lstore_1        
            exponent -= 16;
    //   68  110:aload_0         
    //   69  111:dup             
    //   70  112:getfield        #3   <Field int Real.exponent>
    //   71  115:bipush          16
    //   72  117:isub            
    //   73  118:putfield        #3   <Field int Real.exponent>
        }
    //   74  121:aload_0         
    //   75  122:getfield        #2   <Field long Real.mantissa>
    //   76  125:bipush          47
    //   77  127:lushr           
    //   78  128:lconst_0        
    //   79  129:lcmp            
    //   80  130:ifeq            89
    //*  81  133:goto            165
        while(mantissa >>> 59 == 0L) 
        {
            mantissa = (mantissa << 4) + (l >>> 60);
    //   82  136:aload_0         
    //   83  137:aload_0         
    //   84  138:getfield        #2   <Field long Real.mantissa>
    //   85  141:iconst_4        
    //   86  142:lshl            
    //   87  143:lload_1         
    //   88  144:bipush          60
    //   89  146:lushr           
    //   90  147:ladd            
    //   91  148:putfield        #2   <Field long Real.mantissa>
            l <<= 4;
    //   92  151:lload_1         
    //   93  152:iconst_4        
    //   94  153:lshl            
    //   95  154:lstore_1        
            exponent -= 4;
    //   96  155:aload_0         
    //   97  156:dup             
    //   98  157:getfield        #3   <Field int Real.exponent>
    //   99  160:iconst_4        
    //  100  161:isub            
    //  101  162:putfield        #3   <Field int Real.exponent>
        }
    //  102  165:aload_0         
    //  103  166:getfield        #2   <Field long Real.mantissa>
    //  104  169:bipush          59
    //  105  171:lushr           
    //  106  172:lconst_0        
    //  107  173:lcmp            
    //  108  174:ifeq            136
    //* 109  177:goto            209
        while(mantissa >>> 62 == 0L) 
        {
            mantissa = (mantissa << 1) + (l >>> 63);
    //  110  180:aload_0         
    //  111  181:aload_0         
    //  112  182:getfield        #2   <Field long Real.mantissa>
    //  113  185:iconst_1        
    //  114  186:lshl            
    //  115  187:lload_1         
    //  116  188:bipush          63
    //  117  190:lushr           
    //  118  191:ladd            
    //  119  192:putfield        #2   <Field long Real.mantissa>
            l <<= 1;
    //  120  195:lload_1         
    //  121  196:iconst_1        
    //  122  197:lshl            
    //  123  198:lstore_1        
            exponent--;
    //  124  199:aload_0         
    //  125  200:dup             
    //  126  201:getfield        #3   <Field int Real.exponent>
    //  127  204:iconst_1        
    //  128  205:isub            
    //  129  206:putfield        #3   <Field int Real.exponent>
        }
    //  130  209:aload_0         
    //  131  210:getfield        #2   <Field long Real.mantissa>
    //  132  213:bipush          62
    //  133  215:lushr           
    //  134  216:lconst_0        
    //  135  217:lcmp            
    //  136  218:ifeq            180
        if(exponent < 0)
    //* 137  221:aload_0         
    //* 138  222:getfield        #3   <Field int Real.exponent>
    //* 139  225:ifge            238
        {
            makeZero(sign);
    //  140  228:aload_0         
    //  141  229:aload_0         
    //  142  230:getfield        #4   <Field byte Real.sign>
    //  143  233:invokevirtual   #25  <Method void Real.makeZero(int)>
            return 0L;
    //  144  236:lconst_0        
    //  145  237:lreturn         
        } else
        {
            return l;
    //  146  238:lload_1         
    //  147  239:lreturn         
        }
    }

    // Decompiling method: roundFrom128  Signature: (J)V
    // Max stack: 6, #locals: 3, #params: 3
    // Code length: 18 bytes, Code offset: 6458
    // Parameter  0 added: Name this Type LReal; At 0 18 Range 0 17 Init 0 fixed
    // Parameter  1 added: Name l Type J At 0 18 Range 0 17 Init 0
    // RetValue   3 added: Name <returnValue> Type V At 0 18 Range 0 17 Init 0 fixed
    public void roundFrom128(long l)
    {
        mantissa += l >>> 63;
    //    0    0:aload_0         
    //    1    1:dup             
    //    2    2:getfield        #2   <Field long Real.mantissa>
    //    3    5:lload_1         
    //    4    6:bipush          63
    //    5    8:lushr           
    //    6    9:ladd            
    //    7   10:putfield        #2   <Field long Real.mantissa>
        normalize();
    //    8   13:aload_0         
    //    9   14:invokevirtual   #18  <Method void Real.normalize()>
        /* return; */
    //   10   17:return          
    }

    // Decompiling method: compare  Signature: (LReal;)I
    // Max stack: 4, #locals: 3, #params: 2
    // Code length: 167 bytes, Code offset: 6502
    // Parameter  0 added: Name this Type LReal; At 0 167 Range 0 166 Init 0 fixed
    // Parameter  1 added: Name real Type LReal; At 0 167 Range 0 166 Init 0
    // RetValue   3 added: Name <returnValue> Type I At 0 167 Range 0 166 Init 0 fixed
    // LocalVar   2 added: Name byte0 Type B At 67 97 Range 67 163 Init 67
    private int compare(Real real)
    {
        if(exponent == 0 && mantissa == 0L && real.exponent == 0 && real.mantissa == 0L)
    //*   0    0:aload_0         
    //*   1    1:getfield        #3   <Field int Real.exponent>
    //*   2    4:ifne            34
    //*   3    7:aload_0         
    //*   4    8:getfield        #2   <Field long Real.mantissa>
    //*   5   11:lconst_0        
    //*   6   12:lcmp            
    //*   7   13:ifne            34
    //*   8   16:aload_1         
    //*   9   17:getfield        #3   <Field int Real.exponent>
    //*  10   20:ifne            34
    //*  11   23:aload_1         
    //*  12   24:getfield        #2   <Field long Real.mantissa>
    //*  13   27:lconst_0        
    //*  14   28:lcmp            
    //*  15   29:ifne            34
            return 0;
    //   16   32:iconst_0        
    //   17   33:ireturn         
        if(sign != real.sign)
    //*  18   34:aload_0         
    //*  19   35:getfield        #4   <Field byte Real.sign>
    //*  20   38:aload_1         
    //*  21   39:getfield        #4   <Field byte Real.sign>
    //*  22   42:icmpeq          55
            return real.sign - sign;
    //   23   45:aload_1         
    //   24   46:getfield        #4   <Field byte Real.sign>
    //   25   49:aload_0         
    //   26   50:getfield        #4   <Field byte Real.sign>
    //   27   53:isub            
    //   28   54:ireturn         
        byte byte0 = ((byte)(sign != 0 ? -1 : 1));
    //   29   55:aload_0         
    //   30   56:getfield        #4   <Field byte Real.sign>
    //   31   59:ifne            66
    //   32   62:iconst_1        
    //   33   63:goto            67
    //   34   66:iconst_m1       
    //   35   67:istore_2        
        if(exponent < 0 && mantissa == 0L)
    //*  36   68:aload_0         
    //*  37   69:getfield        #3   <Field int Real.exponent>
    //*  38   72:ifge            86
    //*  39   75:aload_0         
    //*  40   76:getfield        #2   <Field long Real.mantissa>
    //*  41   79:lconst_0        
    //*  42   80:lcmp            
    //*  43   81:ifne            86
            return byte0;
    //   44   84:iload_2         
    //   45   85:ireturn         
        if(real.exponent < 0 && real.mantissa == 0L)
    //*  46   86:aload_1         
    //*  47   87:getfield        #3   <Field int Real.exponent>
    //*  48   90:ifge            105
    //*  49   93:aload_1         
    //*  50   94:getfield        #2   <Field long Real.mantissa>
    //*  51   97:lconst_0        
    //*  52   98:lcmp            
    //*  53   99:ifne            105
            return -byte0;
    //   54  102:iload_2         
    //   55  103:ineg            
    //   56  104:ireturn         
        if(exponent != real.exponent)
    //*  57  105:aload_0         
    //*  58  106:getfield        #3   <Field int Real.exponent>
    //*  59  109:aload_1         
    //*  60  110:getfield        #3   <Field int Real.exponent>
    //*  61  113:icmpeq          134
            return exponent >= real.exponent ? byte0 : -byte0;
    //   62  116:aload_0         
    //   63  117:getfield        #3   <Field int Real.exponent>
    //   64  120:aload_1         
    //   65  121:getfield        #3   <Field int Real.exponent>
    //   66  124:icmpge          132
    //   67  127:iload_2         
    //   68  128:ineg            
    //   69  129:goto            133
    //   70  132:iload_2         
    //   71  133:ireturn         
        if(mantissa != real.mantissa)
    //*  72  134:aload_0         
    //*  73  135:getfield        #2   <Field long Real.mantissa>
    //*  74  138:aload_1         
    //*  75  139:getfield        #2   <Field long Real.mantissa>
    //*  76  142:lcmp            
    //*  77  143:ifeq            165
            return mantissa >= real.mantissa ? byte0 : -byte0;
    //   78  146:aload_0         
    //   79  147:getfield        #2   <Field long Real.mantissa>
    //   80  150:aload_1         
    //   81  151:getfield        #2   <Field long Real.mantissa>
    //   82  154:lcmp            
    //   83  155:ifge            163
    //   84  158:iload_2         
    //   85  159:ineg            
    //   86  160:goto            164
    //   87  163:iload_2         
    //   88  164:ireturn         
        else
            return 0;
    //   89  165:iconst_0        
    //   90  166:ireturn         
    }

    // Decompiling method: invalidCompare  Signature: (LReal;)Z
    // Max stack: 4, #locals: 2, #params: 2
    // Code length: 81 bytes, Code offset: 6858
    // Parameter  0 added: Name this Type LReal; At 0 81 Range 0 80 Init 0 fixed
    // Parameter  1 added: Name real Type LReal; At 0 81 Range 0 80 Init 0
    // RetValue   2 added: Name <returnValue> Type Z At 0 81 Range 0 80 Init 0 fixed
    private boolean invalidCompare(Real real)
    {
        return exponent < 0 && mantissa != 0L || real.exponent < 0 && real.mantissa != 0L || exponent < 0 && mantissa == 0L && real.exponent < 0 && real.mantissa == 0L && sign == real.sign;
    //    0    0:aload_0         
    //    1    1:getfield        #3   <Field int Real.exponent>
    //    2    4:ifge            16
    //    3    7:aload_0         
    //    4    8:getfield        #2   <Field long Real.mantissa>
    //    5   11:lconst_0        
    //    6   12:lcmp            
    //    7   13:ifne            75
    //    8   16:aload_1         
    //    9   17:getfield        #3   <Field int Real.exponent>
    //   10   20:ifge            32
    //   11   23:aload_1         
    //   12   24:getfield        #2   <Field long Real.mantissa>
    //   13   27:lconst_0        
    //   14   28:lcmp            
    //   15   29:ifne            75
    //   16   32:aload_0         
    //   17   33:getfield        #3   <Field int Real.exponent>
    //   18   36:ifge            79
    //   19   39:aload_0         
    //   20   40:getfield        #2   <Field long Real.mantissa>
    //   21   43:lconst_0        
    //   22   44:lcmp            
    //   23   45:ifne            79
    //   24   48:aload_1         
    //   25   49:getfield        #3   <Field int Real.exponent>
    //   26   52:ifge            79
    //   27   55:aload_1         
    //   28   56:getfield        #2   <Field long Real.mantissa>
    //   29   59:lconst_0        
    //   30   60:lcmp            
    //   31   61:ifne            79
    //   32   64:aload_0         
    //   33   65:getfield        #4   <Field byte Real.sign>
    //   34   68:aload_1         
    //   35   69:getfield        #4   <Field byte Real.sign>
    //   36   72:icmpne          79
    //   37   75:iconst_1        
    //   38   76:goto            80
    //   39   79:iconst_0        
    //   40   80:ireturn         
    }

    // Decompiling method: equalTo  Signature: (LReal;)Z
    // Max stack: 2, #locals: 2, #params: 2
    // Code length: 24 bytes, Code offset: 7034
    // Parameter  0 added: Name this Type LReal; At 0 24 Range 0 23 Init 0 fixed
    // Parameter  1 added: Name real Type LReal; At 0 24 Range 0 23 Init 0
    // RetValue   2 added: Name <returnValue> Type Z At 0 24 Range 0 23 Init 0 fixed
    public boolean equalTo(Real real)
    {
        if(invalidCompare(real))
    //*   0    0:aload_0         
    //*   1    1:aload_1         
    //*   2    2:invokespecial   #26  <Method boolean Real.invalidCompare(Real)>
    //*   3    5:ifeq            10
            return false;
    //    4    8:iconst_0        
    //    5    9:ireturn         
        else
            return compare(real) == 0;
    //    6   10:aload_0         
    //    7   11:aload_1         
    //    8   12:invokespecial   #27  <Method int Real.compare(Real)>
    //    9   15:ifne            22
    //   10   18:iconst_1        
    //   11   19:goto            23
    //   12   22:iconst_0        
    //   13   23:ireturn         
    }

    // Decompiling method: notEqualTo  Signature: (LReal;)Z
    // Max stack: 2, #locals: 2, #params: 2
    // Code length: 24 bytes, Code offset: 7129
    // Parameter  0 added: Name this Type LReal; At 0 24 Range 0 23 Init 0 fixed
    // Parameter  1 added: Name real Type LReal; At 0 24 Range 0 23 Init 0
    // RetValue   2 added: Name <returnValue> Type Z At 0 24 Range 0 23 Init 0 fixed
    public boolean notEqualTo(Real real)
    {
        if(invalidCompare(real))
    //*   0    0:aload_0         
    //*   1    1:aload_1         
    //*   2    2:invokespecial   #26  <Method boolean Real.invalidCompare(Real)>
    //*   3    5:ifeq            10
            return false;
    //    4    8:iconst_0        
    //    5    9:ireturn         
        else
            return compare(real) != 0;
    //    6   10:aload_0         
    //    7   11:aload_1         
    //    8   12:invokespecial   #27  <Method int Real.compare(Real)>
    //    9   15:ifeq            22
    //   10   18:iconst_1        
    //   11   19:goto            23
    //   12   22:iconst_0        
    //   13   23:ireturn         
    }

    // Decompiling method: lessThan  Signature: (LReal;)Z
    // Max stack: 2, #locals: 2, #params: 2
    // Code length: 24 bytes, Code offset: 7224
    // Parameter  0 added: Name this Type LReal; At 0 24 Range 0 23 Init 0 fixed
    // Parameter  1 added: Name real Type LReal; At 0 24 Range 0 23 Init 0
    // RetValue   2 added: Name <returnValue> Type Z At 0 24 Range 0 23 Init 0 fixed
    public boolean lessThan(Real real)
    {
        if(invalidCompare(real))
    //*   0    0:aload_0         
    //*   1    1:aload_1         
    //*   2    2:invokespecial   #26  <Method boolean Real.invalidCompare(Real)>
    //*   3    5:ifeq            10
            return false;
    //    4    8:iconst_0        
    //    5    9:ireturn         
        else
            return compare(real) < 0;
    //    6   10:aload_0         
    //    7   11:aload_1         
    //    8   12:invokespecial   #27  <Method int Real.compare(Real)>
    //    9   15:ifge            22
    //   10   18:iconst_1        
    //   11   19:goto            23
    //   12   22:iconst_0        
    //   13   23:ireturn         
    }

    // Decompiling method: lessEqual  Signature: (LReal;)Z
    // Max stack: 2, #locals: 2, #params: 2
    // Code length: 24 bytes, Code offset: 7319
    // Parameter  0 added: Name this Type LReal; At 0 24 Range 0 23 Init 0 fixed
    // Parameter  1 added: Name real Type LReal; At 0 24 Range 0 23 Init 0
    // RetValue   2 added: Name <returnValue> Type Z At 0 24 Range 0 23 Init 0 fixed
    public boolean lessEqual(Real real)
    {
        if(invalidCompare(real))
    //*   0    0:aload_0         
    //*   1    1:aload_1         
    //*   2    2:invokespecial   #26  <Method boolean Real.invalidCompare(Real)>
    //*   3    5:ifeq            10
            return false;
    //    4    8:iconst_0        
    //    5    9:ireturn         
        else
            return compare(real) <= 0;
    //    6   10:aload_0         
    //    7   11:aload_1         
    //    8   12:invokespecial   #27  <Method int Real.compare(Real)>
    //    9   15:ifgt            22
    //   10   18:iconst_1        
    //   11   19:goto            23
    //   12   22:iconst_0        
    //   13   23:ireturn         
    }

    // Decompiling method: greaterThan  Signature: (LReal;)Z
    // Max stack: 2, #locals: 2, #params: 2
    // Code length: 24 bytes, Code offset: 7414
    // Parameter  0 added: Name this Type LReal; At 0 24 Range 0 23 Init 0 fixed
    // Parameter  1 added: Name real Type LReal; At 0 24 Range 0 23 Init 0
    // RetValue   2 added: Name <returnValue> Type Z At 0 24 Range 0 23 Init 0 fixed
    public boolean greaterThan(Real real)
    {
        if(invalidCompare(real))
    //*   0    0:aload_0         
    //*   1    1:aload_1         
    //*   2    2:invokespecial   #26  <Method boolean Real.invalidCompare(Real)>
    //*   3    5:ifeq            10
            return false;
    //    4    8:iconst_0        
    //    5    9:ireturn         
        else
            return compare(real) > 0;
    //    6   10:aload_0         
    //    7   11:aload_1         
    //    8   12:invokespecial   #27  <Method int Real.compare(Real)>
    //    9   15:ifle            22
    //   10   18:iconst_1        
    //   11   19:goto            23
    //   12   22:iconst_0        
    //   13   23:ireturn         
    }

    // Decompiling method: greaterEqual  Signature: (LReal;)Z
    // Max stack: 2, #locals: 2, #params: 2
    // Code length: 24 bytes, Code offset: 7509
    // Parameter  0 added: Name this Type LReal; At 0 24 Range 0 23 Init 0 fixed
    // Parameter  1 added: Name real Type LReal; At 0 24 Range 0 23 Init 0
    // RetValue   2 added: Name <returnValue> Type Z At 0 24 Range 0 23 Init 0 fixed
    public boolean greaterEqual(Real real)
    {
        if(invalidCompare(real))
    //*   0    0:aload_0         
    //*   1    1:aload_1         
    //*   2    2:invokespecial   #26  <Method boolean Real.invalidCompare(Real)>
    //*   3    5:ifeq            10
            return false;
    //    4    8:iconst_0        
    //    5    9:ireturn         
        else
            return compare(real) >= 0;
    //    6   10:aload_0         
    //    7   11:aload_1         
    //    8   12:invokespecial   #27  <Method int Real.compare(Real)>
    //    9   15:iflt            22
    //   10   18:iconst_1        
    //   11   19:goto            23
    //   12   22:iconst_0        
    //   13   23:ireturn         
    }

    // Decompiling method: absLessThan  Signature: (LReal;)Z
    // Max stack: 4, #locals: 2, #params: 2
    // Code length: 114 bytes, Code offset: 7604
    // Parameter  0 added: Name this Type LReal; At 0 114 Range 0 113 Init 0 fixed
    // Parameter  1 added: Name real Type LReal; At 0 114 Range 0 113 Init 0
    // RetValue   2 added: Name <returnValue> Type Z At 0 114 Range 0 113 Init 0 fixed
    public boolean absLessThan(Real real)
    {
        if(exponent < 0 && mantissa != 0L || real.exponent < 0 && real.mantissa != 0L || exponent < 0 && mantissa == 0L)
    //*   0    0:aload_0         
    //*   1    1:getfield        #3   <Field int Real.exponent>
    //*   2    4:ifge            16
    //*   3    7:aload_0         
    //*   4    8:getfield        #2   <Field long Real.mantissa>
    //*   5   11:lconst_0        
    //*   6   12:lcmp            
    //*   7   13:ifne            48
    //*   8   16:aload_1         
    //*   9   17:getfield        #3   <Field int Real.exponent>
    //*  10   20:ifge            32
    //*  11   23:aload_1         
    //*  12   24:getfield        #2   <Field long Real.mantissa>
    //*  13   27:lconst_0        
    //*  14   28:lcmp            
    //*  15   29:ifne            48
    //*  16   32:aload_0         
    //*  17   33:getfield        #3   <Field int Real.exponent>
    //*  18   36:ifge            50
    //*  19   39:aload_0         
    //*  20   40:getfield        #2   <Field long Real.mantissa>
    //*  21   43:lconst_0        
    //*  22   44:lcmp            
    //*  23   45:ifne            50
            return false;
    //   24   48:iconst_0        
    //   25   49:ireturn         
        if(real.exponent < 0 && real.mantissa == 0L)
    //*  26   50:aload_1         
    //*  27   51:getfield        #3   <Field int Real.exponent>
    //*  28   54:ifge            68
    //*  29   57:aload_1         
    //*  30   58:getfield        #2   <Field long Real.mantissa>
    //*  31   61:lconst_0        
    //*  32   62:lcmp            
    //*  33   63:ifne            68
            return true;
    //   34   66:iconst_1        
    //   35   67:ireturn         
        if(exponent != real.exponent)
    //*  36   68:aload_0         
    //*  37   69:getfield        #3   <Field int Real.exponent>
    //*  38   72:aload_1         
    //*  39   73:getfield        #3   <Field int Real.exponent>
    //*  40   76:icmpeq          96
            return exponent < real.exponent;
    //   41   79:aload_0         
    //   42   80:getfield        #3   <Field int Real.exponent>
    //   43   83:aload_1         
    //   44   84:getfield        #3   <Field int Real.exponent>
    //   45   87:icmpge          94
    //   46   90:iconst_1        
    //   47   91:goto            95
    //   48   94:iconst_0        
    //   49   95:ireturn         
        else
            return mantissa < real.mantissa;
    //   50   96:aload_0         
    //   51   97:getfield        #2   <Field long Real.mantissa>
    //   52  100:aload_1         
    //   53  101:getfield        #2   <Field long Real.mantissa>
    //   54  104:lcmp            
    //   55  105:ifge            112
    //   56  108:iconst_1        
    //   57  109:goto            113
    //   58  112:iconst_0        
    //   59  113:ireturn         
    }

    // Decompiling method: scalbn  Signature: (I)V
    // Max stack: 4, #locals: 2, #params: 2
    // Code length: 58 bytes, Code offset: 7874
    // Parameter  0 added: Name this Type LReal; At 0 58 Range 0 57 Init 0 fixed
    // Parameter  1 added: Name i Type I At 0 58 Range 0 57 Init 0
    // RetValue   2 added: Name <returnValue> Type V At 0 58 Range 0 57 Init 0 fixed
    public void scalbn(int i)
    {
        if(exponent < 0 || mantissa == 0L)
    //*   0    0:aload_0         
    //*   1    1:getfield        #3   <Field int Real.exponent>
    //*   2    4:iflt            16
    //*   3    7:aload_0         
    //*   4    8:getfield        #2   <Field long Real.mantissa>
    //*   5   11:lconst_0        
    //*   6   12:lcmp            
    //*   7   13:ifne            17
            return;
    //    8   16:return          
        exponent += i;
    //    9   17:aload_0         
    //   10   18:dup             
    //   11   19:getfield        #3   <Field int Real.exponent>
    //   12   22:iload_1         
    //   13   23:iadd            
    //   14   24:putfield        #3   <Field int Real.exponent>
        if(exponent < 0)
    //*  15   27:aload_0         
    //*  16   28:getfield        #3   <Field int Real.exponent>
    //*  17   31:ifge            57
            if(i < 0)
    //*  18   34:iload_1         
    //*  19   35:ifge            49
                makeZero(sign);
    //   20   38:aload_0         
    //   21   39:aload_0         
    //   22   40:getfield        #4   <Field byte Real.sign>
    //   23   43:invokevirtual   #25  <Method void Real.makeZero(int)>
            else
    //*  24   46:goto            57
                makeInfinity(sign);
    //   25   49:aload_0         
    //   26   50:aload_0         
    //   27   51:getfield        #4   <Field byte Real.sign>
    //   28   54:invokevirtual   #22  <Method void Real.makeInfinity(int)>
        /* return; */
    //   29   57:return          
    }

    // Decompiling method: nextafter  Signature: (LReal;)V
    // Max stack: 5, #locals: 3, #params: 2
    // Code length: 299 bytes, Code offset: 8006
    // Parameter  0 added: Name this Type LReal; At 0 299 Range 0 298 Init 0 fixed
    // Parameter  1 added: Name real Type LReal; At 0 299 Range 0 298 Init 0
    // RetValue   3 added: Name <returnValue> Type V At 0 299 Range 0 298 Init 0 fixed
    // LocalVar   2 added: Name i Type I At 87 141 Range 87 227 Init 87
    public void nextafter(Real real)
    {
        if(exponent < 0 && mantissa != 0L || real.exponent < 0 && real.mantissa != 0L)
    //*   0    0:aload_0         
    //*   1    1:getfield        #3   <Field int Real.exponent>
    //*   2    4:ifge            16
    //*   3    7:aload_0         
    //*   4    8:getfield        #2   <Field long Real.mantissa>
    //*   5   11:lconst_0        
    //*   6   12:lcmp            
    //*   7   13:ifne            32
    //*   8   16:aload_1         
    //*   9   17:getfield        #3   <Field int Real.exponent>
    //*  10   20:ifge            37
    //*  11   23:aload_1         
    //*  12   24:getfield        #2   <Field long Real.mantissa>
    //*  13   27:lconst_0        
    //*  14   28:lcmp            
    //*  15   29:ifeq            37
        {
            makeNan();
    //   16   32:aload_0         
    //   17   33:invokevirtual   #23  <Method void Real.makeNan()>
            return;
    //   18   36:return          
        }
        if(exponent < 0 && mantissa == 0L && real.exponent < 0 && real.mantissa == 0L && sign == real.sign)
    //*  19   37:aload_0         
    //*  20   38:getfield        #3   <Field int Real.exponent>
    //*  21   41:ifge            81
    //*  22   44:aload_0         
    //*  23   45:getfield        #2   <Field long Real.mantissa>
    //*  24   48:lconst_0        
    //*  25   49:lcmp            
    //*  26   50:ifne            81
    //*  27   53:aload_1         
    //*  28   54:getfield        #3   <Field int Real.exponent>
    //*  29   57:ifge            81
    //*  30   60:aload_1         
    //*  31   61:getfield        #2   <Field long Real.mantissa>
    //*  32   64:lconst_0        
    //*  33   65:lcmp            
    //*  34   66:ifne            81
    //*  35   69:aload_0         
    //*  36   70:getfield        #4   <Field byte Real.sign>
    //*  37   73:aload_1         
    //*  38   74:getfield        #4   <Field byte Real.sign>
    //*  39   77:icmpne          81
            return;
    //   40   80:return          
        int i = -compare(real);
    //   41   81:aload_0         
    //   42   82:aload_1         
    //   43   83:invokespecial   #27  <Method int Real.compare(Real)>
    //   44   86:ineg            
    //   45   87:istore_2        
        if(i == 0)
    //*  46   88:iload_2         
    //*  47   89:ifne            93
            return;
    //   48   92:return          
        if(exponent == 0 && mantissa == 0L)
    //*  49   93:aload_0         
    //*  50   94:getfield        #3   <Field int Real.exponent>
    //*  51   97:ifne            154
    //*  52  100:aload_0         
    //*  53  101:getfield        #2   <Field long Real.mantissa>
    //*  54  104:lconst_0        
    //*  55  105:lcmp            
    //*  56  106:ifne            154
        {
            mantissa = MIN.mantissa;
    //   57  109:aload_0         
    //   58  110:getstatic       #28  <Field Real Real.MIN>
    //   59  113:getfield        #2   <Field long Real.mantissa>
    //   60  116:putfield        #2   <Field long Real.mantissa>
            exponent = MIN.exponent;
    //   61  119:aload_0         
    //   62  120:getstatic       #28  <Field Real Real.MIN>
    //   63  123:getfield        #3   <Field int Real.exponent>
    //   64  126:putfield        #3   <Field int Real.exponent>
            sign = MIN.sign;
    //   65  129:aload_0         
    //   66  130:getstatic       #28  <Field Real Real.MIN>
    //   67  133:getfield        #4   <Field byte Real.sign>
    //   68  136:putfield        #4   <Field byte Real.sign>
            sign = (byte)(i >= 0 ? 0 : 1);
    //   69  139:aload_0         
    //   70  140:iload_2         
    //   71  141:ifge            148
    //   72  144:iconst_1        
    //   73  145:goto            149
    //   74  148:iconst_0        
    //   75  149:int2byte        
    //   76  150:putfield        #4   <Field byte Real.sign>
            return;
    //   77  153:return          
        }
        if(exponent < 0 && mantissa == 0L)
    //*  78  154:aload_0         
    //*  79  155:getfield        #3   <Field int Real.exponent>
    //*  80  158:ifge            215
    //*  81  161:aload_0         
    //*  82  162:getfield        #2   <Field long Real.mantissa>
    //*  83  165:lconst_0        
    //*  84  166:lcmp            
    //*  85  167:ifne            215
        {
            mantissa = MAX.mantissa;
    //   86  170:aload_0         
    //   87  171:getstatic       #29  <Field Real Real.MAX>
    //   88  174:getfield        #2   <Field long Real.mantissa>
    //   89  177:putfield        #2   <Field long Real.mantissa>
            exponent = MAX.exponent;
    //   90  180:aload_0         
    //   91  181:getstatic       #29  <Field Real Real.MAX>
    //   92  184:getfield        #3   <Field int Real.exponent>
    //   93  187:putfield        #3   <Field int Real.exponent>
            sign = MAX.sign;
    //   94  190:aload_0         
    //   95  191:getstatic       #29  <Field Real Real.MAX>
    //   96  194:getfield        #4   <Field byte Real.sign>
    //   97  197:putfield        #4   <Field byte Real.sign>
            sign = (byte)(i >= 0 ? 1 : 0);
    //   98  200:aload_0         
    //   99  201:iload_2         
    //  100  202:ifge            209
    //  101  205:iconst_0        
    //  102  206:goto            210
    //  103  209:iconst_1        
    //  104  210:int2byte        
    //  105  211:putfield        #4   <Field byte Real.sign>
            return;
    //  106  214:return          
        }
        if((sign == 0) ^ (i < 0))
    //* 107  215:aload_0         
    //* 108  216:getfield        #4   <Field byte Real.sign>
    //* 109  219:ifne            226
    //* 110  222:iconst_1        
    //* 111  223:goto            227
    //* 112  226:iconst_0        
    //* 113  227:iload_2         
    //* 114  228:ifge            235
    //* 115  231:iconst_1        
    //* 116  232:goto            236
    //* 117  235:iconst_0        
    //* 118  236:ixor            
    //* 119  237:ifeq            253
        {
            mantissa++;
    //  120  240:aload_0         
    //  121  241:dup             
    //  122  242:getfield        #2   <Field long Real.mantissa>
    //  123  245:lconst_1        
    //  124  246:ladd            
    //  125  247:putfield        #2   <Field long Real.mantissa>
        } else
    //* 126  250:goto            294
        {
            if(mantissa == 0x4000000000000000L)
    //* 127  253:aload_0         
    //* 128  254:getfield        #2   <Field long Real.mantissa>
    //* 129  257:ldc2w           #20  <Long 0x4000000000000000L>
    //* 130  260:lcmp            
    //* 131  261:ifne            284
            {
                mantissa <<= 1;
    //  132  264:aload_0         
    //  133  265:dup             
    //  134  266:getfield        #2   <Field long Real.mantissa>
    //  135  269:iconst_1        
    //  136  270:lshl            
    //  137  271:putfield        #2   <Field long Real.mantissa>
                exponent--;
    //  138  274:aload_0         
    //  139  275:dup             
    //  140  276:getfield        #3   <Field int Real.exponent>
    //  141  279:iconst_1        
    //  142  280:isub            
    //  143  281:putfield        #3   <Field int Real.exponent>
            }
            mantissa--;
    //  144  284:aload_0         
    //  145  285:dup             
    //  146  286:getfield        #2   <Field long Real.mantissa>
    //  147  289:lconst_1        
    //  148  290:lsub            
    //  149  291:putfield        #2   <Field long Real.mantissa>
        }
        normalize();
    //  150  294:aload_0         
    //  151  295:invokevirtual   #18  <Method void Real.normalize()>
        /* return; */
    //  152  298:return          
    }

    // Decompiling method: floor  Signature: ()V
    // Max stack: 7, #locals: 2, #params: 1
    // Code length: 129 bytes, Code offset: 8587
    // Parameter  0 added: Name this Type LReal; At 0 129 Range 0 128 Init 0 fixed
    // RetValue   2 added: Name <returnValue> Type V At 0 129 Range 0 128 Init 0 fixed
    // LocalVar   1 added: Name i Type I At 72 34 Range 72 105 Init 72
    public void floor()
    {
        if(exponent < 0 || mantissa == 0L)
    //*   0    0:aload_0         
    //*   1    1:getfield        #3   <Field int Real.exponent>
    //*   2    4:iflt            16
    //*   3    7:aload_0         
    //*   4    8:getfield        #2   <Field long Real.mantissa>
    //*   5   11:lconst_0        
    //*   6   12:lcmp            
    //*   7   13:ifne            17
            return;
    //    8   16:return          
        if(exponent < 0x40000000)
    //*   9   17:aload_0         
    //*  10   18:getfield        #3   <Field int Real.exponent>
    //*  11   21:ldc1            #30  <Int 0x40000000>
    //*  12   23:icmpge          65
        {
            if(sign == 0)
    //*  13   26:aload_0         
    //*  14   27:getfield        #4   <Field byte Real.sign>
    //*  15   30:ifne            44
            {
                makeZero(sign);
    //   16   33:aload_0         
    //   17   34:aload_0         
    //   18   35:getfield        #4   <Field byte Real.sign>
    //   19   38:invokevirtual   #25  <Method void Real.makeZero(int)>
            } else
    //*  20   41:goto            64
            {
                exponent = ONE.exponent;
    //   21   44:aload_0         
    //   22   45:getstatic       #31  <Field Real Real.ONE>
    //   23   48:getfield        #3   <Field int Real.exponent>
    //   24   51:putfield        #3   <Field int Real.exponent>
                mantissa = ONE.mantissa;
    //   25   54:aload_0         
    //   26   55:getstatic       #31  <Field Real Real.ONE>
    //   27   58:getfield        #2   <Field long Real.mantissa>
    //   28   61:putfield        #2   <Field long Real.mantissa>
            }
            return;
    //   29   64:return          
        }
        int i = 0x4000003e - exponent;
    //   30   65:ldc1            #32  <Int 0x4000003e>
    //   31   67:aload_0         
    //   32   68:getfield        #3   <Field int Real.exponent>
    //   33   71:isub            
    //   34   72:istore_1        
        if(i <= 0)
    //*  35   73:iload_1         
    //*  36   74:ifgt            78
            return;
    //   37   77:return          
        if(sign != 0)
    //*  38   78:aload_0         
    //*  39   79:getfield        #4   <Field byte Real.sign>
    //*  40   82:ifeq            99
            mantissa += (1L << i) - 1L;
    //   41   85:aload_0         
    //   42   86:dup             
    //   43   87:getfield        #2   <Field long Real.mantissa>
    //   44   90:lconst_1        
    //   45   91:iload_1         
    //   46   92:lshl            
    //   47   93:lconst_1        
    //   48   94:lsub            
    //   49   95:ladd            
    //   50   96:putfield        #2   <Field long Real.mantissa>
        mantissa &= ~((1L << i) - 1L);
    //   51   99:aload_0         
    //   52  100:dup             
    //   53  101:getfield        #2   <Field long Real.mantissa>
    //   54  104:lconst_1        
    //   55  105:iload_1         
    //   56  106:lshl            
    //   57  107:lconst_1        
    //   58  108:lsub            
    //   59  109:ldc2w           #33  <Long -1L>
    //   60  112:lxor            
    //   61  113:land            
    //   62  114:putfield        #2   <Field long Real.mantissa>
        if(sign != 0)
    //*  63  117:aload_0         
    //*  64  118:getfield        #4   <Field byte Real.sign>
    //*  65  121:ifeq            128
            normalize();
    //   66  124:aload_0         
    //   67  125:invokevirtual   #18  <Method void Real.normalize()>
        /* return; */
    //   68  128:return          
    }

    // Decompiling method: ceil  Signature: ()V
    // Max stack: 1, #locals: 1, #params: 1
    // Code length: 13 bytes, Code offset: 8825
    // Parameter  0 added: Name this Type LReal; At 0 13 Range 0 12 Init 0 fixed
    // RetValue   1 added: Name <returnValue> Type V At 0 13 Range 0 12 Init 0 fixed
    public void ceil()
    {
        neg();
    //    0    0:aload_0         
    //    1    1:invokevirtual   #35  <Method void Real.neg()>
        floor();
    //    2    4:aload_0         
    //    3    5:invokevirtual   #36  <Method void Real.floor()>
        neg();
    //    4    8:aload_0         
    //    5    9:invokevirtual   #35  <Method void Real.neg()>
        /* return; */
    //    6   12:return          
    }

    // Decompiling method: round  Signature: ()V
    // Max stack: 7, #locals: 2, #params: 1
    // Code length: 85 bytes, Code offset: 8864
    // Parameter  0 added: Name this Type LReal; At 0 85 Range 0 84 Init 0 fixed
    // RetValue   2 added: Name <returnValue> Type V At 0 85 Range 0 84 Init 0 fixed
    // LocalVar   1 added: Name i Type I At 42 27 Range 42 68 Init 42
    public void round()
    {
        if(exponent < 0 || mantissa == 0L)
    //*   0    0:aload_0         
    //*   1    1:getfield        #3   <Field int Real.exponent>
    //*   2    4:iflt            16
    //*   3    7:aload_0         
    //*   4    8:getfield        #2   <Field long Real.mantissa>
    //*   5   11:lconst_0        
    //*   6   12:lcmp            
    //*   7   13:ifne            17
            return;
    //    8   16:return          
        if(exponent < 0x3fffffff)
    //*   9   17:aload_0         
    //*  10   18:getfield        #3   <Field int Real.exponent>
    //*  11   21:ldc1            #37  <Int 0x3fffffff>
    //*  12   23:icmpge          35
        {
            makeZero(sign);
    //   13   26:aload_0         
    //   14   27:aload_0         
    //   15   28:getfield        #4   <Field byte Real.sign>
    //   16   31:invokevirtual   #25  <Method void Real.makeZero(int)>
            return;
    //   17   34:return          
        }
        int i = 0x4000003e - exponent;
    //   18   35:ldc1            #32  <Int 0x4000003e>
    //   19   37:aload_0         
    //   20   38:getfield        #3   <Field int Real.exponent>
    //   21   41:isub            
    //   22   42:istore_1        
        if(i <= 0)
    //*  23   43:iload_1         
    //*  24   44:ifgt            48
        {
            return;
    //   25   47:return          
        } else
        {
            mantissa += 1L << i - 1;
    //   26   48:aload_0         
    //   27   49:dup             
    //   28   50:getfield        #2   <Field long Real.mantissa>
    //   29   53:lconst_1        
    //   30   54:iload_1         
    //   31   55:iconst_1        
    //   32   56:isub            
    //   33   57:lshl            
    //   34   58:ladd            
    //   35   59:putfield        #2   <Field long Real.mantissa>
            mantissa &= ~((1L << i) - 1L);
    //   36   62:aload_0         
    //   37   63:dup             
    //   38   64:getfield        #2   <Field long Real.mantissa>
    //   39   67:lconst_1        
    //   40   68:iload_1         
    //   41   69:lshl            
    //   42   70:lconst_1        
    //   43   71:lsub            
    //   44   72:ldc2w           #33  <Long -1L>
    //   45   75:lxor            
    //   46   76:land            
    //   47   77:putfield        #2   <Field long Real.mantissa>
            normalize();
    //   48   80:aload_0         
    //   49   81:invokevirtual   #18  <Method void Real.normalize()>
            return;
    //   50   84:return          
        }
    }

    // Decompiling method: trunc  Signature: ()V
    // Max stack: 7, #locals: 2, #params: 1
    // Code length: 71 bytes, Code offset: 9020
    // Parameter  0 added: Name this Type LReal; At 0 71 Range 0 70 Init 0 fixed
    // RetValue   2 added: Name <returnValue> Type V At 0 71 Range 0 70 Init 0 fixed
    // LocalVar   1 added: Name i Type I At 42 13 Range 42 54 Init 42
    public void trunc()
    {
        if(exponent < 0 || mantissa == 0L)
    //*   0    0:aload_0         
    //*   1    1:getfield        #3   <Field int Real.exponent>
    //*   2    4:iflt            16
    //*   3    7:aload_0         
    //*   4    8:getfield        #2   <Field long Real.mantissa>
    //*   5   11:lconst_0        
    //*   6   12:lcmp            
    //*   7   13:ifne            17
            return;
    //    8   16:return          
        if(exponent < 0x40000000)
    //*   9   17:aload_0         
    //*  10   18:getfield        #3   <Field int Real.exponent>
    //*  11   21:ldc1            #30  <Int 0x40000000>
    //*  12   23:icmpge          35
        {
            makeZero(sign);
    //   13   26:aload_0         
    //   14   27:aload_0         
    //   15   28:getfield        #4   <Field byte Real.sign>
    //   16   31:invokevirtual   #25  <Method void Real.makeZero(int)>
            return;
    //   17   34:return          
        }
        int i = 0x4000003e - exponent;
    //   18   35:ldc1            #32  <Int 0x4000003e>
    //   19   37:aload_0         
    //   20   38:getfield        #3   <Field int Real.exponent>
    //   21   41:isub            
    //   22   42:istore_1        
        if(i <= 0)
    //*  23   43:iload_1         
    //*  24   44:ifgt            48
        {
            return;
    //   25   47:return          
        } else
        {
            mantissa &= ~((1L << i) - 1L);
    //   26   48:aload_0         
    //   27   49:dup             
    //   28   50:getfield        #2   <Field long Real.mantissa>
    //   29   53:lconst_1        
    //   30   54:iload_1         
    //   31   55:lshl            
    //   32   56:lconst_1        
    //   33   57:lsub            
    //   34   58:ldc2w           #33  <Long -1L>
    //   35   61:lxor            
    //   36   62:land            
    //   37   63:putfield        #2   <Field long Real.mantissa>
            normalize();
    //   38   66:aload_0         
    //   39   67:invokevirtual   #18  <Method void Real.normalize()>
            return;
    //   40   70:return          
        }
    }

    // Decompiling method: frac  Signature: ()V
    // Max stack: 7, #locals: 2, #params: 1
    // Code length: 66 bytes, Code offset: 9162
    // Parameter  0 added: Name this Type LReal; At 0 66 Range 0 65 Init 0 fixed
    // RetValue   2 added: Name <returnValue> Type V At 0 66 Range 0 65 Init 0 fixed
    // LocalVar   1 added: Name i Type I At 33 21 Range 33 53 Init 33
    public void frac()
    {
        if(exponent < 0 || mantissa == 0L || exponent < 0x40000000)
    //*   0    0:aload_0         
    //*   1    1:getfield        #3   <Field int Real.exponent>
    //*   2    4:iflt            25
    //*   3    7:aload_0         
    //*   4    8:getfield        #2   <Field long Real.mantissa>
    //*   5   11:lconst_0        
    //*   6   12:lcmp            
    //*   7   13:ifeq            25
    //*   8   16:aload_0         
    //*   9   17:getfield        #3   <Field int Real.exponent>
    //*  10   20:ldc1            #30  <Int 0x40000000>
    //*  11   22:icmpge          26
            return;
    //   12   25:return          
        int i = 0x4000003e - exponent;
    //   13   26:ldc1            #32  <Int 0x4000003e>
    //   14   28:aload_0         
    //   15   29:getfield        #3   <Field int Real.exponent>
    //   16   32:isub            
    //   17   33:istore_1        
        if(i <= 0)
    //*  18   34:iload_1         
    //*  19   35:ifgt            47
        {
            makeZero(sign);
    //   20   38:aload_0         
    //   21   39:aload_0         
    //   22   40:getfield        #4   <Field byte Real.sign>
    //   23   43:invokevirtual   #25  <Method void Real.makeZero(int)>
            return;
    //   24   46:return          
        } else
        {
            mantissa &= (1L << i) - 1L;
    //   25   47:aload_0         
    //   26   48:dup             
    //   27   49:getfield        #2   <Field long Real.mantissa>
    //   28   52:lconst_1        
    //   29   53:iload_1         
    //   30   54:lshl            
    //   31   55:lconst_1        
    //   32   56:lsub            
    //   33   57:land            
    //   34   58:putfield        #2   <Field long Real.mantissa>
            normalize();
    //   35   61:aload_0         
    //   36   62:invokevirtual   #18  <Method void Real.normalize()>
            return;
    //   37   65:return          
        }
    }

    // Decompiling method: toInteger  Signature: ()I
    // Max stack: 4, #locals: 2, #params: 1
    // Code length: 127 bytes, Code offset: 9290
    // Parameter  0 added: Name this Type LReal; At 0 127 Range 0 126 Init 0 fixed
    // RetValue   2 added: Name <returnValue> Type I At 0 127 Range 0 126 Init 0 fixed
    // LocalVar   1 added: Name i Type I At 81 42 Range 81 122 Init 81
    public int toInteger()
    {
        if(exponent == 0 && mantissa == 0L || exponent < 0 && mantissa != 0L)
    //*   0    0:aload_0         
    //*   1    1:getfield        #3   <Field int Real.exponent>
    //*   2    4:ifne            16
    //*   3    7:aload_0         
    //*   4    8:getfield        #2   <Field long Real.mantissa>
    //*   5   11:lconst_0        
    //*   6   12:lcmp            
    //*   7   13:ifeq            32
    //*   8   16:aload_0         
    //*   9   17:getfield        #3   <Field int Real.exponent>
    //*  10   20:ifge            34
    //*  11   23:aload_0         
    //*  12   24:getfield        #2   <Field long Real.mantissa>
    //*  13   27:lconst_0        
    //*  14   28:lcmp            
    //*  15   29:ifeq            34
            return 0;
    //   16   32:iconst_0        
    //   17   33:ireturn         
        if(exponent < 0 && mantissa == 0L)
    //*  18   34:aload_0         
    //*  19   35:getfield        #3   <Field int Real.exponent>
    //*  20   38:ifge            63
    //*  21   41:aload_0         
    //*  22   42:getfield        #2   <Field long Real.mantissa>
    //*  23   45:lconst_0        
    //*  24   46:lcmp            
    //*  25   47:ifne            63
            return sign != 0 ? 0x80000001 : 0x7fffffff;
    //   26   50:aload_0         
    //   27   51:getfield        #4   <Field byte Real.sign>
    //   28   54:ifne            60
    //   29   57:ldc1            #38  <Int 0x7fffffff>
    //   30   59:ireturn         
    //   31   60:ldc1            #39  <Int 0x80000001>
    //   32   62:ireturn         
        if(exponent < 0x40000000)
    //*  33   63:aload_0         
    //*  34   64:getfield        #3   <Field int Real.exponent>
    //*  35   67:ldc1            #30  <Int 0x40000000>
    //*  36   69:icmpge          74
            return 0;
    //   37   72:iconst_0        
    //   38   73:ireturn         
        int i = 0x4000003e - exponent;
    //   39   74:ldc1            #32  <Int 0x4000003e>
    //   40   76:aload_0         
    //   41   77:getfield        #3   <Field int Real.exponent>
    //   42   80:isub            
    //   43   81:istore_1        
        if(i < 32)
    //*  44   82:iload_1         
    //*  45   83:bipush          32
    //*  46   85:icmpge          101
            return sign != 0 ? 0x80000001 : 0x7fffffff;
    //   47   88:aload_0         
    //   48   89:getfield        #4   <Field byte Real.sign>
    //   49   92:ifne            98
    //   50   95:ldc1            #38  <Int 0x7fffffff>
    //   51   97:ireturn         
    //   52   98:ldc1            #39  <Int 0x80000001>
    //   53  100:ireturn         
        else
            return sign != 0 ? -(int)(mantissa >>> i) : (int)(mantissa >>> i);
    //   54  101:aload_0         
    //   55  102:getfield        #4   <Field byte Real.sign>
    //   56  105:ifne            118
    //   57  108:aload_0         
    //   58  109:getfield        #2   <Field long Real.mantissa>
    //   59  112:iload_1         
    //   60  113:lushr           
    //   61  114:l2i             
    //   62  115:goto            126
    //   63  118:aload_0         
    //   64  119:getfield        #2   <Field long Real.mantissa>
    //   65  122:iload_1         
    //   66  123:lushr           
    //   67  124:l2i             
    //   68  125:ineg            
    //   69  126:ireturn         
    }

    // Decompiling method: isIntegral  Signature: ()Z
    // Max stack: 6, #locals: 2, #params: 1
    // Code length: 98 bytes, Code offset: 9546
    // Parameter  0 added: Name this Type LReal; At 0 98 Range 0 97 Init 0 fixed
    // RetValue   2 added: Name <returnValue> Type Z At 0 98 Range 0 97 Init 0 fixed
    // LocalVar   1 added: Name i Type I At 70 13 Range 70 82 Init 70
    public boolean isIntegral()
    {
        if(exponent < 0 && mantissa != 0L)
    //*   0    0:aload_0         
    //*   1    1:getfield        #3   <Field int Real.exponent>
    //*   2    4:ifge            18
    //*   3    7:aload_0         
    //*   4    8:getfield        #2   <Field long Real.mantissa>
    //*   5   11:lconst_0        
    //*   6   12:lcmp            
    //*   7   13:ifeq            18
            return false;
    //    8   16:iconst_0        
    //    9   17:ireturn         
        if(exponent == 0 && mantissa == 0L || exponent < 0 && mantissa == 0L)
    //*  10   18:aload_0         
    //*  11   19:getfield        #3   <Field int Real.exponent>
    //*  12   22:ifne            34
    //*  13   25:aload_0         
    //*  14   26:getfield        #2   <Field long Real.mantissa>
    //*  15   29:lconst_0        
    //*  16   30:lcmp            
    //*  17   31:ifeq            50
    //*  18   34:aload_0         
    //*  19   35:getfield        #3   <Field int Real.exponent>
    //*  20   38:ifge            52
    //*  21   41:aload_0         
    //*  22   42:getfield        #2   <Field long Real.mantissa>
    //*  23   45:lconst_0        
    //*  24   46:lcmp            
    //*  25   47:ifne            52
            return true;
    //   26   50:iconst_1        
    //   27   51:ireturn         
        if(exponent < 0x40000000)
    //*  28   52:aload_0         
    //*  29   53:getfield        #3   <Field int Real.exponent>
    //*  30   56:ldc1            #30  <Int 0x40000000>
    //*  31   58:icmpge          63
            return false;
    //   32   61:iconst_0        
    //   33   62:ireturn         
        int i = 0x4000003e - exponent;
    //   34   63:ldc1            #32  <Int 0x4000003e>
    //   35   65:aload_0         
    //   36   66:getfield        #3   <Field int Real.exponent>
    //   37   69:isub            
    //   38   70:istore_1        
        if(i <= 0)
    //*  39   71:iload_1         
    //*  40   72:ifgt            77
            return true;
    //   41   75:iconst_1        
    //   42   76:ireturn         
        else
            return (mantissa & (1L << i) - 1L) == 0L;
    //   43   77:aload_0         
    //   44   78:getfield        #2   <Field long Real.mantissa>
    //   45   81:lconst_1        
    //   46   82:iload_1         
    //   47   83:lshl            
    //   48   84:lconst_1        
    //   49   85:lsub            
    //   50   86:land            
    //   51   87:lconst_0        
    //   52   88:lcmp            
    //   53   89:ifne            96
    //   54   92:iconst_1        
    //   55   93:goto            97
    //   56   96:iconst_0        
    //   57   97:ireturn         
    }

    // Decompiling method: isOdd  Signature: ()Z
    // Max stack: 4, #locals: 2, #params: 1
    // Code length: 63 bytes, Code offset: 9754
    // Parameter  0 added: Name this Type LReal; At 0 63 Range 0 62 Init 0 fixed
    // RetValue   2 added: Name <returnValue> Type Z At 0 63 Range 0 62 Init 0 fixed
    // LocalVar   1 added: Name i Type I At 43 6 Range 43 48 Init 43
    public boolean isOdd()
    {
        if(exponent < 0 || mantissa == 0L || exponent < 0x40000000 || exponent > 0x4000003e)
    //*   0    0:aload_0         
    //*   1    1:getfield        #3   <Field int Real.exponent>
    //*   2    4:iflt            34
    //*   3    7:aload_0         
    //*   4    8:getfield        #2   <Field long Real.mantissa>
    //*   5   11:lconst_0        
    //*   6   12:lcmp            
    //*   7   13:ifeq            34
    //*   8   16:aload_0         
    //*   9   17:getfield        #3   <Field int Real.exponent>
    //*  10   20:ldc1            #30  <Int 0x40000000>
    //*  11   22:icmplt          34
    //*  12   25:aload_0         
    //*  13   26:getfield        #3   <Field int Real.exponent>
    //*  14   29:ldc1            #32  <Int 0x4000003e>
    //*  15   31:icmple          36
        {
            return false;
    //   16   34:iconst_0        
    //   17   35:ireturn         
        } else
        {
            int i = 0x4000003e - exponent;
    //   18   36:ldc1            #32  <Int 0x4000003e>
    //   19   38:aload_0         
    //   20   39:getfield        #3   <Field int Real.exponent>
    //   21   42:isub            
    //   22   43:istore_1        
            return (mantissa >>> i & 1L) != 0L;
    //   23   44:aload_0         
    //   24   45:getfield        #2   <Field long Real.mantissa>
    //   25   48:iload_1         
    //   26   49:lushr           
    //   27   50:lconst_1        
    //   28   51:land            
    //   29   52:lconst_0        
    //   30   53:lcmp            
    //   31   54:ifeq            61
    //   32   57:iconst_1        
    //   33   58:goto            62
    //   34   61:iconst_0        
    //   35   62:ireturn         
        }
    }

    // Decompiling method: add  Signature: (LReal;)V
    // Max stack: 6, #locals: 7, #params: 2
    // Code length: 637 bytes, Code offset: 9890
    // Parameter  0 added: Name this Type LReal; At 0 637 Range 0 636 Init 0 fixed
    // Parameter  1 added: Name real Type LReal; At 0 637 Range 0 636 Init 0
    // RetValue   7 added: Name <returnValue> Type V At 0 637 Range 0 636 Init 0 fixed
    // LocalVar   2 added: Name byte0 Type B At 283 76 Range 283 358 Init 283
    // LocalVar   3 added: Name i Type I At 288 55 Range 288 342 Init 288
    // LocalVar   4 added: Name l Type J At 293 198 Range 293 490 Init 293
    // LocalVar   6 added: Name j Type I At 344 182 Range 344 525 Init 344
    // LocalVar   4 added: Name l1 Type J At 492 32 Range 492 523 Init 492
    // LocalVar   4 name l1(J) merged out into l(J)
    public void add(Real real)
    {
        if(exponent < 0 && mantissa != 0L || real.exponent < 0 && real.mantissa != 0L)
    //*   0    0:aload_0         
    //*   1    1:getfield        #3   <Field int Real.exponent>
    //*   2    4:ifge            16
    //*   3    7:aload_0         
    //*   4    8:getfield        #2   <Field long Real.mantissa>
    //*   5   11:lconst_0        
    //*   6   12:lcmp            
    //*   7   13:ifne            32
    //*   8   16:aload_1         
    //*   9   17:getfield        #3   <Field int Real.exponent>
    //*  10   20:ifge            37
    //*  11   23:aload_1         
    //*  12   24:getfield        #2   <Field long Real.mantissa>
    //*  13   27:lconst_0        
    //*  14   28:lcmp            
    //*  15   29:ifeq            37
        {
            makeNan();
    //   16   32:aload_0         
    //   17   33:invokevirtual   #23  <Method void Real.makeNan()>
            return;
    //   18   36:return          
        }
        if(exponent < 0 && mantissa == 0L || real.exponent < 0 && real.mantissa == 0L)
    //*  19   37:aload_0         
    //*  20   38:getfield        #3   <Field int Real.exponent>
    //*  21   41:ifge            53
    //*  22   44:aload_0         
    //*  23   45:getfield        #2   <Field long Real.mantissa>
    //*  24   48:lconst_0        
    //*  25   49:lcmp            
    //*  26   50:ifeq            69
    //*  27   53:aload_1         
    //*  28   54:getfield        #3   <Field int Real.exponent>
    //*  29   57:ifge            151
    //*  30   60:aload_1         
    //*  31   61:getfield        #2   <Field long Real.mantissa>
    //*  32   64:lconst_0        
    //*  33   65:lcmp            
    //*  34   66:ifne            151
        {
            if(exponent < 0 && mantissa == 0L && real.exponent < 0 && real.mantissa == 0L && sign != real.sign)
    //*  35   69:aload_0         
    //*  36   70:getfield        #3   <Field int Real.exponent>
    //*  37   73:ifge            119
    //*  38   76:aload_0         
    //*  39   77:getfield        #2   <Field long Real.mantissa>
    //*  40   80:lconst_0        
    //*  41   81:lcmp            
    //*  42   82:ifne            119
    //*  43   85:aload_1         
    //*  44   86:getfield        #3   <Field int Real.exponent>
    //*  45   89:ifge            119
    //*  46   92:aload_1         
    //*  47   93:getfield        #2   <Field long Real.mantissa>
    //*  48   96:lconst_0        
    //*  49   97:lcmp            
    //*  50   98:ifne            119
    //*  51  101:aload_0         
    //*  52  102:getfield        #4   <Field byte Real.sign>
    //*  53  105:aload_1         
    //*  54  106:getfield        #4   <Field byte Real.sign>
    //*  55  109:icmpeq          119
                makeNan();
    //   56  112:aload_0         
    //   57  113:invokevirtual   #23  <Method void Real.makeNan()>
            else
    //*  58  116:goto            150
                makeInfinity(exponent >= 0 || mantissa != 0L ? ((int) (real.sign)) : ((int) (sign)));
    //   59  119:aload_0         
    //   60  120:aload_0         
    //   61  121:getfield        #3   <Field int Real.exponent>
    //   62  124:ifge            143
    //   63  127:aload_0         
    //   64  128:getfield        #2   <Field long Real.mantissa>
    //   65  131:lconst_0        
    //   66  132:lcmp            
    //   67  133:ifne            143
    //   68  136:aload_0         
    //   69  137:getfield        #4   <Field byte Real.sign>
    //   70  140:goto            147
    //   71  143:aload_1         
    //   72  144:getfield        #4   <Field byte Real.sign>
    //   73  147:invokevirtual   #22  <Method void Real.makeInfinity(int)>
            return;
    //   74  150:return          
        }
        if(exponent == 0 && mantissa == 0L || real.exponent == 0 && real.mantissa == 0L)
    //*  75  151:aload_0         
    //*  76  152:getfield        #3   <Field int Real.exponent>
    //*  77  155:ifne            167
    //*  78  158:aload_0         
    //*  79  159:getfield        #2   <Field long Real.mantissa>
    //*  80  162:lconst_0        
    //*  81  163:lcmp            
    //*  82  164:ifeq            183
    //*  83  167:aload_1         
    //*  84  168:getfield        #3   <Field int Real.exponent>
    //*  85  171:ifne            245
    //*  86  174:aload_1         
    //*  87  175:getfield        #2   <Field long Real.mantissa>
    //*  88  178:lconst_0        
    //*  89  179:lcmp            
    //*  90  180:ifne            245
        {
            if(exponent == 0 && mantissa == 0L)
    //*  91  183:aload_0         
    //*  92  184:getfield        #3   <Field int Real.exponent>
    //*  93  187:ifne            223
    //*  94  190:aload_0         
    //*  95  191:getfield        #2   <Field long Real.mantissa>
    //*  96  194:lconst_0        
    //*  97  195:lcmp            
    //*  98  196:ifne            223
            {
                mantissa = real.mantissa;
    //   99  199:aload_0         
    //  100  200:aload_1         
    //  101  201:getfield        #2   <Field long Real.mantissa>
    //  102  204:putfield        #2   <Field long Real.mantissa>
                exponent = real.exponent;
    //  103  207:aload_0         
    //  104  208:aload_1         
    //  105  209:getfield        #3   <Field int Real.exponent>
    //  106  212:putfield        #3   <Field int Real.exponent>
                sign = real.sign;
    //  107  215:aload_0         
    //  108  216:aload_1         
    //  109  217:getfield        #4   <Field byte Real.sign>
    //  110  220:putfield        #4   <Field byte Real.sign>
            }
            if(exponent == 0 && mantissa == 0L)
    //* 111  223:aload_0         
    //* 112  224:getfield        #3   <Field int Real.exponent>
    //* 113  227:ifne            244
    //* 114  230:aload_0         
    //* 115  231:getfield        #2   <Field long Real.mantissa>
    //* 116  234:lconst_0        
    //* 117  235:lcmp            
    //* 118  236:ifne            244
                sign = 0;
    //  119  239:aload_0         
    //  120  240:iconst_0        
    //  121  241:putfield        #4   <Field byte Real.sign>
            return;
    //  122  244:return          
        }
        byte byte0;
        int i;
        long l;
        if(exponent > real.exponent || exponent == real.exponent && mantissa >= real.mantissa)
    //* 123  245:aload_0         
    //* 124  246:getfield        #3   <Field int Real.exponent>
    //* 125  249:aload_1         
    //* 126  250:getfield        #3   <Field int Real.exponent>
    //* 127  253:icmpgt          279
    //* 128  256:aload_0         
    //* 129  257:getfield        #3   <Field int Real.exponent>
    //* 130  260:aload_1         
    //* 131  261:getfield        #3   <Field int Real.exponent>
    //* 132  264:icmpne          298
    //* 133  267:aload_0         
    //* 134  268:getfield        #2   <Field long Real.mantissa>
    //* 135  271:aload_1         
    //* 136  272:getfield        #2   <Field long Real.mantissa>
    //* 137  275:lcmp            
    //* 138  276:iflt            298
        {
            byte0 = real.sign;
    //  139  279:aload_1         
    //  140  280:getfield        #4   <Field byte Real.sign>
    //  141  283:istore_2        
            i = real.exponent;
    //  142  284:aload_1         
    //  143  285:getfield        #3   <Field int Real.exponent>
    //  144  288:istore_3        
            l = real.mantissa;
    //  145  289:aload_1         
    //  146  290:getfield        #2   <Field long Real.mantissa>
    //  147  293:lstore          4
        } else
    //* 148  295:goto            338
        {
            byte0 = sign;
    //  149  298:aload_0         
    //  150  299:getfield        #4   <Field byte Real.sign>
    //  151  302:istore_2        
            i = exponent;
    //  152  303:aload_0         
    //  153  304:getfield        #3   <Field int Real.exponent>
    //  154  307:istore_3        
            l = mantissa;
    //  155  308:aload_0         
    //  156  309:getfield        #2   <Field long Real.mantissa>
    //  157  312:lstore          4
            sign = real.sign;
    //  158  314:aload_0         
    //  159  315:aload_1         
    //  160  316:getfield        #4   <Field byte Real.sign>
    //  161  319:putfield        #4   <Field byte Real.sign>
            exponent = real.exponent;
    //  162  322:aload_0         
    //  163  323:aload_1         
    //  164  324:getfield        #3   <Field int Real.exponent>
    //  165  327:putfield        #3   <Field int Real.exponent>
            mantissa = real.mantissa;
    //  166  330:aload_0         
    //  167  331:aload_1         
    //  168  332:getfield        #2   <Field long Real.mantissa>
    //  169  335:putfield        #2   <Field long Real.mantissa>
        }
        int j = exponent - i;
    //  170  338:aload_0         
    //  171  339:getfield        #3   <Field int Real.exponent>
    //  172  342:iload_3         
    //  173  343:isub            
    //  174  344:istore          6
        if(j >= 64)
    //* 175  346:iload           6
    //* 176  348:bipush          64
    //* 177  350:icmplt          354
            return;
    //  178  353:return          
        if(sign == byte0)
    //* 179  354:aload_0         
    //* 180  355:getfield        #4   <Field byte Real.sign>
    //* 181  358:iload_2         
    //* 182  359:icmpne          461
        {
            mantissa += l >>> j;
    //  183  362:aload_0         
    //  184  363:dup             
    //  185  364:getfield        #2   <Field long Real.mantissa>
    //  186  367:lload           4
    //  187  369:iload           6
    //  188  371:lushr           
    //  189  372:ladd            
    //  190  373:putfield        #2   <Field long Real.mantissa>
            if(mantissa >= 0L && j > 0 && (l >>> j - 1 & 1L) != 0L)
    //* 191  376:aload_0         
    //* 192  377:getfield        #2   <Field long Real.mantissa>
    //* 193  380:lconst_0        
    //* 194  381:lcmp            
    //* 195  382:iflt            414
    //* 196  385:iload           6
    //* 197  387:ifle            414
    //* 198  390:lload           4
    //* 199  392:iload           6
    //* 200  394:iconst_1        
    //* 201  395:isub            
    //* 202  396:lushr           
    //* 203  397:lconst_1        
    //* 204  398:land            
    //* 205  399:lconst_0        
    //* 206  400:lcmp            
    //* 207  401:ifeq            414
                mantissa++;
    //  208  404:aload_0         
    //  209  405:dup             
    //  210  406:getfield        #2   <Field long Real.mantissa>
    //  211  409:lconst_1        
    //  212  410:ladd            
    //  213  411:putfield        #2   <Field long Real.mantissa>
            if(mantissa < 0L)
    //* 214  414:aload_0         
    //* 215  415:getfield        #2   <Field long Real.mantissa>
    //* 216  418:lconst_0        
    //* 217  419:lcmp            
    //* 218  420:ifge            615
            {
                mantissa = mantissa + 1L >>> 1;
    //  219  423:aload_0         
    //  220  424:aload_0         
    //  221  425:getfield        #2   <Field long Real.mantissa>
    //  222  428:lconst_1        
    //  223  429:ladd            
    //  224  430:iconst_1        
    //  225  431:lushr           
    //  226  432:putfield        #2   <Field long Real.mantissa>
                exponent++;
    //  227  435:aload_0         
    //  228  436:dup             
    //  229  437:getfield        #3   <Field int Real.exponent>
    //  230  440:iconst_1        
    //  231  441:iadd            
    //  232  442:putfield        #3   <Field int Real.exponent>
                if(exponent < 0)
    //* 233  445:aload_0         
    //* 234  446:getfield        #3   <Field int Real.exponent>
    //* 235  449:ifge            615
                {
                    makeInfinity(sign);
    //  236  452:aload_0         
    //  237  453:aload_0         
    //  238  454:getfield        #4   <Field byte Real.sign>
    //  239  457:invokevirtual   #22  <Method void Real.makeInfinity(int)>
                    return;
    //  240  460:return          
                }
            }
        } else
        {
            if(j > 0)
    //* 241  461:iload           6
    //* 242  463:ifle            489
            {
                mantissa <<= 1;
    //  243  466:aload_0         
    //  244  467:dup             
    //  245  468:getfield        #2   <Field long Real.mantissa>
    //  246  471:iconst_1        
    //  247  472:lshl            
    //  248  473:putfield        #2   <Field long Real.mantissa>
                exponent--;
    //  249  476:aload_0         
    //  250  477:dup             
    //  251  478:getfield        #3   <Field int Real.exponent>
    //  252  481:iconst_1        
    //  253  482:isub            
    //  254  483:putfield        #3   <Field int Real.exponent>
                j--;
    //  255  486:iinc            6  -1
            }
            l = -l;
    //  256  489:lload           4
    //  257  491:lneg            
    //  258  492:lstore          4
            mantissa += l >> j;
    //  259  494:aload_0         
    //  260  495:dup             
    //  261  496:getfield        #2   <Field long Real.mantissa>
    //  262  499:lload           4
    //  263  501:iload           6
    //  264  503:lshr            
    //  265  504:ladd            
    //  266  505:putfield        #2   <Field long Real.mantissa>
            if(mantissa >= 0L && j > 0 && (l >>> j - 1 & 1L) != 0L)
    //* 267  508:aload_0         
    //* 268  509:getfield        #2   <Field long Real.mantissa>
    //* 269  512:lconst_0        
    //* 270  513:lcmp            
    //* 271  514:iflt            546
    //* 272  517:iload           6
    //* 273  519:ifle            546
    //* 274  522:lload           4
    //* 275  524:iload           6
    //* 276  526:iconst_1        
    //* 277  527:isub            
    //* 278  528:lushr           
    //* 279  529:lconst_1        
    //* 280  530:land            
    //* 281  531:lconst_0        
    //* 282  532:lcmp            
    //* 283  533:ifeq            546
                mantissa++;
    //  284  536:aload_0         
    //  285  537:dup             
    //  286  538:getfield        #2   <Field long Real.mantissa>
    //  287  541:lconst_1        
    //  288  542:ladd            
    //  289  543:putfield        #2   <Field long Real.mantissa>
            if(mantissa < 0L)
    //* 290  546:aload_0         
    //* 291  547:getfield        #2   <Field long Real.mantissa>
    //* 292  550:lconst_0        
    //* 293  551:lcmp            
    //* 294  552:ifge            580
            {
                mantissa = mantissa + 1L >>> 1;
    //  295  555:aload_0         
    //  296  556:aload_0         
    //  297  557:getfield        #2   <Field long Real.mantissa>
    //  298  560:lconst_1        
    //  299  561:ladd            
    //  300  562:iconst_1        
    //  301  563:lushr           
    //  302  564:putfield        #2   <Field long Real.mantissa>
                exponent++;
    //  303  567:aload_0         
    //  304  568:dup             
    //  305  569:getfield        #3   <Field int Real.exponent>
    //  306  572:iconst_1        
    //  307  573:iadd            
    //  308  574:putfield        #3   <Field int Real.exponent>
            } else
    //* 309  577:goto            615
            {
                if(magicRounding && mantissa >= 0L && mantissa <= 7L)
    //* 310  580:getstatic       #40  <Field boolean Real.magicRounding>
    //* 311  583:ifeq            611
    //* 312  586:aload_0         
    //* 313  587:getfield        #2   <Field long Real.mantissa>
    //* 314  590:lconst_0        
    //* 315  591:lcmp            
    //* 316  592:iflt            611
    //* 317  595:aload_0         
    //* 318  596:getfield        #2   <Field long Real.mantissa>
    //* 319  599:ldc2w           #41  <Long 7L>
    //* 320  602:lcmp            
    //* 321  603:ifgt            611
                    mantissa = 0L;
    //  322  606:aload_0         
    //  323  607:lconst_0        
    //  324  608:putfield        #2   <Field long Real.mantissa>
                normalize();
    //  325  611:aload_0         
    //  326  612:invokevirtual   #18  <Method void Real.normalize()>
            }
        }
        if(exponent == 0 && mantissa == 0L)
    //* 327  615:aload_0         
    //* 328  616:getfield        #3   <Field int Real.exponent>
    //* 329  619:ifne            636
    //* 330  622:aload_0         
    //* 331  623:getfield        #2   <Field long Real.mantissa>
    //* 332  626:lconst_0        
    //* 333  627:lcmp            
    //* 334  628:ifne            636
            sign = 0;
    //  335  631:aload_0         
    //  336  632:iconst_0        
    //  337  633:putfield        #4   <Field byte Real.sign>
        /* return; */
    //  338  636:return          
    }

    // Decompiling method: add128  Signature: (JLReal;J)J
    // Max stack: 6, #locals: 13, #params: 6
    // Code length: 599 bytes, Code offset: 10931
    // Parameter  0 added: Name this Type LReal; At 0 599 Range 0 598 Init 0 fixed
    // Parameter  1 added: Name l Type J At 0 599 Range 0 598 Init 0
    // Parameter  3 added: Name real Type LReal; At 0 599 Range 0 598 Init 0
    // Parameter  4 added: Name l1 Type J At 0 599 Range 0 598 Init 0
    // RetValue  13 added: Name <returnValue> Type J At 0 599 Range 0 598 Init 0 fixed
    // LocalVar   6 added: Name byte0 Type B At 323 154 Range 323 476 Init 323
    // LocalVar   7 added: Name i Type I At 329 69 Range 329 397 Init 329
    // LocalVar   8 added: Name l2 Type J At 335 202 Range 335 536 Init 335
    // LocalVar  10 added: Name l3 Type J At 339 128 Range 339 466 Init 339
    // LocalVar  12 added: Name j Type I At 399 59 Range 399 457 Init 399
    // LocalVar  10 added: Name l4 Type J At 469 46 Range 469 514 Init 469
    // LocalVar  10 name l4(J) merged out into l3(J)
    public long add128(long l, Real real, long l1)
    {
        if(exponent < 0 && mantissa != 0L || real.exponent < 0 && real.mantissa != 0L)
    //*   0    0:aload_0         
    //*   1    1:getfield        #3   <Field int Real.exponent>
    //*   2    4:ifge            16
    //*   3    7:aload_0         
    //*   4    8:getfield        #2   <Field long Real.mantissa>
    //*   5   11:lconst_0        
    //*   6   12:lcmp            
    //*   7   13:ifne            32
    //*   8   16:aload_3         
    //*   9   17:getfield        #3   <Field int Real.exponent>
    //*  10   20:ifge            38
    //*  11   23:aload_3         
    //*  12   24:getfield        #2   <Field long Real.mantissa>
    //*  13   27:lconst_0        
    //*  14   28:lcmp            
    //*  15   29:ifeq            38
        {
            makeNan();
    //   16   32:aload_0         
    //   17   33:invokevirtual   #23  <Method void Real.makeNan()>
            return 0L;
    //   18   36:lconst_0        
    //   19   37:lreturn         
        }
        if(exponent < 0 && mantissa == 0L || real.exponent < 0 && real.mantissa == 0L)
    //*  20   38:aload_0         
    //*  21   39:getfield        #3   <Field int Real.exponent>
    //*  22   42:ifge            54
    //*  23   45:aload_0         
    //*  24   46:getfield        #2   <Field long Real.mantissa>
    //*  25   49:lconst_0        
    //*  26   50:lcmp            
    //*  27   51:ifeq            70
    //*  28   54:aload_3         
    //*  29   55:getfield        #3   <Field int Real.exponent>
    //*  30   58:ifge            153
    //*  31   61:aload_3         
    //*  32   62:getfield        #2   <Field long Real.mantissa>
    //*  33   65:lconst_0        
    //*  34   66:lcmp            
    //*  35   67:ifne            153
        {
            if(exponent < 0 && mantissa == 0L && real.exponent < 0 && real.mantissa == 0L && sign != real.sign)
    //*  36   70:aload_0         
    //*  37   71:getfield        #3   <Field int Real.exponent>
    //*  38   74:ifge            120
    //*  39   77:aload_0         
    //*  40   78:getfield        #2   <Field long Real.mantissa>
    //*  41   81:lconst_0        
    //*  42   82:lcmp            
    //*  43   83:ifne            120
    //*  44   86:aload_3         
    //*  45   87:getfield        #3   <Field int Real.exponent>
    //*  46   90:ifge            120
    //*  47   93:aload_3         
    //*  48   94:getfield        #2   <Field long Real.mantissa>
    //*  49   97:lconst_0        
    //*  50   98:lcmp            
    //*  51   99:ifne            120
    //*  52  102:aload_0         
    //*  53  103:getfield        #4   <Field byte Real.sign>
    //*  54  106:aload_3         
    //*  55  107:getfield        #4   <Field byte Real.sign>
    //*  56  110:icmpeq          120
                makeNan();
    //   57  113:aload_0         
    //   58  114:invokevirtual   #23  <Method void Real.makeNan()>
            else
    //*  59  117:goto            151
                makeInfinity(exponent >= 0 || mantissa != 0L ? ((int) (real.sign)) : ((int) (sign)));
    //   60  120:aload_0         
    //   61  121:aload_0         
    //   62  122:getfield        #3   <Field int Real.exponent>
    //   63  125:ifge            144
    //   64  128:aload_0         
    //   65  129:getfield        #2   <Field long Real.mantissa>
    //   66  132:lconst_0        
    //   67  133:lcmp            
    //   68  134:ifne            144
    //   69  137:aload_0         
    //   70  138:getfield        #4   <Field byte Real.sign>
    //   71  141:goto            148
    //   72  144:aload_3         
    //   73  145:getfield        #4   <Field byte Real.sign>
    //   74  148:invokevirtual   #22  <Method void Real.makeInfinity(int)>
            return 0L;
    //   75  151:lconst_0        
    //   76  152:lreturn         
        }
        if(exponent == 0 && mantissa == 0L || real.exponent == 0 && real.mantissa == 0L)
    //*  77  153:aload_0         
    //*  78  154:getfield        #3   <Field int Real.exponent>
    //*  79  157:ifne            169
    //*  80  160:aload_0         
    //*  81  161:getfield        #2   <Field long Real.mantissa>
    //*  82  164:lconst_0        
    //*  83  165:lcmp            
    //*  84  166:ifeq            185
    //*  85  169:aload_3         
    //*  86  170:getfield        #3   <Field int Real.exponent>
    //*  87  173:ifne            251
    //*  88  176:aload_3         
    //*  89  177:getfield        #2   <Field long Real.mantissa>
    //*  90  180:lconst_0        
    //*  91  181:lcmp            
    //*  92  182:ifne            251
        {
            if(exponent == 0 && mantissa == 0L)
    //*  93  185:aload_0         
    //*  94  186:getfield        #3   <Field int Real.exponent>
    //*  95  189:ifne            228
    //*  96  192:aload_0         
    //*  97  193:getfield        #2   <Field long Real.mantissa>
    //*  98  196:lconst_0        
    //*  99  197:lcmp            
    //* 100  198:ifne            228
            {
                mantissa = real.mantissa;
    //  101  201:aload_0         
    //  102  202:aload_3         
    //  103  203:getfield        #2   <Field long Real.mantissa>
    //  104  206:putfield        #2   <Field long Real.mantissa>
                exponent = real.exponent;
    //  105  209:aload_0         
    //  106  210:aload_3         
    //  107  211:getfield        #3   <Field int Real.exponent>
    //  108  214:putfield        #3   <Field int Real.exponent>
                sign = real.sign;
    //  109  217:aload_0         
    //  110  218:aload_3         
    //  111  219:getfield        #4   <Field byte Real.sign>
    //  112  222:putfield        #4   <Field byte Real.sign>
                l = l1;
    //  113  225:lload           4
    //  114  227:lstore_1        
            }
            if(exponent == 0 && mantissa == 0L)
    //* 115  228:aload_0         
    //* 116  229:getfield        #3   <Field int Real.exponent>
    //* 117  232:ifne            249
    //* 118  235:aload_0         
    //* 119  236:getfield        #2   <Field long Real.mantissa>
    //* 120  239:lconst_0        
    //* 121  240:lcmp            
    //* 122  241:ifne            249
                sign = 0;
    //  123  244:aload_0         
    //  124  245:iconst_0        
    //  125  246:putfield        #4   <Field byte Real.sign>
            return l;
    //  126  249:lload_1         
    //  127  250:lreturn         
        }
        byte byte0;
        int i;
        long l2;
        long l3;
        if(exponent > real.exponent || exponent == real.exponent && mantissa > real.mantissa || exponent == real.exponent && mantissa == real.mantissa && l >>> 1 >= l1 >>> 1)
    //* 128  251:aload_0         
    //* 129  252:getfield        #3   <Field int Real.exponent>
    //* 130  255:aload_3         
    //* 131  256:getfield        #3   <Field int Real.exponent>
    //* 132  259:icmpgt          319
    //* 133  262:aload_0         
    //* 134  263:getfield        #3   <Field int Real.exponent>
    //* 135  266:aload_3         
    //* 136  267:getfield        #3   <Field int Real.exponent>
    //* 137  270:icmpne          285
    //* 138  273:aload_0         
    //* 139  274:getfield        #2   <Field long Real.mantissa>
    //* 140  277:aload_3         
    //* 141  278:getfield        #2   <Field long Real.mantissa>
    //* 142  281:lcmp            
    //* 143  282:ifgt            319
    //* 144  285:aload_0         
    //* 145  286:getfield        #3   <Field int Real.exponent>
    //* 146  289:aload_3         
    //* 147  290:getfield        #3   <Field int Real.exponent>
    //* 148  293:icmpne          344
    //* 149  296:aload_0         
    //* 150  297:getfield        #2   <Field long Real.mantissa>
    //* 151  300:aload_3         
    //* 152  301:getfield        #2   <Field long Real.mantissa>
    //* 153  304:lcmp            
    //* 154  305:ifne            344
    //* 155  308:lload_1         
    //* 156  309:iconst_1        
    //* 157  310:lushr           
    //* 158  311:lload           4
    //* 159  313:iconst_1        
    //* 160  314:lushr           
    //* 161  315:lcmp            
    //* 162  316:iflt            344
        {
            byte0 = real.sign;
    //  163  319:aload_3         
    //  164  320:getfield        #4   <Field byte Real.sign>
    //  165  323:istore          6
            i = real.exponent;
    //  166  325:aload_3         
    //  167  326:getfield        #3   <Field int Real.exponent>
    //  168  329:istore          7
            l2 = real.mantissa;
    //  169  331:aload_3         
    //  170  332:getfield        #2   <Field long Real.mantissa>
    //  171  335:lstore          8
            l3 = l1;
    //  172  337:lload           4
    //  173  339:lstore          10
        } else
    //* 174  341:goto            392
        {
            byte0 = sign;
    //  175  344:aload_0         
    //  176  345:getfield        #4   <Field byte Real.sign>
    //  177  348:istore          6
            i = exponent;
    //  178  350:aload_0         
    //  179  351:getfield        #3   <Field int Real.exponent>
    //  180  354:istore          7
            l2 = mantissa;
    //  181  356:aload_0         
    //  182  357:getfield        #2   <Field long Real.mantissa>
    //  183  360:lstore          8
            l3 = l;
    //  184  362:lload_1         
    //  185  363:lstore          10
            sign = real.sign;
    //  186  365:aload_0         
    //  187  366:aload_3         
    //  188  367:getfield        #4   <Field byte Real.sign>
    //  189  370:putfield        #4   <Field byte Real.sign>
            exponent = real.exponent;
    //  190  373:aload_0         
    //  191  374:aload_3         
    //  192  375:getfield        #3   <Field int Real.exponent>
    //  193  378:putfield        #3   <Field int Real.exponent>
            mantissa = real.mantissa;
    //  194  381:aload_0         
    //  195  382:aload_3         
    //  196  383:getfield        #2   <Field long Real.mantissa>
    //  197  386:putfield        #2   <Field long Real.mantissa>
            l = l1;
    //  198  389:lload           4
    //  199  391:lstore_1        
        }
        int j = exponent - i;
    //  200  392:aload_0         
    //  201  393:getfield        #3   <Field int Real.exponent>
    //  202  396:iload           7
    //  203  398:isub            
    //  204  399:istore          12
        if(j >= 127)
    //* 205  401:iload           12
    //* 206  403:bipush          127
    //* 207  405:icmplt          410
            return l;
    //  208  408:lload_1         
    //  209  409:lreturn         
        if(j >= 64)
    //* 210  410:iload           12
    //* 211  412:bipush          64
    //* 212  414:icmplt          433
        {
            l3 = l2 >>> j - 64;
    //  213  417:lload           8
    //  214  419:iload           12
    //  215  421:bipush          64
    //  216  423:isub            
    //  217  424:lushr           
    //  218  425:lstore          10
            l2 = 0L;
    //  219  427:lconst_0        
    //  220  428:lstore          8
        } else
    //* 221  430:goto            461
        if(j > 0)
    //* 222  433:iload           12
    //* 223  435:ifle            461
        {
            l3 = (l3 >>> j) + (l2 << 64 - j);
    //  224  438:lload           10
    //  225  440:iload           12
    //  226  442:lushr           
    //  227  443:lload           8
    //  228  445:bipush          64
    //  229  447:iload           12
    //  230  449:isub            
    //  231  450:lshl            
    //  232  451:ladd            
    //  233  452:lstore          10
            l2 >>>= j;
    //  234  454:lload           8
    //  235  456:iload           12
    //  236  458:lushr           
    //  237  459:lstore          8
        }
        l >>>= 1;
    //  238  461:lload_1         
    //  239  462:iconst_1        
    //  240  463:lushr           
    //  241  464:lstore_1        
        l3 >>>= 1;
    //  242  465:lload           10
    //  243  467:iconst_1        
    //  244  468:lushr           
    //  245  469:lstore          10
        if(sign == byte0)
    //* 246  471:aload_0         
    //* 247  472:getfield        #4   <Field byte Real.sign>
    //* 248  475:iload           6
    //* 249  477:icmpne          512
        {
            l += l3;
    //  250  480:lload_1         
    //  251  481:lload           10
    //  252  483:ladd            
    //  253  484:lstore_1        
            mantissa += l >>> 63;
    //  254  485:aload_0         
    //  255  486:dup             
    //  256  487:getfield        #2   <Field long Real.mantissa>
    //  257  490:lload_1         
    //  258  491:bipush          63
    //  259  493:lushr           
    //  260  494:ladd            
    //  261  495:putfield        #2   <Field long Real.mantissa>
            mantissa += l2;
    //  262  498:aload_0         
    //  263  499:dup             
    //  264  500:getfield        #2   <Field long Real.mantissa>
    //  265  503:lload           8
    //  266  505:ladd            
    //  267  506:putfield        #2   <Field long Real.mantissa>
        } else
    //* 268  509:goto            566
        {
            l -= l3;
    //  269  512:lload_1         
    //  270  513:lload           10
    //  271  515:lsub            
    //  272  516:lstore_1        
            mantissa -= l >>> 63;
    //  273  517:aload_0         
    //  274  518:dup             
    //  275  519:getfield        #2   <Field long Real.mantissa>
    //  276  522:lload_1         
    //  277  523:bipush          63
    //  278  525:lushr           
    //  279  526:lsub            
    //  280  527:putfield        #2   <Field long Real.mantissa>
            mantissa -= l2;
    //  281  530:aload_0         
    //  282  531:dup             
    //  283  532:getfield        #2   <Field long Real.mantissa>
    //  284  535:lload           8
    //  285  537:lsub            
    //  286  538:putfield        #2   <Field long Real.mantissa>
            if(mantissa == 0L && l >= 0L && l <= 31L)
    //* 287  541:aload_0         
    //* 288  542:getfield        #2   <Field long Real.mantissa>
    //* 289  545:lconst_0        
    //* 290  546:lcmp            
    //* 291  547:ifne            566
    //* 292  550:lload_1         
    //* 293  551:lconst_0        
    //* 294  552:lcmp            
    //* 295  553:iflt            566
    //* 296  556:lload_1         
    //* 297  557:ldc2w           #43  <Long 31L>
    //* 298  560:lcmp            
    //* 299  561:ifgt            566
                l = 0L;
    //  300  564:lconst_0        
    //  301  565:lstore_1        
        }
        l <<= 1;
    //  302  566:lload_1         
    //  303  567:iconst_1        
    //  304  568:lshl            
    //  305  569:lstore_1        
        l = normalize128(l);
    //  306  570:aload_0         
    //  307  571:lload_1         
    //  308  572:invokevirtual   #45  <Method long Real.normalize128(long)>
    //  309  575:lstore_1        
        if(exponent == 0 && mantissa == 0L)
    //* 310  576:aload_0         
    //* 311  577:getfield        #3   <Field int Real.exponent>
    //* 312  580:ifne            597
    //* 313  583:aload_0         
    //* 314  584:getfield        #2   <Field long Real.mantissa>
    //* 315  587:lconst_0        
    //* 316  588:lcmp            
    //* 317  589:ifne            597
            sign = 0;
    //  318  592:aload_0         
    //  319  593:iconst_0        
    //  320  594:putfield        #4   <Field byte Real.sign>
        return l;
    //  321  597:lload_1         
    //  322  598:lreturn         
    }

    // Decompiling method: sub  Signature: (LReal;)V
    // Max stack: 3, #locals: 2, #params: 2
    // Code length: 41 bytes, Code offset: 11955
    // Parameter  0 added: Name this Type LReal; At 0 41 Range 0 40 Init 0 fixed
    // Parameter  1 added: Name real Type LReal; At 0 41 Range 0 40 Init 0
    // RetValue   2 added: Name <returnValue> Type V At 0 41 Range 0 40 Init 0 fixed
    public void sub(Real real)
    {
        tmp0.mantissa = real.mantissa;
    //    0    0:getstatic       #46  <Field Real Real.tmp0>
    //    1    3:aload_1         
    //    2    4:getfield        #2   <Field long Real.mantissa>
    //    3    7:putfield        #2   <Field long Real.mantissa>
        tmp0.exponent = real.exponent;
    //    4   10:getstatic       #46  <Field Real Real.tmp0>
    //    5   13:aload_1         
    //    6   14:getfield        #3   <Field int Real.exponent>
    //    7   17:putfield        #3   <Field int Real.exponent>
        tmp0.sign = (byte)(real.sign ^ 1);
    //    8   20:getstatic       #46  <Field Real Real.tmp0>
    //    9   23:aload_1         
    //   10   24:getfield        #4   <Field byte Real.sign>
    //   11   27:iconst_1        
    //   12   28:ixor            
    //   13   29:int2byte        
    //   14   30:putfield        #4   <Field byte Real.sign>
        add(tmp0);
    //   15   33:aload_0         
    //   16   34:getstatic       #46  <Field Real Real.tmp0>
    //   17   37:invokevirtual   #47  <Method void Real.add(Real)>
        /* return; */
    //   18   40:return          
    }

    // Decompiling method: mul  Signature: (I)V
    // Max stack: 7, #locals: 10, #params: 2
    // Code length: 302 bytes, Code offset: 12022
    // Parameter  0 added: Name this Type LReal; At 0 302 Range 0 301 Init 0 fixed
    // Parameter  1 added: Name i Type I At 0 302 Range 0 301 Init 0
    // RetValue  10 added: Name <returnValue> Type V At 0 302 Range 0 301 Init 0 fixed
    // LocalVar   2 added: Name j Type I At 105 3 Range 105 107 Init 105
    // LocalVar   2 added: Name k Type I At 111 3 Range 111 113 Init 111
    // LocalVar   2 added: Name l Type I At 117 3 Range 117 119 Init 117
    // LocalVar   2 added: Name i1 Type I At 123 3 Range 123 125 Init 123
    // LocalVar   2 added: Name j1 Type I At 130 3 Range 130 132 Init 130
    // LocalVar   2 added: Name k1 Type I At 137 5 Range 137 141 Init 137
    // LocalVar   2 added: Name byte0 Type B At 149 16 Range 149 164 Init 149
    // LocalVar   3 added: Name l1 Type J At 191 50 Range 191 240 Init 191
    // LocalVar   5 added: Name l2 Type J At 199 13 Range 199 211 Init 199
    // LocalVar   7 added: Name l3 Type J At 207 36 Range 207 242 Init 207
    // LocalVar   9 added: Name i2 Type I At 233 13 Range 233 245 Init 233
    // LocalVar   2 name k(I) merged out into j(I)
    // LocalVar   2 name l(I) merged out into j(I)
    // LocalVar   2 name i1(I) merged out into j(I)
    // LocalVar   2 name j1(I) merged out into j(I)
    // LocalVar   2 name k1(I) merged out into j(I)
    // LocalVar   2 name byte0(B) merged out into j(I)
    public void mul(int i)
    {
        if(exponent < 0 && mantissa != 0L)
    //*   0    0:aload_0         
    //*   1    1:getfield        #3   <Field int Real.exponent>
    //*   2    4:ifge            17
    //*   3    7:aload_0         
    //*   4    8:getfield        #2   <Field long Real.mantissa>
    //*   5   11:lconst_0        
    //*   6   12:lcmp            
    //*   7   13:ifeq            17
            return;
    //    8   16:return          
        if(i < 0)
    //*   9   17:iload_1         
    //*  10   18:ifge            35
        {
            sign ^= 1;
    //   11   21:aload_0         
    //   12   22:dup             
    //   13   23:getfield        #4   <Field byte Real.sign>
    //   14   26:iconst_1        
    //   15   27:ixor            
    //   16   28:int2byte        
    //   17   29:putfield        #4   <Field byte Real.sign>
            i = -i;
    //   18   32:iload_1         
    //   19   33:ineg            
    //   20   34:istore_1        
        }
        if(exponent == 0 && mantissa == 0L || i == 0)
    //*  21   35:aload_0         
    //*  22   36:getfield        #3   <Field int Real.exponent>
    //*  23   39:ifne            51
    //*  24   42:aload_0         
    //*  25   43:getfield        #2   <Field long Real.mantissa>
    //*  26   46:lconst_0        
    //*  27   47:lcmp            
    //*  28   48:ifeq            55
    //*  29   51:iload_1         
    //*  30   52:ifne            87
        {
            if(exponent < 0 && mantissa == 0L)
    //*  31   55:aload_0         
    //*  32   56:getfield        #3   <Field int Real.exponent>
    //*  33   59:ifge            78
    //*  34   62:aload_0         
    //*  35   63:getfield        #2   <Field long Real.mantissa>
    //*  36   66:lconst_0        
    //*  37   67:lcmp            
    //*  38   68:ifne            78
                makeNan();
    //   39   71:aload_0         
    //   40   72:invokevirtual   #23  <Method void Real.makeNan()>
            else
    //*  41   75:goto            86
                makeZero(sign);
    //   42   78:aload_0         
    //   43   79:aload_0         
    //   44   80:getfield        #4   <Field byte Real.sign>
    //   45   83:invokevirtual   #25  <Method void Real.makeZero(int)>
            return;
    //   46   86:return          
        }
        if(exponent < 0 && mantissa == 0L)
    //*  47   87:aload_0         
    //*  48   88:getfield        #3   <Field int Real.exponent>
    //*  49   91:ifge            104
    //*  50   94:aload_0         
    //*  51   95:getfield        #2   <Field long Real.mantissa>
    //*  52   98:lconst_0        
    //*  53   99:lcmp            
    //*  54  100:ifne            104
            return;
    //   55  103:return          
        int j = i;
    //   56  104:iload_1         
    //   57  105:istore_2        
        j |= j >> 1;
    //   58  106:iload_2         
    //   59  107:iload_2         
    //   60  108:iconst_1        
    //   61  109:ishr            
    //   62  110:ior             
    //   63  111:istore_2        
        j |= j >> 2;
    //   64  112:iload_2         
    //   65  113:iload_2         
    //   66  114:iconst_2        
    //   67  115:ishr            
    //   68  116:ior             
    //   69  117:istore_2        
        j |= j >> 4;
    //   70  118:iload_2         
    //   71  119:iload_2         
    //   72  120:iconst_4        
    //   73  121:ishr            
    //   74  122:ior             
    //   75  123:istore_2        
        j |= j >> 8;
    //   76  124:iload_2         
    //   77  125:iload_2         
    //   78  126:bipush          8
    //   79  128:ishr            
    //   80  129:ior             
    //   81  130:istore_2        
        j |= j >> 16;
    //   82  131:iload_2         
    //   83  132:iload_2         
    //   84  133:bipush          16
    //   85  135:ishr            
    //   86  136:ior             
    //   87  137:istore_2        
        j = clz_tab[j * 0x7c4acdd >>> 27];
    //   88  138:getstatic       #9   <Field byte[] Real.clz_tab>
    //   89  141:iload_2         
    //   90  142:ldc1            #10  <Int 0x7c4acdd>
    //   91  144:imul            
    //   92  145:bipush          27
    //   93  147:iushr           
    //   94  148:baload          
    //   95  149:istore_2        
        exponent += 31 - j;
    //   96  150:aload_0         
    //   97  151:dup             
    //   98  152:getfield        #3   <Field int Real.exponent>
    //   99  155:bipush          31
    //  100  157:iload_2         
    //  101  158:isub            
    //  102  159:iadd            
    //  103  160:putfield        #3   <Field int Real.exponent>
        i <<= j;
    //  104  163:iload_1         
    //  105  164:iload_2         
    //  106  165:ishl            
    //  107  166:istore_1        
        if(exponent < 0)
    //* 108  167:aload_0         
    //* 109  168:getfield        #3   <Field int Real.exponent>
    //* 110  171:ifge            183
        {
            makeInfinity(sign);
    //  111  174:aload_0         
    //  112  175:aload_0         
    //  113  176:getfield        #4   <Field byte Real.sign>
    //  114  179:invokevirtual   #22  <Method void Real.makeInfinity(int)>
            return;
    //  115  182:return          
        }
        long l = mantissa & 0x7fffffffL;
    //  116  183:aload_0         
    //  117  184:getfield        #2   <Field long Real.mantissa>
    //  118  187:ldc2w           #48  <Long 0x7fffffffL>
    //  119  190:land            
    //  120  191:lstore_3        
        long l1 = mantissa >>> 31;
    //  121  192:aload_0         
    //  122  193:getfield        #2   <Field long Real.mantissa>
    //  123  196:bipush          31
    //  124  198:lushr           
    //  125  199:lstore          5
        long l2 = (long)i & 0xffffffffL;
    //  126  201:iload_1         
    //  127  202:i2l             
    //  128  203:ldc2w           #50  <Long 0xffffffffL>
    //  129  206:land            
    //  130  207:lstore          7
        mantissa = l1 * l2;
    //  131  209:aload_0         
    //  132  210:lload           5
    //  133  212:lload           7
    //  134  214:lmul            
    //  135  215:putfield        #2   <Field long Real.mantissa>
        int k = mantissa >= 0L ? 0x40000000 : 0;
    //  136  218:aload_0         
    //  137  219:getfield        #2   <Field long Real.mantissa>
    //  138  222:lconst_0        
    //  139  223:lcmp            
    //  140  224:ifge            231
    //  141  227:iconst_0        
    //  142  228:goto            233
    //  143  231:ldc1            #30  <Int 0x40000000>
    //  144  233:istore          9
        mantissa += l * l2 + (long)k >>> 31;
    //  145  235:aload_0         
    //  146  236:dup             
    //  147  237:getfield        #2   <Field long Real.mantissa>
    //  148  240:lload_3         
    //  149  241:lload           7
    //  150  243:lmul            
    //  151  244:iload           9
    //  152  246:i2l             
    //  153  247:ladd            
    //  154  248:bipush          31
    //  155  250:lushr           
    //  156  251:ladd            
    //  157  252:putfield        #2   <Field long Real.mantissa>
        if(mantissa < 0L)
    //* 158  255:aload_0         
    //* 159  256:getfield        #2   <Field long Real.mantissa>
    //* 160  259:lconst_0        
    //* 161  260:lcmp            
    //* 162  261:ifge            301
        {
            mantissa = mantissa + 1L >>> 1;
    //  163  264:aload_0         
    //  164  265:aload_0         
    //  165  266:getfield        #2   <Field long Real.mantissa>
    //  166  269:lconst_1        
    //  167  270:ladd            
    //  168  271:iconst_1        
    //  169  272:lushr           
    //  170  273:putfield        #2   <Field long Real.mantissa>
            exponent++;
    //  171  276:aload_0         
    //  172  277:dup             
    //  173  278:getfield        #3   <Field int Real.exponent>
    //  174  281:iconst_1        
    //  175  282:iadd            
    //  176  283:putfield        #3   <Field int Real.exponent>
            if(exponent < 0)
    //* 177  286:aload_0         
    //* 178  287:getfield        #3   <Field int Real.exponent>
    //* 179  290:ifge            301
                makeInfinity(sign);
    //  180  293:aload_0         
    //  181  294:aload_0         
    //  182  295:getfield        #4   <Field byte Real.sign>
    //  183  298:invokevirtual   #22  <Method void Real.makeInfinity(int)>
        }
        /* return; */
    //  184  301:return          
    }

    // Decompiling method: mul  Signature: (LReal;)V
    // Max stack: 9, #locals: 12, #params: 2
    // Code length: 397 bytes, Code offset: 12493
    // Parameter  0 added: Name this Type LReal; At 0 397 Range 0 396 Init 0 fixed
    // Parameter  1 added: Name real Type LReal; At 0 397 Range 0 396 Init 0
    // RetValue  12 added: Name <returnValue> Type V At 0 397 Range 0 396 Init 0 fixed
    // LocalVar   2 added: Name l Type J At 180 71 Range 180 250 Init 180
    // LocalVar   4 added: Name l1 Type J At 188 58 Range 188 245 Init 188
    // LocalVar   6 added: Name l2 Type J At 198 55 Range 198 252 Init 198
    // LocalVar   8 added: Name l3 Type J At 207 36 Range 207 242 Init 207
    // LocalVar  10 added: Name i Type I At 233 27 Range 233 259 Init 233
    // LocalVar  11 added: Name j Type I At 273 52 Range 273 324 Init 273
    public void mul(Real real)
    {
        if(exponent < 0 && mantissa != 0L || real.exponent < 0 && real.mantissa != 0L)
    //*   0    0:aload_0         
    //*   1    1:getfield        #3   <Field int Real.exponent>
    //*   2    4:ifge            16
    //*   3    7:aload_0         
    //*   4    8:getfield        #2   <Field long Real.mantissa>
    //*   5   11:lconst_0        
    //*   6   12:lcmp            
    //*   7   13:ifne            32
    //*   8   16:aload_1         
    //*   9   17:getfield        #3   <Field int Real.exponent>
    //*  10   20:ifge            37
    //*  11   23:aload_1         
    //*  12   24:getfield        #2   <Field long Real.mantissa>
    //*  13   27:lconst_0        
    //*  14   28:lcmp            
    //*  15   29:ifeq            37
        {
            makeNan();
    //   16   32:aload_0         
    //   17   33:invokevirtual   #23  <Method void Real.makeNan()>
            return;
    //   18   36:return          
        }
        sign ^= real.sign;
    //   19   37:aload_0         
    //   20   38:dup             
    //   21   39:getfield        #4   <Field byte Real.sign>
    //   22   42:aload_1         
    //   23   43:getfield        #4   <Field byte Real.sign>
    //   24   46:ixor            
    //   25   47:int2byte        
    //   26   48:putfield        #4   <Field byte Real.sign>
        if(exponent == 0 && mantissa == 0L || real.exponent == 0 && real.mantissa == 0L)
    //*  27   51:aload_0         
    //*  28   52:getfield        #3   <Field int Real.exponent>
    //*  29   55:ifne            67
    //*  30   58:aload_0         
    //*  31   59:getfield        #2   <Field long Real.mantissa>
    //*  32   62:lconst_0        
    //*  33   63:lcmp            
    //*  34   64:ifeq            83
    //*  35   67:aload_1         
    //*  36   68:getfield        #3   <Field int Real.exponent>
    //*  37   71:ifne            131
    //*  38   74:aload_1         
    //*  39   75:getfield        #2   <Field long Real.mantissa>
    //*  40   78:lconst_0        
    //*  41   79:lcmp            
    //*  42   80:ifne            131
        {
            if(exponent < 0 && mantissa == 0L || real.exponent < 0 && real.mantissa == 0L)
    //*  43   83:aload_0         
    //*  44   84:getfield        #3   <Field int Real.exponent>
    //*  45   87:ifge            99
    //*  46   90:aload_0         
    //*  47   91:getfield        #2   <Field long Real.mantissa>
    //*  48   94:lconst_0        
    //*  49   95:lcmp            
    //*  50   96:ifeq            115
    //*  51   99:aload_1         
    //*  52  100:getfield        #3   <Field int Real.exponent>
    //*  53  103:ifge            122
    //*  54  106:aload_1         
    //*  55  107:getfield        #2   <Field long Real.mantissa>
    //*  56  110:lconst_0        
    //*  57  111:lcmp            
    //*  58  112:ifne            122
                makeNan();
    //   59  115:aload_0         
    //   60  116:invokevirtual   #23  <Method void Real.makeNan()>
            else
    //*  61  119:goto            130
                makeZero(sign);
    //   62  122:aload_0         
    //   63  123:aload_0         
    //   64  124:getfield        #4   <Field byte Real.sign>
    //   65  127:invokevirtual   #25  <Method void Real.makeZero(int)>
            return;
    //   66  130:return          
        }
        if(exponent < 0 && mantissa == 0L || real.exponent < 0 && real.mantissa == 0L)
    //*  67  131:aload_0         
    //*  68  132:getfield        #3   <Field int Real.exponent>
    //*  69  135:ifge            147
    //*  70  138:aload_0         
    //*  71  139:getfield        #2   <Field long Real.mantissa>
    //*  72  142:lconst_0        
    //*  73  143:lcmp            
    //*  74  144:ifeq            163
    //*  75  147:aload_1         
    //*  76  148:getfield        #3   <Field int Real.exponent>
    //*  77  151:ifge            172
    //*  78  154:aload_1         
    //*  79  155:getfield        #2   <Field long Real.mantissa>
    //*  80  158:lconst_0        
    //*  81  159:lcmp            
    //*  82  160:ifne            172
        {
            makeInfinity(sign);
    //   83  163:aload_0         
    //   84  164:aload_0         
    //   85  165:getfield        #4   <Field byte Real.sign>
    //   86  168:invokevirtual   #22  <Method void Real.makeInfinity(int)>
            return;
    //   87  171:return          
        }
        long l = mantissa & 0x7fffffffL;
    //   88  172:aload_0         
    //   89  173:getfield        #2   <Field long Real.mantissa>
    //   90  176:ldc2w           #48  <Long 0x7fffffffL>
    //   91  179:land            
    //   92  180:lstore_2        
        long l1 = mantissa >>> 31;
    //   93  181:aload_0         
    //   94  182:getfield        #2   <Field long Real.mantissa>
    //   95  185:bipush          31
    //   96  187:lushr           
    //   97  188:lstore          4
        long l2 = real.mantissa & 0x7fffffffL;
    //   98  190:aload_1         
    //   99  191:getfield        #2   <Field long Real.mantissa>
    //  100  194:ldc2w           #48  <Long 0x7fffffffL>
    //  101  197:land            
    //  102  198:lstore          6
        long l3 = real.mantissa >>> 31;
    //  103  200:aload_1         
    //  104  201:getfield        #2   <Field long Real.mantissa>
    //  105  204:bipush          31
    //  106  206:lushr           
    //  107  207:lstore          8
        mantissa = l1 * l3;
    //  108  209:aload_0         
    //  109  210:lload           4
    //  110  212:lload           8
    //  111  214:lmul            
    //  112  215:putfield        #2   <Field long Real.mantissa>
        int i = mantissa >= 0L ? 0x40000000 : 0;
    //  113  218:aload_0         
    //  114  219:getfield        #2   <Field long Real.mantissa>
    //  115  222:lconst_0        
    //  116  223:lcmp            
    //  117  224:ifge            231
    //  118  227:iconst_0        
    //  119  228:goto            233
    //  120  231:ldc1            #30  <Int 0x40000000>
    //  121  233:istore          10
        mantissa += l * l3 + l1 * l2 + (l * l2 >>> 31) + (long)i >>> 31;
    //  122  235:aload_0         
    //  123  236:dup             
    //  124  237:getfield        #2   <Field long Real.mantissa>
    //  125  240:lload_2         
    //  126  241:lload           8
    //  127  243:lmul            
    //  128  244:lload           4
    //  129  246:lload           6
    //  130  248:lmul            
    //  131  249:ladd            
    //  132  250:lload_2         
    //  133  251:lload           6
    //  134  253:lmul            
    //  135  254:bipush          31
    //  136  256:lushr           
    //  137  257:ladd            
    //  138  258:iload           10
    //  139  260:i2l             
    //  140  261:ladd            
    //  141  262:bipush          31
    //  142  264:lushr           
    //  143  265:ladd            
    //  144  266:putfield        #2   <Field long Real.mantissa>
        int j = real.exponent;
    //  145  269:aload_1         
    //  146  270:getfield        #3   <Field int Real.exponent>
    //  147  273:istore          11
        exponent += j - 0x40000000;
    //  148  275:aload_0         
    //  149  276:dup             
    //  150  277:getfield        #3   <Field int Real.exponent>
    //  151  280:iload           11
    //  152  282:ldc1            #30  <Int 0x40000000>
    //  153  284:isub            
    //  154  285:iadd            
    //  155  286:putfield        #3   <Field int Real.exponent>
        if(exponent < 0 && (exponent != -1 || j >= 0x40000000 || mantissa >= 0L))
    //* 156  289:aload_0         
    //* 157  290:getfield        #3   <Field int Real.exponent>
    //* 158  293:ifge            350
    //* 159  296:aload_0         
    //* 160  297:getfield        #3   <Field int Real.exponent>
    //* 161  300:iconst_m1       
    //* 162  301:icmpne          323
    //* 163  304:iload           11
    //* 164  306:ldc1            #30  <Int 0x40000000>
    //* 165  308:icmpge          323
    //* 166  311:aload_0         
    //* 167  312:getfield        #2   <Field long Real.mantissa>
    //* 168  315:lconst_0        
    //* 169  316:lcmp            
    //* 170  317:ifge            323
    //* 171  320:goto            350
        {
            if(j < 0x40000000)
    //* 172  323:iload           11
    //* 173  325:ldc1            #30  <Int 0x40000000>
    //* 174  327:icmpge          341
                makeZero(sign);
    //  175  330:aload_0         
    //  176  331:aload_0         
    //  177  332:getfield        #4   <Field byte Real.sign>
    //  178  335:invokevirtual   #25  <Method void Real.makeZero(int)>
            else
    //* 179  338:goto            349
                makeInfinity(sign);
    //  180  341:aload_0         
    //  181  342:aload_0         
    //  182  343:getfield        #4   <Field byte Real.sign>
    //  183  346:invokevirtual   #22  <Method void Real.makeInfinity(int)>
            return;
    //  184  349:return          
        }
        if(mantissa < 0L)
    //* 185  350:aload_0         
    //* 186  351:getfield        #2   <Field long Real.mantissa>
    //* 187  354:lconst_0        
    //* 188  355:lcmp            
    //* 189  356:ifge            396
        {
            mantissa = mantissa + 1L >>> 1;
    //  190  359:aload_0         
    //  191  360:aload_0         
    //  192  361:getfield        #2   <Field long Real.mantissa>
    //  193  364:lconst_1        
    //  194  365:ladd            
    //  195  366:iconst_1        
    //  196  367:lushr           
    //  197  368:putfield        #2   <Field long Real.mantissa>
            exponent++;
    //  198  371:aload_0         
    //  199  372:dup             
    //  200  373:getfield        #3   <Field int Real.exponent>
    //  201  376:iconst_1        
    //  202  377:iadd            
    //  203  378:putfield        #3   <Field int Real.exponent>
            if(exponent < 0)
    //* 204  381:aload_0         
    //* 205  382:getfield        #3   <Field int Real.exponent>
    //* 206  385:ifge            396
                makeInfinity(sign);
    //  207  388:aload_0         
    //  208  389:aload_0         
    //  209  390:getfield        #4   <Field byte Real.sign>
    //  210  393:invokevirtual   #22  <Method void Real.makeInfinity(int)>
        }
        /* return; */
    //  211  396:return          
    }

    // Decompiling method: mul128  Signature: (JLReal;J)J
    // Max stack: 8, #locals: 25, #params: 6
    // Code length: 498 bytes, Code offset: 13203
    // Parameter  0 added: Name this Type LReal; At 0 498 Range 0 497 Init 0 fixed
    // Parameter  1 added: Name l Type J At 0 498 Range 0 497 Init 0
    // Parameter  3 added: Name real Type LReal; At 0 498 Range 0 497 Init 0
    // Parameter  4 added: Name l1 Type J At 0 498 Range 0 497 Init 0
    // RetValue  25 added: Name <returnValue> Type J At 0 498 Range 0 497 Init 0 fixed
    // LocalVar   6 added: Name i Type I At 179 25 Range 179 203 Init 179
    // LocalVar   7 added: Name l2 Type J At 233 214 Range 233 446 Init 233
    // LocalVar   9 added: Name l3 Type J At 239 83 Range 239 321 Init 239
    // LocalVar  11 added: Name l4 Type J At 245 94 Range 245 338 Init 245
    // LocalVar  13 added: Name l5 Type J At 254 166 Range 254 419 Init 254
    // LocalVar  15 added: Name l6 Type J At 263 201 Range 263 463 Init 263
    // LocalVar  17 added: Name l7 Type J At 270 31 Range 270 300 Init 270
    // LocalVar  19 added: Name l8 Type J At 277 76 Range 277 352 Init 277
    // LocalVar  21 added: Name l9 Type J At 286 141 Range 286 426 Init 286
    // LocalVar  23 added: Name l10 Type J At 295 171 Range 295 465 Init 295
    // LocalVar   9 added: Name l11 Type J At 335 25 Range 335 359 Init 335
    // LocalVar  11 added: Name l12 Type J At 342 51 Range 342 392 Init 342
    // LocalVar  17 added: Name l13 Type J At 349 50 Range 349 398 Init 349
    // LocalVar  19 added: Name l14 Type J At 356 49 Range 356 404 Init 356
    // LocalVar   9 added: Name l15 Type J At 384 29 Range 384 412 Init 384
    // LocalVar  11 added: Name l16 Type J At 409 25 Range 409 433 Init 409
    // LocalVar   9 added: Name l17 Type J At 416 43 Range 416 458 Init 416
    // LocalVar  13 added: Name l18 Type J At 423 54 Range 423 476 Init 423
    // LocalVar  21 added: Name l19 Type J At 430 53 Range 430 482 Init 430
    // LocalVar  11 added: Name l20 Type J At 450 21 Range 450 470 Init 450
    // LocalVar   9 name l11(J) merged out into l3(J)
    // LocalVar   9 name l15(J) merged out into l3(J)
    // LocalVar   9 name l17(J) merged out into l3(J)
    // LocalVar  11 name l12(J) merged out into l4(J)
    // LocalVar  11 name l16(J) merged out into l4(J)
    // LocalVar  11 name l20(J) merged out into l4(J)
    // LocalVar  13 name l18(J) merged out into l5(J)
    // LocalVar  17 name l13(J) merged out into l7(J)
    // LocalVar  19 name l14(J) merged out into l8(J)
    // LocalVar  21 name l19(J) merged out into l9(J)
    public long mul128(long l, Real real, long l1)
    {
        if(exponent < 0 && mantissa != 0L || real.exponent < 0 && real.mantissa != 0L)
    //*   0    0:aload_0         
    //*   1    1:getfield        #3   <Field int Real.exponent>
    //*   2    4:ifge            16
    //*   3    7:aload_0         
    //*   4    8:getfield        #2   <Field long Real.mantissa>
    //*   5   11:lconst_0        
    //*   6   12:lcmp            
    //*   7   13:ifne            32
    //*   8   16:aload_3         
    //*   9   17:getfield        #3   <Field int Real.exponent>
    //*  10   20:ifge            38
    //*  11   23:aload_3         
    //*  12   24:getfield        #2   <Field long Real.mantissa>
    //*  13   27:lconst_0        
    //*  14   28:lcmp            
    //*  15   29:ifeq            38
        {
            makeNan();
    //   16   32:aload_0         
    //   17   33:invokevirtual   #23  <Method void Real.makeNan()>
            return 0L;
    //   18   36:lconst_0        
    //   19   37:lreturn         
        }
        sign ^= real.sign;
    //   20   38:aload_0         
    //   21   39:dup             
    //   22   40:getfield        #4   <Field byte Real.sign>
    //   23   43:aload_3         
    //   24   44:getfield        #4   <Field byte Real.sign>
    //   25   47:ixor            
    //   26   48:int2byte        
    //   27   49:putfield        #4   <Field byte Real.sign>
        if(exponent == 0 && mantissa == 0L || real.exponent == 0 && real.mantissa == 0L)
    //*  28   52:aload_0         
    //*  29   53:getfield        #3   <Field int Real.exponent>
    //*  30   56:ifne            68
    //*  31   59:aload_0         
    //*  32   60:getfield        #2   <Field long Real.mantissa>
    //*  33   63:lconst_0        
    //*  34   64:lcmp            
    //*  35   65:ifeq            84
    //*  36   68:aload_3         
    //*  37   69:getfield        #3   <Field int Real.exponent>
    //*  38   72:ifne            133
    //*  39   75:aload_3         
    //*  40   76:getfield        #2   <Field long Real.mantissa>
    //*  41   79:lconst_0        
    //*  42   80:lcmp            
    //*  43   81:ifne            133
        {
            if(exponent < 0 && mantissa == 0L || real.exponent < 0 && real.mantissa == 0L)
    //*  44   84:aload_0         
    //*  45   85:getfield        #3   <Field int Real.exponent>
    //*  46   88:ifge            100
    //*  47   91:aload_0         
    //*  48   92:getfield        #2   <Field long Real.mantissa>
    //*  49   95:lconst_0        
    //*  50   96:lcmp            
    //*  51   97:ifeq            116
    //*  52  100:aload_3         
    //*  53  101:getfield        #3   <Field int Real.exponent>
    //*  54  104:ifge            123
    //*  55  107:aload_3         
    //*  56  108:getfield        #2   <Field long Real.mantissa>
    //*  57  111:lconst_0        
    //*  58  112:lcmp            
    //*  59  113:ifne            123
                makeNan();
    //   60  116:aload_0         
    //   61  117:invokevirtual   #23  <Method void Real.makeNan()>
            else
    //*  62  120:goto            131
                makeZero(sign);
    //   63  123:aload_0         
    //   64  124:aload_0         
    //   65  125:getfield        #4   <Field byte Real.sign>
    //   66  128:invokevirtual   #25  <Method void Real.makeZero(int)>
            return 0L;
    //   67  131:lconst_0        
    //   68  132:lreturn         
        }
        if(exponent < 0 && mantissa == 0L || real.exponent < 0 && real.mantissa == 0L)
    //*  69  133:aload_0         
    //*  70  134:getfield        #3   <Field int Real.exponent>
    //*  71  137:ifge            149
    //*  72  140:aload_0         
    //*  73  141:getfield        #2   <Field long Real.mantissa>
    //*  74  144:lconst_0        
    //*  75  145:lcmp            
    //*  76  146:ifeq            165
    //*  77  149:aload_3         
    //*  78  150:getfield        #3   <Field int Real.exponent>
    //*  79  153:ifge            175
    //*  80  156:aload_3         
    //*  81  157:getfield        #2   <Field long Real.mantissa>
    //*  82  160:lconst_0        
    //*  83  161:lcmp            
    //*  84  162:ifne            175
        {
            makeInfinity(sign);
    //   85  165:aload_0         
    //   86  166:aload_0         
    //   87  167:getfield        #4   <Field byte Real.sign>
    //   88  170:invokevirtual   #22  <Method void Real.makeInfinity(int)>
            return 0L;
    //   89  173:lconst_0        
    //   90  174:lreturn         
        }
        int i = real.exponent;
    //   91  175:aload_3         
    //   92  176:getfield        #3   <Field int Real.exponent>
    //   93  179:istore          6
        exponent += i - 0x40000000;
    //   94  181:aload_0         
    //   95  182:dup             
    //   96  183:getfield        #3   <Field int Real.exponent>
    //   97  186:iload           6
    //   98  188:ldc1            #30  <Int 0x40000000>
    //   99  190:isub            
    //  100  191:iadd            
    //  101  192:putfield        #3   <Field int Real.exponent>
        if(exponent < 0)
    //* 102  195:aload_0         
    //* 103  196:getfield        #3   <Field int Real.exponent>
    //* 104  199:ifge            230
        {
            if(i < 0x40000000)
    //* 105  202:iload           6
    //* 106  204:ldc1            #30  <Int 0x40000000>
    //* 107  206:icmpge          220
                makeZero(sign);
    //  108  209:aload_0         
    //  109  210:aload_0         
    //  110  211:getfield        #4   <Field byte Real.sign>
    //  111  214:invokevirtual   #25  <Method void Real.makeZero(int)>
            else
    //* 112  217:goto            228
                makeInfinity(sign);
    //  113  220:aload_0         
    //  114  221:aload_0         
    //  115  222:getfield        #4   <Field byte Real.sign>
    //  116  225:invokevirtual   #22  <Method void Real.makeInfinity(int)>
            return 0L;
    //  117  228:lconst_0        
    //  118  229:lreturn         
        } else
        {
            long l2 = 0xffffffffL;
    //  119  230:ldc2w           #50  <Long 0xffffffffL>
    //  120  233:lstore          7
            long l3 = l & l2;
    //  121  235:lload_1         
    //  122  236:lload           7
    //  123  238:land            
    //  124  239:lstore          9
            long l4 = l >>> 32;
    //  125  241:lload_1         
    //  126  242:bipush          32
    //  127  244:lushr           
    //  128  245:lstore          11
            long l5 = mantissa & l2;
    //  129  247:aload_0         
    //  130  248:getfield        #2   <Field long Real.mantissa>
    //  131  251:lload           7
    //  132  253:land            
    //  133  254:lstore          13
            long l6 = mantissa >>> 32;
    //  134  256:aload_0         
    //  135  257:getfield        #2   <Field long Real.mantissa>
    //  136  260:bipush          32
    //  137  262:lushr           
    //  138  263:lstore          15
            long l7 = l1 & l2;
    //  139  265:lload           4
    //  140  267:lload           7
    //  141  269:land            
    //  142  270:lstore          17
            long l8 = l1 >>> 32;
    //  143  272:lload           4
    //  144  274:bipush          32
    //  145  276:lushr           
    //  146  277:lstore          19
            long l9 = real.mantissa & l2;
    //  147  279:aload_3         
    //  148  280:getfield        #2   <Field long Real.mantissa>
    //  149  283:lload           7
    //  150  285:land            
    //  151  286:lstore          21
            long l10 = real.mantissa >>> 32;
    //  152  288:aload_3         
    //  153  289:getfield        #2   <Field long Real.mantissa>
    //  154  292:bipush          32
    //  155  294:lushr           
    //  156  295:lstore          23
            l3 = (l6 * l7 >>> 2) + (l5 * l8 >>> 2) + (l4 * l9 >>> 2) + (l3 * l10 >>> 2) + 0x60000000L >>> 28;
    //  157  297:lload           15
    //  158  299:lload           17
    //  159  301:lmul            
    //  160  302:iconst_2        
    //  161  303:lushr           
    //  162  304:lload           13
    //  163  306:lload           19
    //  164  308:lmul            
    //  165  309:iconst_2        
    //  166  310:lushr           
    //  167  311:ladd            
    //  168  312:lload           11
    //  169  314:lload           21
    //  170  316:lmul            
    //  171  317:iconst_2        
    //  172  318:lushr           
    //  173  319:ladd            
    //  174  320:lload           9
    //  175  322:lload           23
    //  176  324:lmul            
    //  177  325:iconst_2        
    //  178  326:lushr           
    //  179  327:ladd            
    //  180  328:ldc2w           #52  <Long 0x60000000L>
    //  181  331:ladd            
    //  182  332:bipush          28
    //  183  334:lushr           
    //  184  335:lstore          9
            l4 *= l10;
    //  185  337:lload           11
    //  186  339:lload           23
    //  187  341:lmul            
    //  188  342:lstore          11
            l7 = l5 * l9;
    //  189  344:lload           13
    //  190  346:lload           21
    //  191  348:lmul            
    //  192  349:lstore          17
            l8 *= l6;
    //  193  351:lload           19
    //  194  353:lload           15
    //  195  355:lmul            
    //  196  356:lstore          19
            l3 += (l4 << 2 & l2) + (l7 << 2 & l2) + (l8 << 2 & l2);
    //  197  358:lload           9
    //  198  360:lload           11
    //  199  362:iconst_2        
    //  200  363:lshl            
    //  201  364:lload           7
    //  202  366:land            
    //  203  367:lload           17
    //  204  369:iconst_2        
    //  205  370:lshl            
    //  206  371:lload           7
    //  207  373:land            
    //  208  374:ladd            
    //  209  375:lload           19
    //  210  377:iconst_2        
    //  211  378:lshl            
    //  212  379:lload           7
    //  213  381:land            
    //  214  382:ladd            
    //  215  383:ladd            
    //  216  384:lstore          9
            l4 = (l3 >>> 32) + (l4 >>> 30) + (l7 >>> 30) + (l8 >>> 30);
    //  217  386:lload           9
    //  218  388:bipush          32
    //  219  390:lushr           
    //  220  391:lload           11
    //  221  393:bipush          30
    //  222  395:lushr           
    //  223  396:ladd            
    //  224  397:lload           17
    //  225  399:bipush          30
    //  226  401:lushr           
    //  227  402:ladd            
    //  228  403:lload           19
    //  229  405:bipush          30
    //  230  407:lushr           
    //  231  408:ladd            
    //  232  409:lstore          11
            l3 &= l2;
    //  233  411:lload           9
    //  234  413:lload           7
    //  235  415:land            
    //  236  416:lstore          9
            l5 *= l10;
    //  237  418:lload           13
    //  238  420:lload           23
    //  239  422:lmul            
    //  240  423:lstore          13
            l9 *= l6;
    //  241  425:lload           21
    //  242  427:lload           15
    //  243  429:lmul            
    //  244  430:lstore          21
            l4 += (l5 << 2 & l2) + (l9 << 2 & l2);
    //  245  432:lload           11
    //  246  434:lload           13
    //  247  436:iconst_2        
    //  248  437:lshl            
    //  249  438:lload           7
    //  250  440:land            
    //  251  441:lload           21
    //  252  443:iconst_2        
    //  253  444:lshl            
    //  254  445:lload           7
    //  255  447:land            
    //  256  448:ladd            
    //  257  449:ladd            
    //  258  450:lstore          11
            l = (l4 << 32) + l3;
    //  259  452:lload           11
    //  260  454:bipush          32
    //  261  456:lshl            
    //  262  457:lload           9
    //  263  459:ladd            
    //  264  460:lstore_1        
            mantissa = (l6 * l10 << 2) + (l4 >>> 32) + (l5 >>> 30) + (l9 >>> 30);
    //  265  461:aload_0         
    //  266  462:lload           15
    //  267  464:lload           23
    //  268  466:lmul            
    //  269  467:iconst_2        
    //  270  468:lshl            
    //  271  469:lload           11
    //  272  471:bipush          32
    //  273  473:lushr           
    //  274  474:ladd            
    //  275  475:lload           13
    //  276  477:bipush          30
    //  277  479:lushr           
    //  278  480:ladd            
    //  279  481:lload           21
    //  280  483:bipush          30
    //  281  485:lushr           
    //  282  486:ladd            
    //  283  487:putfield        #2   <Field long Real.mantissa>
            l = normalize128(l);
    //  284  490:aload_0         
    //  285  491:lload_1         
    //  286  492:invokevirtual   #45  <Method long Real.normalize128(long)>
    //  287  495:lstore_1        
            return l;
    //  288  496:lload_1         
    //  289  497:lreturn         
        }
    }

    // Decompiling method: mul10  Signature: ()V
    // Max stack: 7, #locals: 1, #params: 1
    // Code length: 93 bytes, Code offset: 13962
    // Parameter  0 added: Name this Type LReal; At 0 93 Range 0 92 Init 0 fixed
    // RetValue   1 added: Name <returnValue> Type V At 0 93 Range 0 92 Init 0 fixed
    private void mul10()
    {
        if(exponent < 0 || mantissa == 0L)
    //*   0    0:aload_0         
    //*   1    1:getfield        #3   <Field int Real.exponent>
    //*   2    4:iflt            16
    //*   3    7:aload_0         
    //*   4    8:getfield        #2   <Field long Real.mantissa>
    //*   5   11:lconst_0        
    //*   6   12:lcmp            
    //*   7   13:ifne            17
            return;
    //    8   16:return          
        mantissa += mantissa + 2L >>> 2;
    //    9   17:aload_0         
    //   10   18:dup             
    //   11   19:getfield        #2   <Field long Real.mantissa>
    //   12   22:aload_0         
    //   13   23:getfield        #2   <Field long Real.mantissa>
    //   14   26:ldc2w           #54  <Long 2L>
    //   15   29:ladd            
    //   16   30:iconst_2        
    //   17   31:lushr           
    //   18   32:ladd            
    //   19   33:putfield        #2   <Field long Real.mantissa>
        exponent += 3;
    //   20   36:aload_0         
    //   21   37:dup             
    //   22   38:getfield        #3   <Field int Real.exponent>
    //   23   41:iconst_3        
    //   24   42:iadd            
    //   25   43:putfield        #3   <Field int Real.exponent>
        if(mantissa < 0L)
    //*  26   46:aload_0         
    //*  27   47:getfield        #2   <Field long Real.mantissa>
    //*  28   50:lconst_0        
    //*  29   51:lcmp            
    //*  30   52:ifge            77
        {
            mantissa = mantissa + 1L >>> 1;
    //   31   55:aload_0         
    //   32   56:aload_0         
    //   33   57:getfield        #2   <Field long Real.mantissa>
    //   34   60:lconst_1        
    //   35   61:ladd            
    //   36   62:iconst_1        
    //   37   63:lushr           
    //   38   64:putfield        #2   <Field long Real.mantissa>
            exponent++;
    //   39   67:aload_0         
    //   40   68:dup             
    //   41   69:getfield        #3   <Field int Real.exponent>
    //   42   72:iconst_1        
    //   43   73:iadd            
    //   44   74:putfield        #3   <Field int Real.exponent>
        }
        if(exponent < 0)
    //*  45   77:aload_0         
    //*  46   78:getfield        #3   <Field int Real.exponent>
    //*  47   81:ifge            92
            makeInfinity(sign);
    //   48   84:aload_0         
    //   49   85:aload_0         
    //   50   86:getfield        #4   <Field byte Real.sign>
    //   51   89:invokevirtual   #22  <Method void Real.makeInfinity(int)>
        /* return; */
    //   52   92:return          
    }

    // Decompiling method: sqr  Signature: ()V
    // Max stack: 9, #locals: 7, #params: 1
    // Code length: 196 bytes, Code offset: 14125
    // Parameter  0 added: Name this Type LReal; At 0 196 Range 0 195 Init 0 fixed
    // RetValue   7 added: Name <returnValue> Type V At 0 196 Range 0 195 Init 0 fixed
    // LocalVar   1 added: Name i Type I At 26 25 Range 26 50 Init 26
    // LocalVar   2 added: Name l Type J At 84 49 Range 84 132 Init 84
    // LocalVar   4 added: Name l1 Type J At 92 36 Range 92 127 Init 92
    // LocalVar   6 added: Name j Type I At 118 22 Range 118 139 Init 118
    public void sqr()
    {
        sign = 0;
    //    0    0:aload_0         
    //    1    1:iconst_0        
    //    2    2:putfield        #4   <Field byte Real.sign>
        if(exponent < 0 || mantissa == 0L)
    //*   3    5:aload_0         
    //*   4    6:getfield        #3   <Field int Real.exponent>
    //*   5    9:iflt            21
    //*   6   12:aload_0         
    //*   7   13:getfield        #2   <Field long Real.mantissa>
    //*   8   16:lconst_0        
    //*   9   17:lcmp            
    //*  10   18:ifne            22
            return;
    //   11   21:return          
        int i = exponent;
    //   12   22:aload_0         
    //   13   23:getfield        #3   <Field int Real.exponent>
    //   14   26:istore_1        
        exponent += exponent - 0x40000000;
    //   15   27:aload_0         
    //   16   28:dup             
    //   17   29:getfield        #3   <Field int Real.exponent>
    //   18   32:aload_0         
    //   19   33:getfield        #3   <Field int Real.exponent>
    //   20   36:ldc1            #30  <Int 0x40000000>
    //   21   38:isub            
    //   22   39:iadd            
    //   23   40:putfield        #3   <Field int Real.exponent>
        if(exponent < 0)
    //*  24   43:aload_0         
    //*  25   44:getfield        #3   <Field int Real.exponent>
    //*  26   47:ifge            76
        {
            if(i < 0x40000000)
    //*  27   50:iload_1         
    //*  28   51:ldc1            #30  <Int 0x40000000>
    //*  29   53:icmpge          67
                makeZero(sign);
    //   30   56:aload_0         
    //   31   57:aload_0         
    //   32   58:getfield        #4   <Field byte Real.sign>
    //   33   61:invokevirtual   #25  <Method void Real.makeZero(int)>
            else
    //*  34   64:goto            75
                makeInfinity(sign);
    //   35   67:aload_0         
    //   36   68:aload_0         
    //   37   69:getfield        #4   <Field byte Real.sign>
    //   38   72:invokevirtual   #22  <Method void Real.makeInfinity(int)>
            return;
    //   39   75:return          
        }
        long l = mantissa & 0x7fffffffL;
    //   40   76:aload_0         
    //   41   77:getfield        #2   <Field long Real.mantissa>
    //   42   80:ldc2w           #48  <Long 0x7fffffffL>
    //   43   83:land            
    //   44   84:lstore_2        
        long l1 = mantissa >>> 31;
    //   45   85:aload_0         
    //   46   86:getfield        #2   <Field long Real.mantissa>
    //   47   89:bipush          31
    //   48   91:lushr           
    //   49   92:lstore          4
        mantissa = l1 * l1;
    //   50   94:aload_0         
    //   51   95:lload           4
    //   52   97:lload           4
    //   53   99:lmul            
    //   54  100:putfield        #2   <Field long Real.mantissa>
        int j = mantissa >= 0L ? 0x40000000 : 0;
    //   55  103:aload_0         
    //   56  104:getfield        #2   <Field long Real.mantissa>
    //   57  107:lconst_0        
    //   58  108:lcmp            
    //   59  109:ifge            116
    //   60  112:iconst_0        
    //   61  113:goto            118
    //   62  116:ldc1            #30  <Int 0x40000000>
    //   63  118:istore          6
        mantissa += (l * l1 << 1) + (l * l >>> 31) + (long)j >>> 31;
    //   64  120:aload_0         
    //   65  121:dup             
    //   66  122:getfield        #2   <Field long Real.mantissa>
    //   67  125:lload_2         
    //   68  126:lload           4
    //   69  128:lmul            
    //   70  129:iconst_1        
    //   71  130:lshl            
    //   72  131:lload_2         
    //   73  132:lload_2         
    //   74  133:lmul            
    //   75  134:bipush          31
    //   76  136:lushr           
    //   77  137:ladd            
    //   78  138:iload           6
    //   79  140:i2l             
    //   80  141:ladd            
    //   81  142:bipush          31
    //   82  144:lushr           
    //   83  145:ladd            
    //   84  146:putfield        #2   <Field long Real.mantissa>
        if(mantissa < 0L)
    //*  85  149:aload_0         
    //*  86  150:getfield        #2   <Field long Real.mantissa>
    //*  87  153:lconst_0        
    //*  88  154:lcmp            
    //*  89  155:ifge            195
        {
            mantissa = mantissa + 1L >>> 1;
    //   90  158:aload_0         
    //   91  159:aload_0         
    //   92  160:getfield        #2   <Field long Real.mantissa>
    //   93  163:lconst_1        
    //   94  164:ladd            
    //   95  165:iconst_1        
    //   96  166:lushr           
    //   97  167:putfield        #2   <Field long Real.mantissa>
            exponent++;
    //   98  170:aload_0         
    //   99  171:dup             
    //  100  172:getfield        #3   <Field int Real.exponent>
    //  101  175:iconst_1        
    //  102  176:iadd            
    //  103  177:putfield        #3   <Field int Real.exponent>
            if(exponent < 0)
    //* 104  180:aload_0         
    //* 105  181:getfield        #3   <Field int Real.exponent>
    //* 106  184:ifge            195
                makeInfinity(sign);
    //  107  187:aload_0         
    //  108  188:aload_0         
    //  109  189:getfield        #4   <Field byte Real.sign>
    //  110  192:invokevirtual   #22  <Method void Real.makeInfinity(int)>
        }
        /* return; */
    //  111  195:return          
    }

    // Decompiling method: div  Signature: (I)V
    // Max stack: 6, #locals: 8, #params: 2
    // Code length: 278 bytes, Code offset: 14441
    // Parameter  0 added: Name this Type LReal; At 0 278 Range 0 277 Init 0 fixed
    // Parameter  1 added: Name i Type I At 0 278 Range 0 277 Init 0
    // RetValue   8 added: Name <returnValue> Type V At 0 278 Range 0 277 Init 0 fixed
    // LocalVar   2 added: Name l Type J At 96 152 Range 96 247 Init 96
    // LocalVar   4 added: Name l1 Type J At 103 120 Range 103 222 Init 103
    // LocalVar   6 added: Name flag Type Z At 116 77 Range 116 192 Init 116
    // LocalVar   7 added: Name j Type I At 126 22 Range 126 147 Init 126
    // LocalVar   6 chged: Name byte0 Oname flag Type B At 135 58 Range 116 192 Init 116
    // LocalVar   7 added: Name k Type I At 151 6 Range 151 156 Init 151
    // LocalVar   7 added: Name i1 Type I At 160 6 Range 160 165 Init 160
    // LocalVar   7 added: Name j1 Type I At 169 6 Range 169 174 Init 169
    // LocalVar   7 added: Name k1 Type I At 179 6 Range 179 184 Init 179
    // LocalVar   7 added: Name i2 Type I At 189 9 Range 189 197 Init 189
    // LocalVar   6 added: Name j2 Type I At 208 27 Range 208 234 Init 208
    // LocalVar   4 added: Name l2 Type J At 226 15 Range 226 240 Init 226
    // LocalVar   4 added: Name l3 Type J At 249 9 Range 249 257 Init 249
    // LocalVar   4 name l2(J) merged out into l1(J)
    // LocalVar   4 name l3(J) merged out into l1(J)
    // LocalVar   6 chged: Name k2 Oname byte0 Type I At 116 77 Range 116 192 Init 116
    // LocalVar   6 name j2(I) merged out into k2(I)
    // LocalVar   7 name k(I) merged out into j(I)
    // LocalVar   7 name i1(I) merged out into j(I)
    // LocalVar   7 name j1(I) merged out into j(I)
    // LocalVar   7 name k1(I) merged out into j(I)
    // LocalVar   7 name i2(I) merged out into j(I)
    public void div(int i)
    {
        if(exponent < 0 && mantissa != 0L)
    //*   0    0:aload_0         
    //*   1    1:getfield        #3   <Field int Real.exponent>
    //*   2    4:ifge            17
    //*   3    7:aload_0         
    //*   4    8:getfield        #2   <Field long Real.mantissa>
    //*   5   11:lconst_0        
    //*   6   12:lcmp            
    //*   7   13:ifeq            17
            return;
    //    8   16:return          
        if(i < 0)
    //*   9   17:iload_1         
    //*  10   18:ifge            35
        {
            sign ^= 1;
    //   11   21:aload_0         
    //   12   22:dup             
    //   13   23:getfield        #4   <Field byte Real.sign>
    //   14   26:iconst_1        
    //   15   27:ixor            
    //   16   28:int2byte        
    //   17   29:putfield        #4   <Field byte Real.sign>
            i = -i;
    //   18   32:iload_1         
    //   19   33:ineg            
    //   20   34:istore_1        
        }
        if(exponent < 0 && mantissa == 0L)
    //*  21   35:aload_0         
    //*  22   36:getfield        #3   <Field int Real.exponent>
    //*  23   39:ifge            52
    //*  24   42:aload_0         
    //*  25   43:getfield        #2   <Field long Real.mantissa>
    //*  26   46:lconst_0        
    //*  27   47:lcmp            
    //*  28   48:ifne            52
            return;
    //   29   51:return          
        if(exponent == 0 && mantissa == 0L)
    //*  30   52:aload_0         
    //*  31   53:getfield        #3   <Field int Real.exponent>
    //*  32   56:ifne            77
    //*  33   59:aload_0         
    //*  34   60:getfield        #2   <Field long Real.mantissa>
    //*  35   63:lconst_0        
    //*  36   64:lcmp            
    //*  37   65:ifne            77
        {
            if(i == 0)
    //*  38   68:iload_1         
    //*  39   69:ifne            76
                makeNan();
    //   40   72:aload_0         
    //   41   73:invokevirtual   #23  <Method void Real.makeNan()>
            return;
    //   42   76:return          
        }
        if(i == 0)
    //*  43   77:iload_1         
    //*  44   78:ifne            90
        {
            makeInfinity(sign);
    //   45   81:aload_0         
    //   46   82:aload_0         
    //   47   83:getfield        #4   <Field byte Real.sign>
    //   48   86:invokevirtual   #22  <Method void Real.makeInfinity(int)>
            return;
    //   49   89:return          
        }
        long l = (long)i & 0xffffffffL;
    //   50   90:iload_1         
    //   51   91:i2l             
    //   52   92:ldc2w           #50  <Long 0xffffffffL>
    //   53   95:land            
    //   54   96:lstore_2        
        long l1 = mantissa % l;
    //   55   97:aload_0         
    //   56   98:getfield        #2   <Field long Real.mantissa>
    //   57  101:lload_2         
    //   58  102:lrem            
    //   59  103:lstore          4
        mantissa /= l;
    //   60  105:aload_0         
    //   61  106:dup             
    //   62  107:getfield        #2   <Field long Real.mantissa>
    //   63  110:lload_2         
    //   64  111:ldiv            
    //   65  112:putfield        #2   <Field long Real.mantissa>
        int j = 0;
    //   66  115:iconst_0        
    //   67  116:istore          6
        int k = (int)(mantissa >>> 32);
    //   68  118:aload_0         
    //   69  119:getfield        #2   <Field long Real.mantissa>
    //   70  122:bipush          32
    //   71  124:lushr           
    //   72  125:l2i             
    //   73  126:istore          7
        if(k == 0)
    //*  74  128:iload           7
    //*  75  130:ifne            144
        {
            j = 32;
    //   76  133:bipush          32
    //   77  135:istore          6
            k = (int)mantissa;
    //   78  137:aload_0         
    //   79  138:getfield        #2   <Field long Real.mantissa>
    //   80  141:l2i             
    //   81  142:istore          7
        }
        k |= k >> 1;
    //   82  144:iload           7
    //   83  146:iload           7
    //   84  148:iconst_1        
    //   85  149:ishr            
    //   86  150:ior             
    //   87  151:istore          7
        k |= k >> 2;
    //   88  153:iload           7
    //   89  155:iload           7
    //   90  157:iconst_2        
    //   91  158:ishr            
    //   92  159:ior             
    //   93  160:istore          7
        k |= k >> 4;
    //   94  162:iload           7
    //   95  164:iload           7
    //   96  166:iconst_4        
    //   97  167:ishr            
    //   98  168:ior             
    //   99  169:istore          7
        k |= k >> 8;
    //  100  171:iload           7
    //  101  173:iload           7
    //  102  175:bipush          8
    //  103  177:ishr            
    //  104  178:ior             
    //  105  179:istore          7
        k |= k >> 16;
    //  106  181:iload           7
    //  107  183:iload           7
    //  108  185:bipush          16
    //  109  187:ishr            
    //  110  188:ior             
    //  111  189:istore          7
        j += clz_tab[k * 0x7c4acdd >>> 27] - 1;
    //  112  191:iload           6
    //  113  193:getstatic       #9   <Field byte[] Real.clz_tab>
    //  114  196:iload           7
    //  115  198:ldc1            #10  <Int 0x7c4acdd>
    //  116  200:imul            
    //  117  201:bipush          27
    //  118  203:iushr           
    //  119  204:baload          
    //  120  205:iconst_1        
    //  121  206:isub            
    //  122  207:iadd            
    //  123  208:istore          6
        mantissa <<= j;
    //  124  210:aload_0         
    //  125  211:dup             
    //  126  212:getfield        #2   <Field long Real.mantissa>
    //  127  215:iload           6
    //  128  217:lshl            
    //  129  218:putfield        #2   <Field long Real.mantissa>
        l1 <<= j;
    //  130  221:lload           4
    //  131  223:iload           6
    //  132  225:lshl            
    //  133  226:lstore          4
        exponent -= j;
    //  134  228:aload_0         
    //  135  229:dup             
    //  136  230:getfield        #3   <Field int Real.exponent>
    //  137  233:iload           6
    //  138  235:isub            
    //  139  236:putfield        #3   <Field int Real.exponent>
        l1 = (l1 + l / 2L) / l;
    //  140  239:lload           4
    //  141  241:lload_2         
    //  142  242:ldc2w           #54  <Long 2L>
    //  143  245:ldiv            
    //  144  246:ladd            
    //  145  247:lload_2         
    //  146  248:ldiv            
    //  147  249:lstore          4
        mantissa += l1;
    //  148  251:aload_0         
    //  149  252:dup             
    //  150  253:getfield        #2   <Field long Real.mantissa>
    //  151  256:lload           4
    //  152  258:ladd            
    //  153  259:putfield        #2   <Field long Real.mantissa>
        if(exponent < 0)
    //* 154  262:aload_0         
    //* 155  263:getfield        #3   <Field int Real.exponent>
    //* 156  266:ifge            277
            makeZero(sign);
    //  157  269:aload_0         
    //  158  270:aload_0         
    //  159  271:getfield        #4   <Field byte Real.sign>
    //  160  274:invokevirtual   #25  <Method void Real.makeZero(int)>
        /* return; */
    //  161  277:return          
    }

    // Decompiling method: ldiv  Signature: (JJ)J
    // Max stack: 6, #locals: 9, #params: 4
    // Code length: 186 bytes, Code offset: 14841
    // Parameter  0 added: Name l Type J At 0 186 Range 0 185 Init 0
    // Parameter  2 added: Name l1 Type J At 0 186 Range 0 185 Init 0
    // RetValue   9 added: Name <returnValue> Type J At 0 186 Range 0 185 Init 0 fixed
    // LocalVar   4 added: Name i Type I At 11 101 Range 11 111 Init 11
    // LocalVar   5 added: Name j Type I At 18 9 Range 18 26 Init 18
    // LocalVar   6 added: Name k Type I At 36 12 Range 36 47 Init 36
    // LocalVar   7 added: Name l2 Type J At 49 37 Range 49 85 Init 49
    // LocalVar   5 added: Name i1 Type I At 56 9 Range 56 64 Init 56
    // LocalVar   6 added: Name j1 Type I At 74 17 Range 74 90 Init 74
    // LocalVar   7 added: Name l3 Type J At 93 37 Range 93 129 Init 93
    // LocalVar   5 added: Name k1 Type I At 100 9 Range 100 108 Init 100
    // LocalVar   6 added: Name i2 Type I At 118 17 Range 118 134 Init 118
    // LocalVar   7 added: Name l4 Type J At 137 48 Range 137 184 Init 137
    // LocalVar   5 name i1(I) merged out into j(I)
    // LocalVar   5 name k1(I) merged out into j(I)
    // LocalVar   6 name j1(I) merged out into k(I)
    // LocalVar   6 name i2(I) merged out into k(I)
    // LocalVar   7 name l3(J) merged out into l2(J)
    // LocalVar   7 name l4(J) merged out into l2(J)
    public static long ldiv(long l, long l1)
    {
        int i = (int)(0x400000000000L / ((l1 >>> 40) + 1L));
    //    0    0:ldc2w           #56  <Long 0x400000000000L>
    //    1    3:lload_2         
    //    2    4:bipush          40
    //    3    6:lushr           
    //    4    7:lconst_1        
    //    5    8:ladd            
    //    6    9:ldiv            
    //    7   10:l2i             
    //    8   11:istore          4
        int j = (int)(l >>> 40);
    //    9   13:lload_0         
    //   10   14:bipush          40
    //   11   16:lushr           
    //   12   17:l2i             
    //   13   18:istore          5
        l <<= 20;
    //   14   20:lload_0         
    //   15   21:bipush          20
    //   16   23:lshl            
    //   17   24:lstore_0        
        int k = (int)((long)j * (long)i >>> 26);
    //   18   25:iload           5
    //   19   27:i2l             
    //   20   28:iload           4
    //   21   30:i2l             
    //   22   31:lmul            
    //   23   32:bipush          26
    //   24   34:lushr           
    //   25   35:l2i             
    //   26   36:istore          6
        l -= (long)k * l1;
    //   27   38:lload_0         
    //   28   39:iload           6
    //   29   41:i2l             
    //   30   42:lload_2         
    //   31   43:lmul            
    //   32   44:lsub            
    //   33   45:lstore_0        
        long l2 = k;
    //   34   46:iload           6
    //   35   48:i2l             
    //   36   49:lstore          7
        j = (int)(l >>> 39);
    //   37   51:lload_0         
    //   38   52:bipush          39
    //   39   54:lushr           
    //   40   55:l2i             
    //   41   56:istore          5
        l <<= 21;
    //   42   58:lload_0         
    //   43   59:bipush          21
    //   44   61:lshl            
    //   45   62:lstore_0        
        k = (int)((long)j * (long)i >>> 26);
    //   46   63:iload           5
    //   47   65:i2l             
    //   48   66:iload           4
    //   49   68:i2l             
    //   50   69:lmul            
    //   51   70:bipush          26
    //   52   72:lushr           
    //   53   73:l2i             
    //   54   74:istore          6
        l -= (long)k * l1;
    //   55   76:lload_0         
    //   56   77:iload           6
    //   57   79:i2l             
    //   58   80:lload_2         
    //   59   81:lmul            
    //   60   82:lsub            
    //   61   83:lstore_0        
        l2 = (l2 << 21) + (long)k;
    //   62   84:lload           7
    //   63   86:bipush          21
    //   64   88:lshl            
    //   65   89:iload           6
    //   66   91:i2l             
    //   67   92:ladd            
    //   68   93:lstore          7
        j = (int)(l >>> 39);
    //   69   95:lload_0         
    //   70   96:bipush          39
    //   71   98:lushr           
    //   72   99:l2i             
    //   73  100:istore          5
        l <<= 21;
    //   74  102:lload_0         
    //   75  103:bipush          21
    //   76  105:lshl            
    //   77  106:lstore_0        
        k = (int)((long)j * (long)i >>> 26);
    //   78  107:iload           5
    //   79  109:i2l             
    //   80  110:iload           4
    //   81  112:i2l             
    //   82  113:lmul            
    //   83  114:bipush          26
    //   84  116:lushr           
    //   85  117:l2i             
    //   86  118:istore          6
        l -= (long)k * l1;
    //   87  120:lload_0         
    //   88  121:iload           6
    //   89  123:i2l             
    //   90  124:lload_2         
    //   91  125:lmul            
    //   92  126:lsub            
    //   93  127:lstore_0        
        l2 = (l2 << 21) + (long)k;
    //   94  128:lload           7
    //   95  130:bipush          21
    //   96  132:lshl            
    //   97  133:iload           6
    //   98  135:i2l             
    //   99  136:ladd            
    //  100  137:lstore          7
        if(l < 0L || l >= l1)
    //* 101  139:lload_0         
    //* 102  140:lconst_0        
    //* 103  141:lcmp            
    //* 104  142:iflt            151
    //* 105  145:lload_0         
    //* 106  146:lload_2         
    //* 107  147:lcmp            
    //* 108  148:iflt            161
        {
            l2++;
    //  109  151:lload           7
    //  110  153:lconst_1        
    //  111  154:ladd            
    //  112  155:lstore          7
            l -= l1;
    //  113  157:lload_0         
    //  114  158:lload_2         
    //  115  159:lsub            
    //  116  160:lstore_0        
        }
        l <<= 1;
    //  117  161:lload_0         
    //  118  162:iconst_1        
    //  119  163:lshl            
    //  120  164:lstore_0        
        if(l < 0L || l >= l1)
    //* 121  165:lload_0         
    //* 122  166:lconst_0        
    //* 123  167:lcmp            
    //* 124  168:iflt            177
    //* 125  171:lload_0         
    //* 126  172:lload_2         
    //* 127  173:lcmp            
    //* 128  174:iflt            183
            l2++;
    //  129  177:lload           7
    //  130  179:lconst_1        
    //  131  180:ladd            
    //  132  181:lstore          7
        return l2;
    //  133  183:lload           7
    //  134  185:lreturn         
    }

    // Decompiling method: div  Signature: (LReal;)V
    // Max stack: 5, #locals: 2, #params: 2
    // Code length: 287 bytes, Code offset: 15109
    // Parameter  0 added: Name this Type LReal; At 0 287 Range 0 286 Init 0 fixed
    // Parameter  1 added: Name real Type LReal; At 0 287 Range 0 286 Init 0
    // RetValue   2 added: Name <returnValue> Type V At 0 287 Range 0 286 Init 0 fixed
    public void div(Real real)
    {
        if(exponent < 0 && mantissa != 0L || real.exponent < 0 && real.mantissa != 0L)
    //*   0    0:aload_0         
    //*   1    1:getfield        #3   <Field int Real.exponent>
    //*   2    4:ifge            16
    //*   3    7:aload_0         
    //*   4    8:getfield        #2   <Field long Real.mantissa>
    //*   5   11:lconst_0        
    //*   6   12:lcmp            
    //*   7   13:ifne            32
    //*   8   16:aload_1         
    //*   9   17:getfield        #3   <Field int Real.exponent>
    //*  10   20:ifge            37
    //*  11   23:aload_1         
    //*  12   24:getfield        #2   <Field long Real.mantissa>
    //*  13   27:lconst_0        
    //*  14   28:lcmp            
    //*  15   29:ifeq            37
        {
            makeNan();
    //   16   32:aload_0         
    //   17   33:invokevirtual   #23  <Method void Real.makeNan()>
            return;
    //   18   36:return          
        }
        sign ^= real.sign;
    //   19   37:aload_0         
    //   20   38:dup             
    //   21   39:getfield        #4   <Field byte Real.sign>
    //   22   42:aload_1         
    //   23   43:getfield        #4   <Field byte Real.sign>
    //   24   46:ixor            
    //   25   47:int2byte        
    //   26   48:putfield        #4   <Field byte Real.sign>
        if(exponent < 0 && mantissa == 0L)
    //*  27   51:aload_0         
    //*  28   52:getfield        #3   <Field int Real.exponent>
    //*  29   55:ifge            88
    //*  30   58:aload_0         
    //*  31   59:getfield        #2   <Field long Real.mantissa>
    //*  32   62:lconst_0        
    //*  33   63:lcmp            
    //*  34   64:ifne            88
        {
            if(real.exponent < 0 && real.mantissa == 0L)
    //*  35   67:aload_1         
    //*  36   68:getfield        #3   <Field int Real.exponent>
    //*  37   71:ifge            87
    //*  38   74:aload_1         
    //*  39   75:getfield        #2   <Field long Real.mantissa>
    //*  40   78:lconst_0        
    //*  41   79:lcmp            
    //*  42   80:ifne            87
                makeNan();
    //   43   83:aload_0         
    //   44   84:invokevirtual   #23  <Method void Real.makeNan()>
            return;
    //   45   87:return          
        }
        if(real.exponent < 0 && real.mantissa == 0L)
    //*  46   88:aload_1         
    //*  47   89:getfield        #3   <Field int Real.exponent>
    //*  48   92:ifge            113
    //*  49   95:aload_1         
    //*  50   96:getfield        #2   <Field long Real.mantissa>
    //*  51   99:lconst_0        
    //*  52  100:lcmp            
    //*  53  101:ifne            113
        {
            makeZero(sign);
    //   54  104:aload_0         
    //   55  105:aload_0         
    //   56  106:getfield        #4   <Field byte Real.sign>
    //   57  109:invokevirtual   #25  <Method void Real.makeZero(int)>
            return;
    //   58  112:return          
        }
        if(exponent == 0 && mantissa == 0L)
    //*  59  113:aload_0         
    //*  60  114:getfield        #3   <Field int Real.exponent>
    //*  61  117:ifne            150
    //*  62  120:aload_0         
    //*  63  121:getfield        #2   <Field long Real.mantissa>
    //*  64  124:lconst_0        
    //*  65  125:lcmp            
    //*  66  126:ifne            150
        {
            if(real.exponent == 0 && real.mantissa == 0L)
    //*  67  129:aload_1         
    //*  68  130:getfield        #3   <Field int Real.exponent>
    //*  69  133:ifne            149
    //*  70  136:aload_1         
    //*  71  137:getfield        #2   <Field long Real.mantissa>
    //*  72  140:lconst_0        
    //*  73  141:lcmp            
    //*  74  142:ifne            149
                makeNan();
    //   75  145:aload_0         
    //   76  146:invokevirtual   #23  <Method void Real.makeNan()>
            return;
    //   77  149:return          
        }
        if(real.exponent == 0 && real.mantissa == 0L)
    //*  78  150:aload_1         
    //*  79  151:getfield        #3   <Field int Real.exponent>
    //*  80  154:ifne            175
    //*  81  157:aload_1         
    //*  82  158:getfield        #2   <Field long Real.mantissa>
    //*  83  161:lconst_0        
    //*  84  162:lcmp            
    //*  85  163:ifne            175
        {
            makeInfinity(sign);
    //   86  166:aload_0         
    //   87  167:aload_0         
    //   88  168:getfield        #4   <Field byte Real.sign>
    //   89  171:invokevirtual   #22  <Method void Real.makeInfinity(int)>
            return;
    //   90  174:return          
        }
        exponent += 0x40000000 - real.exponent;
    //   91  175:aload_0         
    //   92  176:dup             
    //   93  177:getfield        #3   <Field int Real.exponent>
    //   94  180:ldc1            #30  <Int 0x40000000>
    //   95  182:aload_1         
    //   96  183:getfield        #3   <Field int Real.exponent>
    //   97  186:isub            
    //   98  187:iadd            
    //   99  188:putfield        #3   <Field int Real.exponent>
        if(mantissa < real.mantissa)
    //* 100  191:aload_0         
    //* 101  192:getfield        #2   <Field long Real.mantissa>
    //* 102  195:aload_1         
    //* 103  196:getfield        #2   <Field long Real.mantissa>
    //* 104  199:lcmp            
    //* 105  200:ifge            223
        {
            mantissa <<= 1;
    //  106  203:aload_0         
    //  107  204:dup             
    //  108  205:getfield        #2   <Field long Real.mantissa>
    //  109  208:iconst_1        
    //  110  209:lshl            
    //  111  210:putfield        #2   <Field long Real.mantissa>
            exponent--;
    //  112  213:aload_0         
    //  113  214:dup             
    //  114  215:getfield        #3   <Field int Real.exponent>
    //  115  218:iconst_1        
    //  116  219:isub            
    //  117  220:putfield        #3   <Field int Real.exponent>
        }
        if(exponent < 0)
    //* 118  223:aload_0         
    //* 119  224:getfield        #3   <Field int Real.exponent>
    //* 120  227:ifge            259
        {
            if(real.exponent >= 0x40000000)
    //* 121  230:aload_1         
    //* 122  231:getfield        #3   <Field int Real.exponent>
    //* 123  234:ldc1            #30  <Int 0x40000000>
    //* 124  236:icmplt          250
                makeZero(sign);
    //  125  239:aload_0         
    //  126  240:aload_0         
    //  127  241:getfield        #4   <Field byte Real.sign>
    //  128  244:invokevirtual   #25  <Method void Real.makeZero(int)>
            else
    //* 129  247:goto            258
                makeInfinity(sign);
    //  130  250:aload_0         
    //  131  251:aload_0         
    //  132  252:getfield        #4   <Field byte Real.sign>
    //  133  255:invokevirtual   #22  <Method void Real.makeInfinity(int)>
            return;
    //  134  258:return          
        }
        if(real.mantissa == 0x4000000000000000L)
    //* 135  259:aload_1         
    //* 136  260:getfield        #2   <Field long Real.mantissa>
    //* 137  263:ldc2w           #20  <Long 0x4000000000000000L>
    //* 138  266:lcmp            
    //* 139  267:ifne            271
        {
            return;
    //  140  270:return          
        } else
        {
            mantissa = ldiv(mantissa, real.mantissa);
    //  141  271:aload_0         
    //  142  272:aload_0         
    //  143  273:getfield        #2   <Field long Real.mantissa>
    //  144  276:aload_1         
    //  145  277:getfield        #2   <Field long Real.mantissa>
    //  146  280:invokestatic    #58  <Method long Real.ldiv(long, long)>
    //  147  283:putfield        #2   <Field long Real.mantissa>
            return;
    //  148  286:return          
        }
    }

    // Decompiling method: recip  Signature: ()V
    // Max stack: 5, #locals: 1, #params: 1
    // Code length: 130 bytes, Code offset: 15598
    // Parameter  0 added: Name this Type LReal; At 0 130 Range 0 129 Init 0 fixed
    // RetValue   1 added: Name <returnValue> Type V At 0 130 Range 0 129 Init 0 fixed
    public void recip()
    {
        if(exponent < 0 && mantissa != 0L)
    //*   0    0:aload_0         
    //*   1    1:getfield        #3   <Field int Real.exponent>
    //*   2    4:ifge            17
    //*   3    7:aload_0         
    //*   4    8:getfield        #2   <Field long Real.mantissa>
    //*   5   11:lconst_0        
    //*   6   12:lcmp            
    //*   7   13:ifeq            17
            return;
    //    8   16:return          
        if(exponent < 0 && mantissa == 0L)
    //*   9   17:aload_0         
    //*  10   18:getfield        #3   <Field int Real.exponent>
    //*  11   21:ifge            42
    //*  12   24:aload_0         
    //*  13   25:getfield        #2   <Field long Real.mantissa>
    //*  14   28:lconst_0        
    //*  15   29:lcmp            
    //*  16   30:ifne            42
        {
            makeZero(sign);
    //   17   33:aload_0         
    //   18   34:aload_0         
    //   19   35:getfield        #4   <Field byte Real.sign>
    //   20   38:invokevirtual   #25  <Method void Real.makeZero(int)>
            return;
    //   21   41:return          
        }
        if(exponent == 0 && mantissa == 0L)
    //*  22   42:aload_0         
    //*  23   43:getfield        #3   <Field int Real.exponent>
    //*  24   46:ifne            67
    //*  25   49:aload_0         
    //*  26   50:getfield        #2   <Field long Real.mantissa>
    //*  27   53:lconst_0        
    //*  28   54:lcmp            
    //*  29   55:ifne            67
        {
            makeInfinity(sign);
    //   30   58:aload_0         
    //   31   59:aload_0         
    //   32   60:getfield        #4   <Field byte Real.sign>
    //   33   63:invokevirtual   #22  <Method void Real.makeInfinity(int)>
            return;
    //   34   66:return          
        }
        exponent = 0x80000000 - exponent;
    //   35   67:aload_0         
    //   36   68:ldc1            #24  <Int 0x80000000>
    //   37   70:aload_0         
    //   38   71:getfield        #3   <Field int Real.exponent>
    //   39   74:isub            
    //   40   75:putfield        #3   <Field int Real.exponent>
        if(mantissa == 0x4000000000000000L)
    //*  41   78:aload_0         
    //*  42   79:getfield        #2   <Field long Real.mantissa>
    //*  43   82:ldc2w           #20  <Long 0x4000000000000000L>
    //*  44   85:lcmp            
    //*  45   86:ifne            105
        {
            if(exponent < 0)
    //*  46   89:aload_0         
    //*  47   90:getfield        #3   <Field int Real.exponent>
    //*  48   93:ifge            104
                makeInfinity(sign);
    //   49   96:aload_0         
    //   50   97:aload_0         
    //   51   98:getfield        #4   <Field byte Real.sign>
    //   52  101:invokevirtual   #22  <Method void Real.makeInfinity(int)>
            return;
    //   53  104:return          
        } else
        {
            exponent--;
    //   54  105:aload_0         
    //   55  106:dup             
    //   56  107:getfield        #3   <Field int Real.exponent>
    //   57  110:iconst_1        
    //   58  111:isub            
    //   59  112:putfield        #3   <Field int Real.exponent>
            mantissa = ldiv(0x8000000000000000L, mantissa);
    //   60  115:aload_0         
    //   61  116:ldc2w           #59  <Long 0x8000000000000000L>
    //   62  119:aload_0         
    //   63  120:getfield        #2   <Field long Real.mantissa>
    //   64  123:invokestatic    #58  <Method long Real.ldiv(long, long)>
    //   65  126:putfield        #2   <Field long Real.mantissa>
            return;
    //   66  129:return          
        }
    }

    // Decompiling method: recip128  Signature: (J)J
    // Max stack: 6, #locals: 7, #params: 3
    // Code length: 271 bytes, Code offset: 15807
    // Parameter  0 added: Name this Type LReal; At 0 271 Range 0 270 Init 0 fixed
    // Parameter  1 added: Name l Type J At 0 271 Range 0 270 Init 0
    // RetValue   7 added: Name <returnValue> Type J At 0 271 Range 0 270 Init 0 fixed
    // LocalVar   3 added: Name byte0 Type B At 74 192 Range 74 265 Init 74
    // LocalVar   4 added: Name i Type I At 129 125 Range 129 253 Init 129
    // LocalVar   5 added: Name l1 Type J At 168 49 Range 168 216 Init 168
    public long recip128(long l)
    {
        if(exponent < 0 && mantissa != 0L)
    //*   0    0:aload_0         
    //*   1    1:getfield        #3   <Field int Real.exponent>
    //*   2    4:ifge            18
    //*   3    7:aload_0         
    //*   4    8:getfield        #2   <Field long Real.mantissa>
    //*   5   11:lconst_0        
    //*   6   12:lcmp            
    //*   7   13:ifeq            18
            return 0L;
    //    8   16:lconst_0        
    //    9   17:lreturn         
        if(exponent < 0 && mantissa == 0L)
    //*  10   18:aload_0         
    //*  11   19:getfield        #3   <Field int Real.exponent>
    //*  12   22:ifge            44
    //*  13   25:aload_0         
    //*  14   26:getfield        #2   <Field long Real.mantissa>
    //*  15   29:lconst_0        
    //*  16   30:lcmp            
    //*  17   31:ifne            44
        {
            makeZero(sign);
    //   18   34:aload_0         
    //   19   35:aload_0         
    //   20   36:getfield        #4   <Field byte Real.sign>
    //   21   39:invokevirtual   #25  <Method void Real.makeZero(int)>
            return 0L;
    //   22   42:lconst_0        
    //   23   43:lreturn         
        }
        if(exponent == 0 && mantissa == 0L)
    //*  24   44:aload_0         
    //*  25   45:getfield        #3   <Field int Real.exponent>
    //*  26   48:ifne            70
    //*  27   51:aload_0         
    //*  28   52:getfield        #2   <Field long Real.mantissa>
    //*  29   55:lconst_0        
    //*  30   56:lcmp            
    //*  31   57:ifne            70
        {
            makeInfinity(sign);
    //   32   60:aload_0         
    //   33   61:aload_0         
    //   34   62:getfield        #4   <Field byte Real.sign>
    //   35   65:invokevirtual   #22  <Method void Real.makeInfinity(int)>
            return 0L;
    //   36   68:lconst_0        
    //   37   69:lreturn         
        }
        byte byte0 = sign;
    //   38   70:aload_0         
    //   39   71:getfield        #4   <Field byte Real.sign>
    //   40   74:istore_3        
        sign = 0;
    //   41   75:aload_0         
    //   42   76:iconst_0        
    //   43   77:putfield        #4   <Field byte Real.sign>
        if(mantissa == 0x4000000000000000L && l == 0L)
    //*  44   80:aload_0         
    //*  45   81:getfield        #2   <Field long Real.mantissa>
    //*  46   84:ldc2w           #20  <Long 0x4000000000000000L>
    //*  47   87:lcmp            
    //*  48   88:ifne            122
    //*  49   91:lload_1         
    //*  50   92:lconst_0        
    //*  51   93:lcmp            
    //*  52   94:ifne            122
        {
            exponent = 0x80000000 - exponent;
    //   53   97:aload_0         
    //   54   98:ldc1            #24  <Int 0x80000000>
    //   55  100:aload_0         
    //   56  101:getfield        #3   <Field int Real.exponent>
    //   57  104:isub            
    //   58  105:putfield        #3   <Field int Real.exponent>
            if(exponent < 0)
    //*  59  108:aload_0         
    //*  60  109:getfield        #3   <Field int Real.exponent>
    //*  61  112:ifge            120
                makeInfinity(byte0);
    //   62  115:aload_0         
    //   63  116:iload_3         
    //   64  117:invokevirtual   #22  <Method void Real.makeInfinity(int)>
            return 0L;
    //   65  120:lconst_0        
    //   66  121:lreturn         
        }
        int i = 0x40000000 - exponent;
    //   67  122:ldc1            #30  <Int 0x40000000>
    //   68  124:aload_0         
    //   69  125:getfield        #3   <Field int Real.exponent>
    //   70  128:isub            
    //   71  129:istore          4
        exponent = 0x40000000;
    //   72  131:aload_0         
    //   73  132:ldc1            #30  <Int 0x40000000>
    //   74  134:putfield        #3   <Field int Real.exponent>
        recipTmp.mantissa = mantissa;
    //   75  137:getstatic       #61  <Field Real Real.recipTmp>
    //   76  140:aload_0         
    //   77  141:getfield        #2   <Field long Real.mantissa>
    //   78  144:putfield        #2   <Field long Real.mantissa>
        recipTmp.exponent = exponent;
    //   79  147:getstatic       #61  <Field Real Real.recipTmp>
    //   80  150:aload_0         
    //   81  151:getfield        #3   <Field int Real.exponent>
    //   82  154:putfield        #3   <Field int Real.exponent>
        recipTmp.sign = sign;
    //   83  157:getstatic       #61  <Field Real Real.recipTmp>
    //   84  160:aload_0         
    //   85  161:getfield        #4   <Field byte Real.sign>
    //   86  164:putfield        #4   <Field byte Real.sign>
        long l1 = l;
    //   87  167:lload_1         
    //   88  168:lstore          5
        recipTmp.neg();
    //   89  170:getstatic       #61  <Field Real Real.recipTmp>
    //   90  173:invokevirtual   #35  <Method void Real.neg()>
        recip();
    //   91  176:aload_0         
    //   92  177:invokevirtual   #62  <Method void Real.recip()>
        recipTmp2.mantissa = mantissa;
    //   93  180:getstatic       #63  <Field Real Real.recipTmp2>
    //   94  183:aload_0         
    //   95  184:getfield        #2   <Field long Real.mantissa>
    //   96  187:putfield        #2   <Field long Real.mantissa>
        recipTmp2.exponent = exponent;
    //   97  190:getstatic       #63  <Field Real Real.recipTmp2>
    //   98  193:aload_0         
    //   99  194:getfield        #3   <Field int Real.exponent>
    //  100  197:putfield        #3   <Field int Real.exponent>
        recipTmp2.sign = sign;
    //  101  200:getstatic       #63  <Field Real Real.recipTmp2>
    //  102  203:aload_0         
    //  103  204:getfield        #4   <Field byte Real.sign>
    //  104  207:putfield        #4   <Field byte Real.sign>
        l = mul128(0L, recipTmp, l1);
    //  105  210:aload_0         
    //  106  211:lconst_0        
    //  107  212:getstatic       #61  <Field Real Real.recipTmp>
    //  108  215:lload           5
    //  109  217:invokevirtual   #64  <Method long Real.mul128(long, Real, long)>
    //  110  220:lstore_1        
        l = add128(l, ONE, 0L);
    //  111  221:aload_0         
    //  112  222:lload_1         
    //  113  223:getstatic       #31  <Field Real Real.ONE>
    //  114  226:lconst_0        
    //  115  227:invokevirtual   #65  <Method long Real.add128(long, Real, long)>
    //  116  230:lstore_1        
        l = mul128(l, recipTmp2, 0L);
    //  117  231:aload_0         
    //  118  232:lload_1         
    //  119  233:getstatic       #63  <Field Real Real.recipTmp2>
    //  120  236:lconst_0        
    //  121  237:invokevirtual   #64  <Method long Real.mul128(long, Real, long)>
    //  122  240:lstore_1        
        l = add128(l, recipTmp2, 0L);
    //  123  241:aload_0         
    //  124  242:lload_1         
    //  125  243:getstatic       #63  <Field Real Real.recipTmp2>
    //  126  246:lconst_0        
    //  127  247:invokevirtual   #65  <Method long Real.add128(long, Real, long)>
    //  128  250:lstore_1        
        scalbn(i);
    //  129  251:aload_0         
    //  130  252:iload           4
    //  131  254:invokevirtual   #66  <Method void Real.scalbn(int)>
        if(!isNan())
    //* 132  257:aload_0         
    //* 133  258:invokevirtual   #67  <Method boolean Real.isNan()>
    //* 134  261:ifne            269
            sign = byte0;
    //  135  264:aload_0         
    //  136  265:iload_3         
    //  137  266:putfield        #4   <Field byte Real.sign>
        return l;
    //  138  269:lload_1         
    //  139  270:lreturn         
    }

    // Decompiling method: modInternal  Signature: (LReal;J)V
    // Max stack: 6, #locals: 6, #params: 4
    // Code length: 181 bytes, Code offset: 16177
    // Parameter  0 added: Name this Type LReal; At 0 181 Range 0 180 Init 0 fixed
    // Parameter  1 added: Name real Type LReal; At 0 181 Range 0 180 Init 0
    // Parameter  2 added: Name l Type J At 0 181 Range 0 180 Init 0
    // RetValue   6 added: Name <returnValue> Type V At 0 181 Range 0 180 Init 0 fixed
    // LocalVar   4 added: Name l1 Type J At 37 7 Range 37 43 Init 37
    // LocalVar   4 added: Name l2 Type J At 49 65 Range 49 113 Init 49
    // LocalVar   4 added: Name l3 Type J At 160 9 Range 160 168 Init 160
    // LocalVar   4 added: Name l4 Type J At 172 5 Range 172 176 Init 172
    // LocalVar   4 name l2(J) merged out into l1(J)
    // LocalVar   4 name l3(J) merged out into l1(J)
    // LocalVar   4 name l4(J) merged out into l1(J)
    private void modInternal(Real real, long l)
    {
        tmp0.mantissa = real.mantissa;
    //    0    0:getstatic       #46  <Field Real Real.tmp0>
    //    1    3:aload_1         
    //    2    4:getfield        #2   <Field long Real.mantissa>
    //    3    7:putfield        #2   <Field long Real.mantissa>
        tmp0.exponent = real.exponent;
    //    4   10:getstatic       #46  <Field Real Real.tmp0>
    //    5   13:aload_1         
    //    6   14:getfield        #3   <Field int Real.exponent>
    //    7   17:putfield        #3   <Field int Real.exponent>
        tmp0.sign = real.sign;
    //    8   20:getstatic       #46  <Field Real Real.tmp0>
    //    9   23:aload_1         
    //   10   24:getfield        #4   <Field byte Real.sign>
    //   11   27:putfield        #4   <Field byte Real.sign>
        long l1 = tmp0.recip128(l);
    //   12   30:getstatic       #46  <Field Real Real.tmp0>
    //   13   33:lload_2         
    //   14   34:invokevirtual   #68  <Method long Real.recip128(long)>
    //   15   37:lstore          4
        l1 = tmp0.mul128(l1, this, 0L);
    //   16   39:getstatic       #46  <Field Real Real.tmp0>
    //   17   42:lload           4
    //   18   44:aload_0         
    //   19   45:lconst_0        
    //   20   46:invokevirtual   #64  <Method long Real.mul128(long, Real, long)>
    //   21   49:lstore          4
        if(tmp0.exponent > 0x4000003e)
    //*  22   51:getstatic       #46  <Field Real Real.tmp0>
    //*  23   54:getfield        #3   <Field int Real.exponent>
    //*  24   57:ldc1            #32  <Int 0x4000003e>
    //*  25   59:icmple          71
        {
            makeZero(real.sign);
    //   26   62:aload_0         
    //   27   63:aload_1         
    //   28   64:getfield        #4   <Field byte Real.sign>
    //   29   67:invokevirtual   #25  <Method void Real.makeZero(int)>
            return;
    //   30   70:return          
        }
        if(tmp0.sign != 0 && (l1 < 0L || l1 > 31L) || tmp0.sign == 0 && l1 < 0L && l1 > -32L)
    //*  31   71:getstatic       #46  <Field Real Real.tmp0>
    //*  32   74:getfield        #4   <Field byte Real.sign>
    //*  33   77:ifeq            96
    //*  34   80:lload           4
    //*  35   82:lconst_0        
    //*  36   83:lcmp            
    //*  37   84:iflt            121
    //*  38   87:lload           4
    //*  39   89:ldc2w           #43  <Long 31L>
    //*  40   92:lcmp            
    //*  41   93:ifgt            121
    //*  42   96:getstatic       #46  <Field Real Real.tmp0>
    //*  43   99:getfield        #4   <Field byte Real.sign>
    //*  44  102:ifne            139
    //*  45  105:lload           4
    //*  46  107:lconst_0        
    //*  47  108:lcmp            
    //*  48  109:ifge            139
    //*  49  112:lload           4
    //*  50  114:ldc2w           #69  <Long -32L>
    //*  51  117:lcmp            
    //*  52  118:ifle            139
        {
            tmp0.mantissa++;
    //   53  121:getstatic       #46  <Field Real Real.tmp0>
    //   54  124:dup             
    //   55  125:getfield        #2   <Field long Real.mantissa>
    //   56  128:lconst_1        
    //   57  129:ladd            
    //   58  130:putfield        #2   <Field long Real.mantissa>
            tmp0.normalize();
    //   59  133:getstatic       #46  <Field Real Real.tmp0>
    //   60  136:invokevirtual   #18  <Method void Real.normalize()>
        }
        tmp0.floor();
    //   61  139:getstatic       #46  <Field Real Real.tmp0>
    //   62  142:invokevirtual   #36  <Method void Real.floor()>
        tmp0.neg();
    //   63  145:getstatic       #46  <Field Real Real.tmp0>
    //   64  148:invokevirtual   #35  <Method void Real.neg()>
        l1 = tmp0.mul128(0L, real, l);
    //   65  151:getstatic       #46  <Field Real Real.tmp0>
    //   66  154:lconst_0        
    //   67  155:aload_1         
    //   68  156:lload_2         
    //   69  157:invokevirtual   #64  <Method long Real.mul128(long, Real, long)>
    //   70  160:lstore          4
        l1 = add128(0L, tmp0, l1);
    //   71  162:aload_0         
    //   72  163:lconst_0        
    //   73  164:getstatic       #46  <Field Real Real.tmp0>
    //   74  167:lload           4
    //   75  169:invokevirtual   #65  <Method long Real.add128(long, Real, long)>
    //   76  172:lstore          4
        roundFrom128(l1);
    //   77  174:aload_0         
    //   78  175:lload           4
    //   79  177:invokevirtual   #71  <Method void Real.roundFrom128(long)>
        /* return; */
    //   80  180:return          
    }

    // Decompiling method: add  Signature: (I)V
    // Max stack: 2, #locals: 2, #params: 2
    // Code length: 15 bytes, Code offset: 16448
    // Parameter  0 added: Name this Type LReal; At 0 15 Range 0 14 Init 0 fixed
    // Parameter  1 added: Name i Type I At 0 15 Range 0 14 Init 0
    // RetValue   2 added: Name <returnValue> Type V At 0 15 Range 0 14 Init 0 fixed
    public void add(int i)
    {
        tmp0.assign(i);
    //    0    0:getstatic       #46  <Field Real Real.tmp0>
    //    1    3:iload_1         
    //    2    4:invokevirtual   #5   <Method void Real.assign(int)>
        add(tmp0);
    //    3    7:aload_0         
    //    4    8:getstatic       #46  <Field Real Real.tmp0>
    //    5   11:invokevirtual   #47  <Method void Real.add(Real)>
        /* return; */
    //    6   14:return          
    }

    // Decompiling method: rsqrtInternal  Signature: ()V
    // Max stack: 6, #locals: 5, #params: 1
    // Code length: 176 bytes, Code offset: 16489
    // Parameter  0 added: Name this Type LReal; At 0 176 Range 0 175 Init 0 fixed
    // RetValue   5 added: Name <returnValue> Type V At 0 176 Range 0 175 Init 0 fixed
    // LocalVar   3 added: Name flag Type Z At 64 19 Range 64 82 Init 64
    // LocalVar   4 added: Name flag1 Type Z At 94 77 Range 94 170 Init 94
    // LocalVar   4 chged: Name i Oname flag1 Type I At 169 2 Range 94 170 Init 94
    // LocalVar   1 hasn't been used
    // LocalVar   2 hasn't been used
    private void rsqrtInternal()
    {
        recipTmp.mantissa = mantissa;
    //    0    0:getstatic       #61  <Field Real Real.recipTmp>
    //    1    3:aload_0         
    //    2    4:getfield        #2   <Field long Real.mantissa>
    //    3    7:putfield        #2   <Field long Real.mantissa>
        recipTmp.exponent = exponent;
    //    4   10:getstatic       #61  <Field Real Real.recipTmp>
    //    5   13:aload_0         
    //    6   14:getfield        #3   <Field int Real.exponent>
    //    7   17:putfield        #3   <Field int Real.exponent>
        recipTmp.sign = sign;
    //    8   20:getstatic       #61  <Field Real Real.recipTmp>
    //    9   23:aload_0         
    //   10   24:getfield        #4   <Field byte Real.sign>
    //   11   27:putfield        #4   <Field byte Real.sign>
        recipTmp.neg();
    //   12   30:getstatic       #61  <Field Real Real.recipTmp>
    //   13   33:invokevirtual   #35  <Method void Real.neg()>
        mantissa = 0x4e60000000000000L - (mantissa >>> 2);
    //   14   36:aload_0         
    //   15   37:ldc2w           #72  <Long 0x4e60000000000000L>
    //   16   40:aload_0         
    //   17   41:getfield        #2   <Field long Real.mantissa>
    //   18   44:iconst_2        
    //   19   45:lushr           
    //   20   46:lsub            
    //   21   47:putfield        #2   <Field long Real.mantissa>
        boolean flag = (exponent & 1) != 0;
    //   22   50:aload_0         
    //   23   51:getfield        #3   <Field int Real.exponent>
    //   24   54:iconst_1        
    //   25   55:iand            
    //   26   56:ifeq            63
    //   27   59:iconst_1        
    //   28   60:goto            64
    //   29   63:iconst_0        
    //   30   64:istore_3        
        exponent = 0x60000000 - (exponent >> 1);
    //   31   65:aload_0         
    //   32   66:ldc1            #74  <Int 0x60000000>
    //   33   68:aload_0         
    //   34   69:getfield        #3   <Field int Real.exponent>
    //   35   72:iconst_1        
    //   36   73:ishr            
    //   37   74:isub            
    //   38   75:putfield        #3   <Field int Real.exponent>
        normalize();
    //   39   78:aload_0         
    //   40   79:invokevirtual   #18  <Method void Real.normalize()>
        if(flag)
    //*  41   82:iload_3         
    //*  42   83:ifeq            93
            mul(SQRT1_2);
    //   43   86:aload_0         
    //   44   87:getstatic       #75  <Field Real Real.SQRT1_2>
    //   45   90:invokevirtual   #76  <Method void Real.mul(Real)>
        for(int i = 0; i < 4; i++)
    //*  46   93:iconst_0        
    //*  47   94:istore          4
    //*  48   96:goto            169
        {
            recipTmp2.mantissa = mantissa;
    //   49   99:getstatic       #63  <Field Real Real.recipTmp2>
    //   50  102:aload_0         
    //   51  103:getfield        #2   <Field long Real.mantissa>
    //   52  106:putfield        #2   <Field long Real.mantissa>
            recipTmp2.exponent = exponent;
    //   53  109:getstatic       #63  <Field Real Real.recipTmp2>
    //   54  112:aload_0         
    //   55  113:getfield        #3   <Field int Real.exponent>
    //   56  116:putfield        #3   <Field int Real.exponent>
            recipTmp2.sign = sign;
    //   57  119:getstatic       #63  <Field Real Real.recipTmp2>
    //   58  122:aload_0         
    //   59  123:getfield        #4   <Field byte Real.sign>
    //   60  126:putfield        #4   <Field byte Real.sign>
            sqr();
    //   61  129:aload_0         
    //   62  130:invokevirtual   #77  <Method void Real.sqr()>
            mul(recipTmp);
    //   63  133:aload_0         
    //   64  134:getstatic       #61  <Field Real Real.recipTmp>
    //   65  137:invokevirtual   #76  <Method void Real.mul(Real)>
            add(ONE);
    //   66  140:aload_0         
    //   67  141:getstatic       #31  <Field Real Real.ONE>
    //   68  144:invokevirtual   #47  <Method void Real.add(Real)>
            scalbn(-1);
    //   69  147:aload_0         
    //   70  148:iconst_m1       
    //   71  149:invokevirtual   #66  <Method void Real.scalbn(int)>
            mul(recipTmp2);
    //   72  152:aload_0         
    //   73  153:getstatic       #63  <Field Real Real.recipTmp2>
    //   74  156:invokevirtual   #76  <Method void Real.mul(Real)>
            add(recipTmp2);
    //   75  159:aload_0         
    //   76  160:getstatic       #63  <Field Real Real.recipTmp2>
    //   77  163:invokevirtual   #47  <Method void Real.add(Real)>
        }

    //   78  166:iinc            4  1
    //   79  169:iload           4
    //   80  171:iconst_4        
    //   81  172:icmplt          99
        /* return; */
    //   82  175:return          
    }

    // Decompiling method: rsqrt  Signature: ()V
    // Max stack: 4, #locals: 1, #params: 1
    // Code length: 81 bytes, Code offset: 16756
    // Parameter  0 added: Name this Type LReal; At 0 81 Range 0 80 Init 0 fixed
    // RetValue   1 added: Name <returnValue> Type V At 0 81 Range 0 80 Init 0 fixed
    public void rsqrt()
    {
        if(exponent < 0 && mantissa != 0L)
    //*   0    0:aload_0         
    //*   1    1:getfield        #3   <Field int Real.exponent>
    //*   2    4:ifge            17
    //*   3    7:aload_0         
    //*   4    8:getfield        #2   <Field long Real.mantissa>
    //*   5   11:lconst_0        
    //*   6   12:lcmp            
    //*   7   13:ifeq            17
            return;
    //    8   16:return          
        if(exponent == 0 && mantissa == 0L)
    //*   9   17:aload_0         
    //*  10   18:getfield        #3   <Field int Real.exponent>
    //*  11   21:ifne            39
    //*  12   24:aload_0         
    //*  13   25:getfield        #2   <Field long Real.mantissa>
    //*  14   28:lconst_0        
    //*  15   29:lcmp            
    //*  16   30:ifne            39
        {
            makeInfinity(0);
    //   17   33:aload_0         
    //   18   34:iconst_0        
    //   19   35:invokevirtual   #22  <Method void Real.makeInfinity(int)>
            return;
    //   20   38:return          
        }
        if(sign != 0)
    //*  21   39:aload_0         
    //*  22   40:getfield        #4   <Field byte Real.sign>
    //*  23   43:ifeq            51
        {
            makeNan();
    //   24   46:aload_0         
    //   25   47:invokevirtual   #23  <Method void Real.makeNan()>
            return;
    //   26   50:return          
        }
        if(exponent < 0 && mantissa == 0L)
    //*  27   51:aload_0         
    //*  28   52:getfield        #3   <Field int Real.exponent>
    //*  29   55:ifge            76
    //*  30   58:aload_0         
    //*  31   59:getfield        #2   <Field long Real.mantissa>
    //*  32   62:lconst_0        
    //*  33   63:lcmp            
    //*  34   64:ifne            76
        {
            makeZero(sign);
    //   35   67:aload_0         
    //   36   68:aload_0         
    //   37   69:getfield        #4   <Field byte Real.sign>
    //   38   72:invokevirtual   #25  <Method void Real.makeZero(int)>
            return;
    //   39   75:return          
        } else
        {
            rsqrtInternal();
    //   40   76:aload_0         
    //   41   77:invokespecial   #78  <Method void Real.rsqrtInternal()>
            return;
    //   42   80:return          
        }
    }

    // Decompiling method: sqrt  Signature: ()V
    // Max stack: 4, #locals: 1, #params: 1
    // Code length: 112 bytes, Code offset: 16907
    // Parameter  0 added: Name this Type LReal; At 0 112 Range 0 111 Init 0 fixed
    // RetValue   1 added: Name <returnValue> Type V At 0 112 Range 0 111 Init 0 fixed
    public void sqrt()
    {
        if(exponent < 0 && mantissa != 0L)
    //*   0    0:aload_0         
    //*   1    1:getfield        #3   <Field int Real.exponent>
    //*   2    4:ifge            17
    //*   3    7:aload_0         
    //*   4    8:getfield        #2   <Field long Real.mantissa>
    //*   5   11:lconst_0        
    //*   6   12:lcmp            
    //*   7   13:ifeq            17
            return;
    //    8   16:return          
        if(exponent == 0 && mantissa == 0L)
    //*   9   17:aload_0         
    //*  10   18:getfield        #3   <Field int Real.exponent>
    //*  11   21:ifne            39
    //*  12   24:aload_0         
    //*  13   25:getfield        #2   <Field long Real.mantissa>
    //*  14   28:lconst_0        
    //*  15   29:lcmp            
    //*  16   30:ifne            39
        {
            sign = 0;
    //   17   33:aload_0         
    //   18   34:iconst_0        
    //   19   35:putfield        #4   <Field byte Real.sign>
            return;
    //   20   38:return          
        }
        if(sign != 0)
    //*  21   39:aload_0         
    //*  22   40:getfield        #4   <Field byte Real.sign>
    //*  23   43:ifeq            51
        {
            makeNan();
    //   24   46:aload_0         
    //   25   47:invokevirtual   #23  <Method void Real.makeNan()>
            return;
    //   26   50:return          
        }
        if(exponent < 0 && mantissa == 0L)
    //*  27   51:aload_0         
    //*  28   52:getfield        #3   <Field int Real.exponent>
    //*  29   55:ifge            68
    //*  30   58:aload_0         
    //*  31   59:getfield        #2   <Field long Real.mantissa>
    //*  32   62:lconst_0        
    //*  33   63:lcmp            
    //*  34   64:ifne            68
        {
            return;
    //   35   67:return          
        } else
        {
            sqrtTmp.mantissa = mantissa;
    //   36   68:getstatic       #79  <Field Real Real.sqrtTmp>
    //   37   71:aload_0         
    //   38   72:getfield        #2   <Field long Real.mantissa>
    //   39   75:putfield        #2   <Field long Real.mantissa>
            sqrtTmp.exponent = exponent;
    //   40   78:getstatic       #79  <Field Real Real.sqrtTmp>
    //   41   81:aload_0         
    //   42   82:getfield        #3   <Field int Real.exponent>
    //   43   85:putfield        #3   <Field int Real.exponent>
            sqrtTmp.sign = sign;
    //   44   88:getstatic       #79  <Field Real Real.sqrtTmp>
    //   45   91:aload_0         
    //   46   92:getfield        #4   <Field byte Real.sign>
    //   47   95:putfield        #4   <Field byte Real.sign>
            sqrtTmp.rsqrtInternal();
    //   48   98:getstatic       #79  <Field Real Real.sqrtTmp>
    //   49  101:invokespecial   #78  <Method void Real.rsqrtInternal()>
            mul(sqrtTmp);
    //   50  104:aload_0         
    //   51  105:getstatic       #79  <Field Real Real.sqrtTmp>
    //   52  108:invokevirtual   #76  <Method void Real.mul(Real)>
            return;
    //   53  111:return          
        }
    }

    // Decompiling method: exp2Internal  Signature: (J)V
    // Max stack: 6, #locals: 5, #params: 3
    // Code length: 373 bytes, Code offset: 17089
    // Parameter  0 added: Name this Type LReal; At 0 373 Range 0 372 Init 0 fixed
    // Parameter  1 added: Name l Type J At 0 373 Range 0 372 Init 0
    // RetValue   5 added: Name <returnValue> Type V At 0 373 Range 0 372 Init 0 fixed
    // LocalVar   3 added: Name i Type I At 168 200 Range 168 367 Init 168
    // LocalVar   4 added: Name byte0 Type B At 312 32 Range 312 343 Init 312
    // LocalVar   4 chged: Name j Oname byte0 Type I At 339 3 Range 312 343 Init 312
    private void exp2Internal(long l)
    {
        if(exponent < 0 && mantissa != 0L)
    //*   0    0:aload_0         
    //*   1    1:getfield        #3   <Field int Real.exponent>
    //*   2    4:ifge            17
    //*   3    7:aload_0         
    //*   4    8:getfield        #2   <Field long Real.mantissa>
    //*   5   11:lconst_0        
    //*   6   12:lcmp            
    //*   7   13:ifeq            17
            return;
    //    8   16:return          
        if(exponent < 0 && mantissa == 0L)
    //*   9   17:aload_0         
    //*  10   18:getfield        #3   <Field int Real.exponent>
    //*  11   21:ifge            46
    //*  12   24:aload_0         
    //*  13   25:getfield        #2   <Field long Real.mantissa>
    //*  14   28:lconst_0        
    //*  15   29:lcmp            
    //*  16   30:ifne            46
        {
            if(sign != 0)
    //*  17   33:aload_0         
    //*  18   34:getfield        #4   <Field byte Real.sign>
    //*  19   37:ifeq            45
                makeZero(0);
    //   20   40:aload_0         
    //   21   41:iconst_0        
    //   22   42:invokevirtual   #25  <Method void Real.makeZero(int)>
            return;
    //   23   45:return          
        }
        if(exponent == 0 && mantissa == 0L)
    //*  24   46:aload_0         
    //*  25   47:getfield        #3   <Field int Real.exponent>
    //*  26   50:ifne            93
    //*  27   53:aload_0         
    //*  28   54:getfield        #2   <Field long Real.mantissa>
    //*  29   57:lconst_0        
    //*  30   58:lcmp            
    //*  31   59:ifne            93
        {
            mantissa = ONE.mantissa;
    //   32   62:aload_0         
    //   33   63:getstatic       #31  <Field Real Real.ONE>
    //   34   66:getfield        #2   <Field long Real.mantissa>
    //   35   69:putfield        #2   <Field long Real.mantissa>
            exponent = ONE.exponent;
    //   36   72:aload_0         
    //   37   73:getstatic       #31  <Field Real Real.ONE>
    //   38   76:getfield        #3   <Field int Real.exponent>
    //   39   79:putfield        #3   <Field int Real.exponent>
            sign = ONE.sign;
    //   40   82:aload_0         
    //   41   83:getstatic       #31  <Field Real Real.ONE>
    //   42   86:getfield        #4   <Field byte Real.sign>
    //   43   89:putfield        #4   <Field byte Real.sign>
            return;
    //   44   92:return          
        }
        expTmp.mantissa = mantissa;
    //   45   93:getstatic       #80  <Field Real Real.expTmp>
    //   46   96:aload_0         
    //   47   97:getfield        #2   <Field long Real.mantissa>
    //   48  100:putfield        #2   <Field long Real.mantissa>
        expTmp.exponent = exponent;
    //   49  103:getstatic       #80  <Field Real Real.expTmp>
    //   50  106:aload_0         
    //   51  107:getfield        #3   <Field int Real.exponent>
    //   52  110:putfield        #3   <Field int Real.exponent>
        expTmp.sign = sign;
    //   53  113:getstatic       #80  <Field Real Real.expTmp>
    //   54  116:aload_0         
    //   55  117:getfield        #4   <Field byte Real.sign>
    //   56  120:putfield        #4   <Field byte Real.sign>
        if(expTmp.sign != 0 && l != 0L)
    //*  57  123:getstatic       #80  <Field Real Real.expTmp>
    //*  58  126:getfield        #4   <Field byte Real.sign>
    //*  59  129:ifeq            156
    //*  60  132:lload_1         
    //*  61  133:lconst_0        
    //*  62  134:lcmp            
    //*  63  135:ifeq            156
        {
            expTmp.mantissa++;
    //   64  138:getstatic       #80  <Field Real Real.expTmp>
    //   65  141:dup             
    //   66  142:getfield        #2   <Field long Real.mantissa>
    //   67  145:lconst_1        
    //   68  146:ladd            
    //   69  147:putfield        #2   <Field long Real.mantissa>
            expTmp.normalize();
    //   70  150:getstatic       #80  <Field Real Real.expTmp>
    //   71  153:invokevirtual   #18  <Method void Real.normalize()>
        }
        expTmp.floor();
    //   72  156:getstatic       #80  <Field Real Real.expTmp>
    //   73  159:invokevirtual   #36  <Method void Real.floor()>
        int i = expTmp.toInteger();
    //   74  162:getstatic       #80  <Field Real Real.expTmp>
    //   75  165:invokevirtual   #81  <Method int Real.toInteger()>
    //   76  168:istore_3        
        if(i >= 0x40000000)
    //*  77  169:iload_3         
    //*  78  170:ldc1            #30  <Int 0x40000000>
    //*  79  172:icmplt          184
        {
            makeInfinity(sign);
    //   80  175:aload_0         
    //   81  176:aload_0         
    //   82  177:getfield        #4   <Field byte Real.sign>
    //   83  180:invokevirtual   #22  <Method void Real.makeInfinity(int)>
            return;
    //   84  183:return          
        }
        if(i < 0xc0000000)
    //*  85  184:iload_3         
    //*  86  185:ldc1            #82  <Int 0xc0000000>
    //*  87  187:icmpge          199
        {
            makeZero(sign);
    //   88  190:aload_0         
    //   89  191:aload_0         
    //   90  192:getfield        #4   <Field byte Real.sign>
    //   91  195:invokevirtual   #25  <Method void Real.makeZero(int)>
            return;
    //   92  198:return          
        }
        expTmp.neg();
    //   93  199:getstatic       #80  <Field Real Real.expTmp>
    //   94  202:invokevirtual   #35  <Method void Real.neg()>
        l = add128(l, expTmp, 0L);
    //   95  205:aload_0         
    //   96  206:lload_1         
    //   97  207:getstatic       #80  <Field Real Real.expTmp>
    //   98  210:lconst_0        
    //   99  211:invokevirtual   #65  <Method long Real.add128(long, Real, long)>
    //  100  214:lstore_1        
        expTmp.assign(0, 0x3fffffff, 0x58b90bfbe8e7bcd5L);
    //  101  215:getstatic       #80  <Field Real Real.expTmp>
    //  102  218:iconst_0        
    //  103  219:ldc1            #37  <Int 0x3fffffff>
    //  104  221:ldc2w           #83  <Long 0x58b90bfbe8e7bcd5L>
    //  105  224:invokevirtual   #7   <Method void Real.assign(int, int, long)>
        l = mul128(l, expTmp, 0xe4f1d9cc01f97b58L);
    //  106  227:aload_0         
    //  107  228:lload_1         
    //  108  229:getstatic       #80  <Field Real Real.expTmp>
    //  109  232:ldc2w           #85  <Long 0xe4f1d9cc01f97b58L>
    //  110  235:invokevirtual   #64  <Method long Real.mul128(long, Real, long)>
    //  111  238:lstore_1        
        roundFrom128(l);
    //  112  239:aload_0         
    //  113  240:lload_1         
    //  114  241:invokevirtual   #71  <Method void Real.roundFrom128(long)>
        expTmp.mantissa = mantissa;
    //  115  244:getstatic       #80  <Field Real Real.expTmp>
    //  116  247:aload_0         
    //  117  248:getfield        #2   <Field long Real.mantissa>
    //  118  251:putfield        #2   <Field long Real.mantissa>
        expTmp.exponent = exponent;
    //  119  254:getstatic       #80  <Field Real Real.expTmp>
    //  120  257:aload_0         
    //  121  258:getfield        #3   <Field int Real.exponent>
    //  122  261:putfield        #3   <Field int Real.exponent>
        expTmp.sign = sign;
    //  123  264:getstatic       #80  <Field Real Real.expTmp>
    //  124  267:aload_0         
    //  125  268:getfield        #4   <Field byte Real.sign>
    //  126  271:putfield        #4   <Field byte Real.sign>
        expTmp2.mantissa = ONE.mantissa;
    //  127  274:getstatic       #87  <Field Real Real.expTmp2>
    //  128  277:getstatic       #31  <Field Real Real.ONE>
    //  129  280:getfield        #2   <Field long Real.mantissa>
    //  130  283:putfield        #2   <Field long Real.mantissa>
        expTmp2.exponent = ONE.exponent;
    //  131  286:getstatic       #87  <Field Real Real.expTmp2>
    //  132  289:getstatic       #31  <Field Real Real.ONE>
    //  133  292:getfield        #3   <Field int Real.exponent>
    //  134  295:putfield        #3   <Field int Real.exponent>
        expTmp2.sign = ONE.sign;
    //  135  298:getstatic       #87  <Field Real Real.expTmp2>
    //  136  301:getstatic       #31  <Field Real Real.ONE>
    //  137  304:getfield        #4   <Field byte Real.sign>
    //  138  307:putfield        #4   <Field byte Real.sign>
        for(int j = 18; j >= 2; j--)
    //* 139  310:bipush          18
    //* 140  312:istore          4
    //* 141  314:goto            342
        {
            expTmp2.mul(j);
    //  142  317:getstatic       #87  <Field Real Real.expTmp2>
    //  143  320:iload           4
    //  144  322:invokevirtual   #88  <Method void Real.mul(int)>
            add(expTmp2);
    //  145  325:aload_0         
    //  146  326:getstatic       #87  <Field Real Real.expTmp2>
    //  147  329:invokevirtual   #47  <Method void Real.add(Real)>
            mul(expTmp);
    //  148  332:aload_0         
    //  149  333:getstatic       #80  <Field Real Real.expTmp>
    //  150  336:invokevirtual   #76  <Method void Real.mul(Real)>
        }

    //  151  339:iinc            4  -1
    //  152  342:iload           4
    //  153  344:iconst_2        
    //  154  345:icmpge          317
        div(expTmp2);
    //  155  348:aload_0         
    //  156  349:getstatic       #87  <Field Real Real.expTmp2>
    //  157  352:invokevirtual   #89  <Method void Real.div(Real)>
        add(ONE);
    //  158  355:aload_0         
    //  159  356:getstatic       #31  <Field Real Real.ONE>
    //  160  359:invokevirtual   #47  <Method void Real.add(Real)>
        exponent += i;
    //  161  362:aload_0         
    //  162  363:dup             
    //  163  364:getfield        #3   <Field int Real.exponent>
    //  164  367:iload_3         
    //  165  368:iadd            
    //  166  369:putfield        #3   <Field int Real.exponent>
        /* return; */
    //  167  372:return          
    }

    // Decompiling method: exp  Signature: ()V
    // Max stack: 6, #locals: 3, #params: 1
    // Code length: 30 bytes, Code offset: 17592
    // Parameter  0 added: Name this Type LReal; At 0 30 Range 0 29 Init 0 fixed
    // RetValue   3 added: Name <returnValue> Type V At 0 30 Range 0 29 Init 0 fixed
    // LocalVar   1 added: Name l Type J At 23 3 Range 23 25 Init 23
    public void exp()
    {
        expTmp.assign(0, 0x40000000, 0x5c551d94ae0bf85dL);
    //    0    0:getstatic       #80  <Field Real Real.expTmp>
    //    1    3:iconst_0        
    //    2    4:ldc1            #30  <Int 0x40000000>
    //    3    6:ldc2w           #90  <Long 0x5c551d94ae0bf85dL>
    //    4    9:invokevirtual   #7   <Method void Real.assign(int, int, long)>
        long l = mul128(0L, expTmp, 0xdf43ff68348e9f44L);
    //    5   12:aload_0         
    //    6   13:lconst_0        
    //    7   14:getstatic       #80  <Field Real Real.expTmp>
    //    8   17:ldc2w           #92  <Long 0xdf43ff68348e9f44L>
    //    9   20:invokevirtual   #64  <Method long Real.mul128(long, Real, long)>
    //   10   23:lstore_1        
        exp2Internal(l);
    //   11   24:aload_0         
    //   12   25:lload_1         
    //   13   26:invokespecial   #94  <Method void Real.exp2Internal(long)>
        /* return; */
    //   14   29:return          
    }

    // Decompiling method: lnInternal  Signature: ()V
    // Max stack: 3, #locals: 2, #params: 1
    // Code length: 247 bytes, Code offset: 17648
    // Parameter  0 added: Name this Type LReal; At 0 247 Range 0 246 Init 0 fixed
    // RetValue   2 added: Name <returnValue> Type V At 0 247 Range 0 246 Init 0 fixed
    // LocalVar   1 added: Name byte0 Type B At 187 36 Range 187 222 Init 187
    // LocalVar   1 chged: Name i Oname byte0 Type I At 219 3 Range 187 222 Init 187
    private void lnInternal()
    {
        expTmp.mantissa = mantissa;
    //    0    0:getstatic       #80  <Field Real Real.expTmp>
    //    1    3:aload_0         
    //    2    4:getfield        #2   <Field long Real.mantissa>
    //    3    7:putfield        #2   <Field long Real.mantissa>
        expTmp.exponent = exponent;
    //    4   10:getstatic       #80  <Field Real Real.expTmp>
    //    5   13:aload_0         
    //    6   14:getfield        #3   <Field int Real.exponent>
    //    7   17:putfield        #3   <Field int Real.exponent>
        expTmp.sign = sign;
    //    8   20:getstatic       #80  <Field Real Real.expTmp>
    //    9   23:aload_0         
    //   10   24:getfield        #4   <Field byte Real.sign>
    //   11   27:putfield        #4   <Field byte Real.sign>
        expTmp.add(ONE);
    //   12   30:getstatic       #80  <Field Real Real.expTmp>
    //   13   33:getstatic       #31  <Field Real Real.ONE>
    //   14   36:invokevirtual   #47  <Method void Real.add(Real)>
        sub(ONE);
    //   15   39:aload_0         
    //   16   40:getstatic       #31  <Field Real Real.ONE>
    //   17   43:invokevirtual   #95  <Method void Real.sub(Real)>
        div(expTmp);
    //   18   46:aload_0         
    //   19   47:getstatic       #80  <Field Real Real.expTmp>
    //   20   50:invokevirtual   #89  <Method void Real.div(Real)>
        expTmp.mantissa = mantissa;
    //   21   53:getstatic       #80  <Field Real Real.expTmp>
    //   22   56:aload_0         
    //   23   57:getfield        #2   <Field long Real.mantissa>
    //   24   60:putfield        #2   <Field long Real.mantissa>
        expTmp.exponent = exponent;
    //   25   63:getstatic       #80  <Field Real Real.expTmp>
    //   26   66:aload_0         
    //   27   67:getfield        #3   <Field int Real.exponent>
    //   28   70:putfield        #3   <Field int Real.exponent>
        expTmp.sign = sign;
    //   29   73:getstatic       #80  <Field Real Real.expTmp>
    //   30   76:aload_0         
    //   31   77:getfield        #4   <Field byte Real.sign>
    //   32   80:putfield        #4   <Field byte Real.sign>
        expTmp2.mantissa = mantissa;
    //   33   83:getstatic       #87  <Field Real Real.expTmp2>
    //   34   86:aload_0         
    //   35   87:getfield        #2   <Field long Real.mantissa>
    //   36   90:putfield        #2   <Field long Real.mantissa>
        expTmp2.exponent = exponent;
    //   37   93:getstatic       #87  <Field Real Real.expTmp2>
    //   38   96:aload_0         
    //   39   97:getfield        #3   <Field int Real.exponent>
    //   40  100:putfield        #3   <Field int Real.exponent>
        expTmp2.sign = sign;
    //   41  103:getstatic       #87  <Field Real Real.expTmp2>
    //   42  106:aload_0         
    //   43  107:getfield        #4   <Field byte Real.sign>
    //   44  110:putfield        #4   <Field byte Real.sign>
        expTmp2.sqr();
    //   45  113:getstatic       #87  <Field Real Real.expTmp2>
    //   46  116:invokevirtual   #77  <Method void Real.sqr()>
        mantissa = ONE.mantissa;
    //   47  119:aload_0         
    //   48  120:getstatic       #31  <Field Real Real.ONE>
    //   49  123:getfield        #2   <Field long Real.mantissa>
    //   50  126:putfield        #2   <Field long Real.mantissa>
        exponent = ONE.exponent;
    //   51  129:aload_0         
    //   52  130:getstatic       #31  <Field Real Real.ONE>
    //   53  133:getfield        #3   <Field int Real.exponent>
    //   54  136:putfield        #3   <Field int Real.exponent>
        sign = ONE.sign;
    //   55  139:aload_0         
    //   56  140:getstatic       #31  <Field Real Real.ONE>
    //   57  143:getfield        #4   <Field byte Real.sign>
    //   58  146:putfield        #4   <Field byte Real.sign>
        expTmp3.mantissa = ONE.mantissa;
    //   59  149:getstatic       #96  <Field Real Real.expTmp3>
    //   60  152:getstatic       #31  <Field Real Real.ONE>
    //   61  155:getfield        #2   <Field long Real.mantissa>
    //   62  158:putfield        #2   <Field long Real.mantissa>
        expTmp3.exponent = ONE.exponent;
    //   63  161:getstatic       #96  <Field Real Real.expTmp3>
    //   64  164:getstatic       #31  <Field Real Real.ONE>
    //   65  167:getfield        #3   <Field int Real.exponent>
    //   66  170:putfield        #3   <Field int Real.exponent>
        expTmp3.sign = ONE.sign;
    //   67  173:getstatic       #96  <Field Real Real.expTmp3>
    //   68  176:getstatic       #31  <Field Real Real.ONE>
    //   69  179:getfield        #4   <Field byte Real.sign>
    //   70  182:putfield        #4   <Field byte Real.sign>
        for(int i = 37; i >= 3; i -= 2)
    //*  71  185:bipush          37
    //*  72  187:istore_1        
    //*  73  188:goto            222
        {
            mul(expTmp2);
    //   74  191:aload_0         
    //   75  192:getstatic       #87  <Field Real Real.expTmp2>
    //   76  195:invokevirtual   #76  <Method void Real.mul(Real)>
            mul(i - 2);
    //   77  198:aload_0         
    //   78  199:iload_1         
    //   79  200:iconst_2        
    //   80  201:isub            
    //   81  202:invokevirtual   #88  <Method void Real.mul(int)>
            expTmp3.mul(i);
    //   82  205:getstatic       #96  <Field Real Real.expTmp3>
    //   83  208:iload_1         
    //   84  209:invokevirtual   #88  <Method void Real.mul(int)>
            add(expTmp3);
    //   85  212:aload_0         
    //   86  213:getstatic       #96  <Field Real Real.expTmp3>
    //   87  216:invokevirtual   #47  <Method void Real.add(Real)>
        }

    //   88  219:iinc            1  -2
    //   89  222:iload_1         
    //   90  223:iconst_3        
    //   91  224:icmpge          191
        mul(expTmp);
    //   92  227:aload_0         
    //   93  228:getstatic       #80  <Field Real Real.expTmp>
    //   94  231:invokevirtual   #76  <Method void Real.mul(Real)>
        div(expTmp3);
    //   95  234:aload_0         
    //   96  235:getstatic       #96  <Field Real Real.expTmp3>
    //   97  238:invokevirtual   #89  <Method void Real.div(Real)>
        scalbn(1);
    //   98  241:aload_0         
    //   99  242:iconst_1        
    //  100  243:invokevirtual   #66  <Method void Real.scalbn(int)>
        /* return; */
    //  101  246:return          
    }

    // Decompiling method: ln  Signature: ()V
    // Max stack: 4, #locals: 2, #params: 1
    // Code length: 110 bytes, Code offset: 17949
    // Parameter  0 added: Name this Type LReal; At 0 110 Range 0 109 Init 0 fixed
    // RetValue   2 added: Name <returnValue> Type V At 0 110 Range 0 109 Init 0 fixed
    // LocalVar   1 added: Name i Type I At 75 15 Range 75 89 Init 75
    public void ln()
    {
        if(exponent < 0 && mantissa != 0L)
    //*   0    0:aload_0         
    //*   1    1:getfield        #3   <Field int Real.exponent>
    //*   2    4:ifge            17
    //*   3    7:aload_0         
    //*   4    8:getfield        #2   <Field long Real.mantissa>
    //*   5   11:lconst_0        
    //*   6   12:lcmp            
    //*   7   13:ifeq            17
            return;
    //    8   16:return          
        if(sign != 0)
    //*   9   17:aload_0         
    //*  10   18:getfield        #4   <Field byte Real.sign>
    //*  11   21:ifeq            29
        {
            makeNan();
    //   12   24:aload_0         
    //   13   25:invokevirtual   #23  <Method void Real.makeNan()>
            return;
    //   14   28:return          
        }
        if(exponent == 0 && mantissa == 0L)
    //*  15   29:aload_0         
    //*  16   30:getfield        #3   <Field int Real.exponent>
    //*  17   33:ifne            51
    //*  18   36:aload_0         
    //*  19   37:getfield        #2   <Field long Real.mantissa>
    //*  20   40:lconst_0        
    //*  21   41:lcmp            
    //*  22   42:ifne            51
        {
            makeInfinity(1);
    //   23   45:aload_0         
    //   24   46:iconst_1        
    //   25   47:invokevirtual   #22  <Method void Real.makeInfinity(int)>
            return;
    //   26   50:return          
        }
        if(exponent < 0 && mantissa == 0L)
    //*  27   51:aload_0         
    //*  28   52:getfield        #3   <Field int Real.exponent>
    //*  29   55:ifge            68
    //*  30   58:aload_0         
    //*  31   59:getfield        #2   <Field long Real.mantissa>
    //*  32   62:lconst_0        
    //*  33   63:lcmp            
    //*  34   64:ifne            68
        {
            return;
    //   35   67:return          
        } else
        {
            int i = exponent - 0x40000000;
    //   36   68:aload_0         
    //   37   69:getfield        #3   <Field int Real.exponent>
    //   38   72:ldc1            #30  <Int 0x40000000>
    //   39   74:isub            
    //   40   75:istore_1        
            exponent = 0x40000000;
    //   41   76:aload_0         
    //   42   77:ldc1            #30  <Int 0x40000000>
    //   43   79:putfield        #3   <Field int Real.exponent>
            lnInternal();
    //   44   82:aload_0         
    //   45   83:invokespecial   #97  <Method void Real.lnInternal()>
            expTmp.assign(i);
    //   46   86:getstatic       #80  <Field Real Real.expTmp>
    //   47   89:iload_1         
    //   48   90:invokevirtual   #5   <Method void Real.assign(int)>
            expTmp.mul(LN2);
    //   49   93:getstatic       #80  <Field Real Real.expTmp>
    //   50   96:getstatic       #98  <Field Real Real.LN2>
    //   51   99:invokevirtual   #76  <Method void Real.mul(Real)>
            add(expTmp);
    //   52  102:aload_0         
    //   53  103:getstatic       #80  <Field Real Real.expTmp>
    //   54  106:invokevirtual   #47  <Method void Real.add(Real)>
            return;
    //   55  109:return          
        }
    }

    // Decompiling method: log10  Signature: ()V
    // Max stack: 4, #locals: 2, #params: 1
    // Code length: 117 bytes, Code offset: 18129
    // Parameter  0 added: Name this Type LReal; At 0 117 Range 0 116 Init 0 fixed
    // RetValue   2 added: Name <returnValue> Type V At 0 117 Range 0 116 Init 0 fixed
    // LocalVar   1 added: Name i Type I At 75 15 Range 75 89 Init 75
    public void log10()
    {
        if(exponent < 0 && mantissa != 0L)
    //*   0    0:aload_0         
    //*   1    1:getfield        #3   <Field int Real.exponent>
    //*   2    4:ifge            17
    //*   3    7:aload_0         
    //*   4    8:getfield        #2   <Field long Real.mantissa>
    //*   5   11:lconst_0        
    //*   6   12:lcmp            
    //*   7   13:ifeq            17
            return;
    //    8   16:return          
        if(sign != 0)
    //*   9   17:aload_0         
    //*  10   18:getfield        #4   <Field byte Real.sign>
    //*  11   21:ifeq            29
        {
            makeNan();
    //   12   24:aload_0         
    //   13   25:invokevirtual   #23  <Method void Real.makeNan()>
            return;
    //   14   28:return          
        }
        if(exponent == 0 && mantissa == 0L)
    //*  15   29:aload_0         
    //*  16   30:getfield        #3   <Field int Real.exponent>
    //*  17   33:ifne            51
    //*  18   36:aload_0         
    //*  19   37:getfield        #2   <Field long Real.mantissa>
    //*  20   40:lconst_0        
    //*  21   41:lcmp            
    //*  22   42:ifne            51
        {
            makeInfinity(1);
    //   23   45:aload_0         
    //   24   46:iconst_1        
    //   25   47:invokevirtual   #22  <Method void Real.makeInfinity(int)>
            return;
    //   26   50:return          
        }
        if(exponent < 0 && mantissa == 0L)
    //*  27   51:aload_0         
    //*  28   52:getfield        #3   <Field int Real.exponent>
    //*  29   55:ifge            68
    //*  30   58:aload_0         
    //*  31   59:getfield        #2   <Field long Real.mantissa>
    //*  32   62:lconst_0        
    //*  33   63:lcmp            
    //*  34   64:ifne            68
        {
            return;
    //   35   67:return          
        } else
        {
            int i = exponent - 0x40000000;
    //   36   68:aload_0         
    //   37   69:getfield        #3   <Field int Real.exponent>
    //   38   72:ldc1            #30  <Int 0x40000000>
    //   39   74:isub            
    //   40   75:istore_1        
            exponent = 0x40000000;
    //   41   76:aload_0         
    //   42   77:ldc1            #30  <Int 0x40000000>
    //   43   79:putfield        #3   <Field int Real.exponent>
            lnInternal();
    //   44   82:aload_0         
    //   45   83:invokespecial   #97  <Method void Real.lnInternal()>
            expTmp.assign(i);
    //   46   86:getstatic       #80  <Field Real Real.expTmp>
    //   47   89:iload_1         
    //   48   90:invokevirtual   #5   <Method void Real.assign(int)>
            expTmp.mul(LN2);
    //   49   93:getstatic       #80  <Field Real Real.expTmp>
    //   50   96:getstatic       #98  <Field Real Real.LN2>
    //   51   99:invokevirtual   #76  <Method void Real.mul(Real)>
            add(expTmp);
    //   52  102:aload_0         
    //   53  103:getstatic       #80  <Field Real Real.expTmp>
    //   54  106:invokevirtual   #47  <Method void Real.add(Real)>
            mul(LOG10E);
    //   55  109:aload_0         
    //   56  110:getstatic       #99  <Field Real Real.LOG10E>
    //   57  113:invokevirtual   #76  <Method void Real.mul(Real)>
            return;
    //   58  116:return          
        }
    }

    // Decompiling method: lowPow10  Signature: ()I
    // Max stack: 4, #locals: 2, #params: 1
    // Code length: 209 bytes, Code offset: 18316
    // Parameter  0 added: Name this Type LReal; At 0 209 Range 0 208 Init 0 fixed
    // RetValue   2 added: Name <returnValue> Type I At 0 209 Range 0 208 Init 0 fixed
    // LocalVar   1 added: Name i Type I At 55 26 Range 55 80 Init 55
    public int lowPow10()
    {
        if(exponent < 0 || mantissa == 0L)
    //*   0    0:aload_0         
    //*   1    1:getfield        #3   <Field int Real.exponent>
    //*   2    4:iflt            16
    //*   3    7:aload_0         
    //*   4    8:getfield        #2   <Field long Real.mantissa>
    //*   5   11:lconst_0        
    //*   6   12:lcmp            
    //*   7   13:ifne            18
            return 0;
    //    8   16:iconst_0        
    //    9   17:ireturn         
        tmp2.mantissa = mantissa;
    //   10   18:getstatic       #100 <Field Real Real.tmp2>
    //   11   21:aload_0         
    //   12   22:getfield        #2   <Field long Real.mantissa>
    //   13   25:putfield        #2   <Field long Real.mantissa>
        tmp2.exponent = exponent;
    //   14   28:getstatic       #100 <Field Real Real.tmp2>
    //   15   31:aload_0         
    //   16   32:getfield        #3   <Field int Real.exponent>
    //   17   35:putfield        #3   <Field int Real.exponent>
        tmp2.sign = sign;
    //   18   38:getstatic       #100 <Field Real Real.tmp2>
    //   19   41:aload_0         
    //   20   42:getfield        #4   <Field byte Real.sign>
    //   21   45:putfield        #4   <Field byte Real.sign>
        int i = exponent - 0x40000000;
    //   22   48:aload_0         
    //   23   49:getfield        #3   <Field int Real.exponent>
    //   24   52:ldc1            #30  <Int 0x40000000>
    //   25   54:isub            
    //   26   55:istore_1        
        if(i < 0)
    //*  27   56:iload_1         
    //*  28   57:ifge            80
            i = -(int)((long)(-i) * 0x4d104d43L + 0xffffffffL >> 32);
    //   29   60:iload_1         
    //   30   61:ineg            
    //   31   62:i2l             
    //   32   63:ldc2w           #101 <Long 0x4d104d43L>
    //   33   66:lmul            
    //   34   67:ldc2w           #50  <Long 0xffffffffL>
    //   35   70:ladd            
    //   36   71:bipush          32
    //   37   73:lshr            
    //   38   74:l2i             
    //   39   75:ineg            
    //   40   76:istore_1        
        else
    //*  41   77:goto            91
            i = (int)((long)i * 0x4d104d43L >> 32);
    //   42   80:iload_1         
    //   43   81:i2l             
    //   44   82:ldc2w           #101 <Long 0x4d104d43L>
    //   45   85:lmul            
    //   46   86:bipush          32
    //   47   88:lshr            
    //   48   89:l2i             
    //   49   90:istore_1        
        mantissa = TEN.mantissa;
    //   50   91:aload_0         
    //   51   92:getstatic       #103 <Field Real Real.TEN>
    //   52   95:getfield        #2   <Field long Real.mantissa>
    //   53   98:putfield        #2   <Field long Real.mantissa>
        exponent = TEN.exponent;
    //   54  101:aload_0         
    //   55  102:getstatic       #103 <Field Real Real.TEN>
    //   56  105:getfield        #3   <Field int Real.exponent>
    //   57  108:putfield        #3   <Field int Real.exponent>
        sign = TEN.sign;
    //   58  111:aload_0         
    //   59  112:getstatic       #103 <Field Real Real.TEN>
    //   60  115:getfield        #4   <Field byte Real.sign>
    //   61  118:putfield        #4   <Field byte Real.sign>
        pow(i);
    //   62  121:aload_0         
    //   63  122:iload_1         
    //   64  123:invokevirtual   #104 <Method void Real.pow(int)>
        tmp3.mantissa = mantissa;
    //   65  126:getstatic       #105 <Field Real Real.tmp3>
    //   66  129:aload_0         
    //   67  130:getfield        #2   <Field long Real.mantissa>
    //   68  133:putfield        #2   <Field long Real.mantissa>
        tmp3.exponent = exponent;
    //   69  136:getstatic       #105 <Field Real Real.tmp3>
    //   70  139:aload_0         
    //   71  140:getfield        #3   <Field int Real.exponent>
    //   72  143:putfield        #3   <Field int Real.exponent>
        tmp3.sign = sign;
    //   73  146:getstatic       #105 <Field Real Real.tmp3>
    //   74  149:aload_0         
    //   75  150:getfield        #4   <Field byte Real.sign>
    //   76  153:putfield        #4   <Field byte Real.sign>
        tmp3.mul10();
    //   77  156:getstatic       #105 <Field Real Real.tmp3>
    //   78  159:invokespecial   #106 <Method void Real.mul10()>
        if(tmp3.compare(tmp2) <= 0)
    //*  79  162:getstatic       #105 <Field Real Real.tmp3>
    //*  80  165:getstatic       #100 <Field Real Real.tmp2>
    //*  81  168:invokespecial   #27  <Method int Real.compare(Real)>
    //*  82  171:ifgt            207
        {
            i++;
    //   83  174:iinc            1  1
            mantissa = tmp3.mantissa;
    //   84  177:aload_0         
    //   85  178:getstatic       #105 <Field Real Real.tmp3>
    //   86  181:getfield        #2   <Field long Real.mantissa>
    //   87  184:putfield        #2   <Field long Real.mantissa>
            exponent = tmp3.exponent;
    //   88  187:aload_0         
    //   89  188:getstatic       #105 <Field Real Real.tmp3>
    //   90  191:getfield        #3   <Field int Real.exponent>
    //   91  194:putfield        #3   <Field int Real.exponent>
            sign = tmp3.sign;
    //   92  197:aload_0         
    //   93  198:getstatic       #105 <Field Real Real.tmp3>
    //   94  201:getfield        #4   <Field byte Real.sign>
    //   95  204:putfield        #4   <Field byte Real.sign>
        }
        return i;
    //   96  207:iload_1         
    //   97  208:ireturn         
    }

    // Decompiling method: pow  Signature: (I)V
    // Max stack: 6, #locals: 7, #params: 2
    // Code length: 135 bytes, Code offset: 18607
    // Parameter  0 added: Name this Type LReal; At 0 135 Range 0 134 Init 0 fixed
    // Parameter  1 added: Name i Type I At 0 135 Range 0 134 Init 0
    // RetValue   7 added: Name <returnValue> Type V At 0 135 Range 0 134 Init 0 fixed
    // LocalVar   2 added: Name flag Type Z At 1 119 Range 1 119 Init 1
    // LocalVar   3 added: Name l Type J At 12 119 Range 12 130 Init 12
    // LocalVar   5 added: Name l1 Type J At 14 92 Range 14 105 Init 14
    public void pow(int i)
    {
        boolean flag = false;
    //    0    0:iconst_0        
    //    1    1:istore_2        
        if(i < 0)
    //*   2    2:iload_1         
    //*   3    3:ifge            11
        {
            i = -i;
    //    4    6:iload_1         
    //    5    7:ineg            
    //    6    8:istore_1        
            flag = true;
    //    7    9:iconst_1        
    //    8   10:istore_2        
        }
        long l = 0L;
    //    9   11:lconst_0        
    //   10   12:lstore_3        
        long l1 = 0L;
    //   11   13:lconst_0        
    //   12   14:lstore          5
        expTmp.mantissa = mantissa;
    //   13   16:getstatic       #80  <Field Real Real.expTmp>
    //   14   19:aload_0         
    //   15   20:getfield        #2   <Field long Real.mantissa>
    //   16   23:putfield        #2   <Field long Real.mantissa>
        expTmp.exponent = exponent;
    //   17   26:getstatic       #80  <Field Real Real.expTmp>
    //   18   29:aload_0         
    //   19   30:getfield        #3   <Field int Real.exponent>
    //   20   33:putfield        #3   <Field int Real.exponent>
        expTmp.sign = sign;
    //   21   36:getstatic       #80  <Field Real Real.expTmp>
    //   22   39:aload_0         
    //   23   40:getfield        #4   <Field byte Real.sign>
    //   24   43:putfield        #4   <Field byte Real.sign>
        mantissa = ONE.mantissa;
    //   25   46:aload_0         
    //   26   47:getstatic       #31  <Field Real Real.ONE>
    //   27   50:getfield        #2   <Field long Real.mantissa>
    //   28   53:putfield        #2   <Field long Real.mantissa>
        exponent = ONE.exponent;
    //   29   56:aload_0         
    //   30   57:getstatic       #31  <Field Real Real.ONE>
    //   31   60:getfield        #3   <Field int Real.exponent>
    //   32   63:putfield        #3   <Field int Real.exponent>
        sign = ONE.sign;
    //   33   66:aload_0         
    //   34   67:getstatic       #31  <Field Real Real.ONE>
    //   35   70:getfield        #4   <Field byte Real.sign>
    //   36   73:putfield        #4   <Field byte Real.sign>
    //*  37   76:goto            115
        for(; i != 0; i >>>= 1)
        {
            if((i & 1) != 0)
    //*  38   79:iload_1         
    //*  39   80:iconst_1        
    //*  40   81:iand            
    //*  41   82:ifeq            96
                l = mul128(l, expTmp, l1);
    //   42   85:aload_0         
    //   43   86:lload_3         
    //   44   87:getstatic       #80  <Field Real Real.expTmp>
    //   45   90:lload           5
    //   46   92:invokevirtual   #64  <Method long Real.mul128(long, Real, long)>
    //   47   95:lstore_3        
            l1 = expTmp.mul128(l1, expTmp, l1);
    //   48   96:getstatic       #80  <Field Real Real.expTmp>
    //   49   99:lload           5
    //   50  101:getstatic       #80  <Field Real Real.expTmp>
    //   51  104:lload           5
    //   52  106:invokevirtual   #64  <Method long Real.mul128(long, Real, long)>
    //   53  109:lstore          5
        }

    //   54  111:iload_1         
    //   55  112:iconst_1        
    //   56  113:iushr           
    //   57  114:istore_1        
    //   58  115:iload_1         
    //   59  116:ifne            79
        if(flag)
    //*  60  119:iload_2         
    //*  61  120:ifeq            129
            l = recip128(l);
    //   62  123:aload_0         
    //   63  124:lload_3         
    //   64  125:invokevirtual   #68  <Method long Real.recip128(long)>
    //   65  128:lstore_3        
        roundFrom128(l);
    //   66  129:aload_0         
    //   67  130:lload_3         
    //   68  131:invokevirtual   #71  <Method void Real.roundFrom128(long)>
        /* return; */
    //   69  134:return          
    }

    // Decompiling method: pow  Signature: (LReal;)V
    // Max stack: 6, #locals: 6, #params: 2
    // Code length: 802 bytes, Code offset: 18839
    // Parameter  0 added: Name this Type LReal; At 0 802 Range 0 801 Init 0 fixed
    // Parameter  1 added: Name real Type LReal; At 0 802 Range 0 801 Init 0
    // RetValue   6 added: Name <returnValue> Type V At 0 802 Range 0 801 Init 0 fixed
    // LocalVar   2 added: Name i Type I At 156 28 Range 156 183 Init 156
    // LocalVar   2 added: Name flag Type Z At 451 347 Range 451 797 Init 451
    // LocalVar   3 added: Name j Type I At 668 40 Range 668 707 Init 668
    // LocalVar   4 added: Name l Type J At 702 12 Range 702 713 Init 702
    // LocalVar   4 added: Name l1 Type J At 721 9 Range 721 729 Init 721
    // LocalVar   4 added: Name l2 Type J At 733 7 Range 733 739 Init 733
    // LocalVar   2 chged: Name byte0 Oname flag Type B At 797 1 Range 451 797 Init 451
    // LocalVar   4 name l1(J) merged out into l(J)
    // LocalVar   4 name l2(J) merged out into l(J)
    public void pow(Real real)
    {
        if(real.exponent == 0 && real.mantissa == 0L)
    //*   0    0:aload_1         
    //*   1    1:getfield        #3   <Field int Real.exponent>
    //*   2    4:ifne            47
    //*   3    7:aload_1         
    //*   4    8:getfield        #2   <Field long Real.mantissa>
    //*   5   11:lconst_0        
    //*   6   12:lcmp            
    //*   7   13:ifne            47
        {
            mantissa = ONE.mantissa;
    //    8   16:aload_0         
    //    9   17:getstatic       #31  <Field Real Real.ONE>
    //   10   20:getfield        #2   <Field long Real.mantissa>
    //   11   23:putfield        #2   <Field long Real.mantissa>
            exponent = ONE.exponent;
    //   12   26:aload_0         
    //   13   27:getstatic       #31  <Field Real Real.ONE>
    //   14   30:getfield        #3   <Field int Real.exponent>
    //   15   33:putfield        #3   <Field int Real.exponent>
            sign = ONE.sign;
    //   16   36:aload_0         
    //   17   37:getstatic       #31  <Field Real Real.ONE>
    //   18   40:getfield        #4   <Field byte Real.sign>
    //   19   43:putfield        #4   <Field byte Real.sign>
            return;
    //   20   46:return          
        }
        if(exponent < 0 && mantissa != 0L || real.exponent < 0 && real.mantissa != 0L)
    //*  21   47:aload_0         
    //*  22   48:getfield        #3   <Field int Real.exponent>
    //*  23   51:ifge            63
    //*  24   54:aload_0         
    //*  25   55:getfield        #2   <Field long Real.mantissa>
    //*  26   58:lconst_0        
    //*  27   59:lcmp            
    //*  28   60:ifne            79
    //*  29   63:aload_1         
    //*  30   64:getfield        #3   <Field int Real.exponent>
    //*  31   67:ifge            84
    //*  32   70:aload_1         
    //*  33   71:getfield        #2   <Field long Real.mantissa>
    //*  34   74:lconst_0        
    //*  35   75:lcmp            
    //*  36   76:ifeq            84
        {
            makeNan();
    //   37   79:aload_0         
    //   38   80:invokevirtual   #23  <Method void Real.makeNan()>
            return;
    //   39   83:return          
        }
        if(real.compare(ONE) == 0)
    //*  40   84:aload_1         
    //*  41   85:getstatic       #31  <Field Real Real.ONE>
    //*  42   88:invokespecial   #27  <Method int Real.compare(Real)>
    //*  43   91:ifne            95
            return;
    //   44   94:return          
        if(real.exponent < 0 && real.mantissa == 0L)
    //*  45   95:aload_1         
    //*  46   96:getfield        #3   <Field int Real.exponent>
    //*  47   99:ifge            214
    //*  48  102:aload_1         
    //*  49  103:getfield        #2   <Field long Real.mantissa>
    //*  50  106:lconst_0        
    //*  51  107:lcmp            
    //*  52  108:ifne            214
        {
            tmp1.mantissa = mantissa;
    //   53  111:getstatic       #107 <Field Real Real.tmp1>
    //   54  114:aload_0         
    //   55  115:getfield        #2   <Field long Real.mantissa>
    //   56  118:putfield        #2   <Field long Real.mantissa>
            tmp1.exponent = exponent;
    //   57  121:getstatic       #107 <Field Real Real.tmp1>
    //   58  124:aload_0         
    //   59  125:getfield        #3   <Field int Real.exponent>
    //   60  128:putfield        #3   <Field int Real.exponent>
            tmp1.sign = sign;
    //   61  131:getstatic       #107 <Field Real Real.tmp1>
    //   62  134:aload_0         
    //   63  135:getfield        #4   <Field byte Real.sign>
    //   64  138:putfield        #4   <Field byte Real.sign>
            tmp1.abs();
    //   65  141:getstatic       #107 <Field Real Real.tmp1>
    //   66  144:invokevirtual   #108 <Method void Real.abs()>
            int i = tmp1.compare(ONE);
    //   67  147:getstatic       #107 <Field Real Real.tmp1>
    //   68  150:getstatic       #31  <Field Real Real.ONE>
    //   69  153:invokespecial   #27  <Method int Real.compare(Real)>
    //   70  156:istore_2        
            if(i > 0)
    //*  71  157:iload_2         
    //*  72  158:ifle            183
            {
                if(real.sign == 0)
    //*  73  161:aload_1         
    //*  74  162:getfield        #4   <Field byte Real.sign>
    //*  75  165:ifne            176
                    makeInfinity(0);
    //   76  168:aload_0         
    //   77  169:iconst_0        
    //   78  170:invokevirtual   #22  <Method void Real.makeInfinity(int)>
                else
    //*  79  173:goto            213
                    makeZero();
    //   80  176:aload_0         
    //   81  177:invokevirtual   #8   <Method void Real.makeZero()>
            } else
    //*  82  180:goto            213
            if(i < 0)
    //*  83  183:iload_2         
    //*  84  184:ifge            209
            {
                if(real.sign != 0)
    //*  85  187:aload_1         
    //*  86  188:getfield        #4   <Field byte Real.sign>
    //*  87  191:ifeq            202
                    makeInfinity(0);
    //   88  194:aload_0         
    //   89  195:iconst_0        
    //   90  196:invokevirtual   #22  <Method void Real.makeInfinity(int)>
                else
    //*  91  199:goto            213
                    makeZero();
    //   92  202:aload_0         
    //   93  203:invokevirtual   #8   <Method void Real.makeZero()>
            } else
    //*  94  206:goto            213
            {
                makeNan();
    //   95  209:aload_0         
    //   96  210:invokevirtual   #23  <Method void Real.makeNan()>
            }
            return;
    //   97  213:return          
        }
        if(exponent == 0 && mantissa == 0L)
    //*  98  214:aload_0         
    //*  99  215:getfield        #3   <Field int Real.exponent>
    //* 100  218:ifne            316
    //* 101  221:aload_0         
    //* 102  222:getfield        #2   <Field long Real.mantissa>
    //* 103  225:lconst_0        
    //* 104  226:lcmp            
    //* 105  227:ifne            316
        {
            if(sign == 0)
    //* 106  230:aload_0         
    //* 107  231:getfield        #4   <Field byte Real.sign>
    //* 108  234:ifne            259
            {
                if(real.sign == 0)
    //* 109  237:aload_1         
    //* 110  238:getfield        #4   <Field byte Real.sign>
    //* 111  241:ifne            251
                    makeZero();
    //  112  244:aload_0         
    //  113  245:invokevirtual   #8   <Method void Real.makeZero()>
                else
    //* 114  248:goto            315
                    makeInfinity(0);
    //  115  251:aload_0         
    //  116  252:iconst_0        
    //  117  253:invokevirtual   #22  <Method void Real.makeInfinity(int)>
            } else
    //* 118  256:goto            315
            if(real.isIntegral() && real.isOdd())
    //* 119  259:aload_1         
    //* 120  260:invokevirtual   #109 <Method boolean Real.isIntegral()>
    //* 121  263:ifeq            296
    //* 122  266:aload_1         
    //* 123  267:invokevirtual   #110 <Method boolean Real.isOdd()>
    //* 124  270:ifeq            296
            {
                if(real.sign == 0)
    //* 125  273:aload_1         
    //* 126  274:getfield        #4   <Field byte Real.sign>
    //* 127  277:ifne            288
                    makeZero(1);
    //  128  280:aload_0         
    //  129  281:iconst_1        
    //  130  282:invokevirtual   #25  <Method void Real.makeZero(int)>
                else
    //* 131  285:goto            315
                    makeInfinity(1);
    //  132  288:aload_0         
    //  133  289:iconst_1        
    //  134  290:invokevirtual   #22  <Method void Real.makeInfinity(int)>
            } else
    //* 135  293:goto            315
            if(real.sign == 0)
    //* 136  296:aload_1         
    //* 137  297:getfield        #4   <Field byte Real.sign>
    //* 138  300:ifne            310
                makeZero();
    //  139  303:aload_0         
    //  140  304:invokevirtual   #8   <Method void Real.makeZero()>
            else
    //* 141  307:goto            315
                makeInfinity(0);
    //  142  310:aload_0         
    //  143  311:iconst_0        
    //  144  312:invokevirtual   #22  <Method void Real.makeInfinity(int)>
            return;
    //  145  315:return          
        }
        if(exponent < 0 && mantissa == 0L)
    //* 146  316:aload_0         
    //* 147  317:getfield        #3   <Field int Real.exponent>
    //* 148  320:ifge            425
    //* 149  323:aload_0         
    //* 150  324:getfield        #2   <Field long Real.mantissa>
    //* 151  327:lconst_0        
    //* 152  328:lcmp            
    //* 153  329:ifne            425
        {
            if(sign == 0)
    //* 154  332:aload_0         
    //* 155  333:getfield        #4   <Field byte Real.sign>
    //* 156  336:ifne            361
            {
                if(real.sign == 0)
    //* 157  339:aload_1         
    //* 158  340:getfield        #4   <Field byte Real.sign>
    //* 159  343:ifne            354
                    makeInfinity(0);
    //  160  346:aload_0         
    //  161  347:iconst_0        
    //  162  348:invokevirtual   #22  <Method void Real.makeInfinity(int)>
                else
    //* 163  351:goto            424
                    makeZero();
    //  164  354:aload_0         
    //  165  355:invokevirtual   #8   <Method void Real.makeZero()>
            } else
    //* 166  358:goto            424
            if(real.isIntegral())
    //* 167  361:aload_1         
    //* 168  362:invokevirtual   #109 <Method boolean Real.isIntegral()>
    //* 169  365:ifeq            420
            {
                if(real.isOdd())
    //* 170  368:aload_1         
    //* 171  369:invokevirtual   #110 <Method boolean Real.isOdd()>
    //* 172  372:ifeq            398
                {
                    if(real.sign == 0)
    //* 173  375:aload_1         
    //* 174  376:getfield        #4   <Field byte Real.sign>
    //* 175  379:ifne            390
                        makeInfinity(1);
    //  176  382:aload_0         
    //  177  383:iconst_1        
    //  178  384:invokevirtual   #22  <Method void Real.makeInfinity(int)>
                    else
    //* 179  387:goto            424
                        makeZero(1);
    //  180  390:aload_0         
    //  181  391:iconst_1        
    //  182  392:invokevirtual   #25  <Method void Real.makeZero(int)>
                } else
    //* 183  395:goto            424
                if(real.sign == 0)
    //* 184  398:aload_1         
    //* 185  399:getfield        #4   <Field byte Real.sign>
    //* 186  402:ifne            413
                    makeInfinity(0);
    //  187  405:aload_0         
    //  188  406:iconst_0        
    //  189  407:invokevirtual   #22  <Method void Real.makeInfinity(int)>
                else
    //* 190  410:goto            424
                    makeZero();
    //  191  413:aload_0         
    //  192  414:invokevirtual   #8   <Method void Real.makeZero()>
            } else
    //* 193  417:goto            424
            {
                makeNan();
    //  194  420:aload_0         
    //  195  421:invokevirtual   #23  <Method void Real.makeNan()>
            }
            return;
    //  196  424:return          
        }
        if(real.isIntegral() && real.exponent <= 0x4000001e)
    //* 197  425:aload_1         
    //* 198  426:invokevirtual   #109 <Method boolean Real.isIntegral()>
    //* 199  429:ifeq            450
    //* 200  432:aload_1         
    //* 201  433:getfield        #3   <Field int Real.exponent>
    //* 202  436:ldc1            #11  <Int 0x4000001e>
    //* 203  438:icmpgt          450
        {
            pow(real.toInteger());
    //  204  441:aload_0         
    //  205  442:aload_1         
    //  206  443:invokevirtual   #81  <Method int Real.toInteger()>
    //  207  446:invokevirtual   #104 <Method void Real.pow(int)>
            return;
    //  208  449:return          
        }
        byte byte0 = 0;
    //  209  450:iconst_0        
    //  210  451:istore_2        
        if(sign != 0)
    //* 211  452:aload_0         
    //* 212  453:getfield        #4   <Field byte Real.sign>
    //* 213  456:ifeq            488
        {
            if(real.isIntegral())
    //* 214  459:aload_1         
    //* 215  460:invokevirtual   #109 <Method boolean Real.isIntegral()>
    //* 216  463:ifeq            478
            {
                if(real.isOdd())
    //* 217  466:aload_1         
    //* 218  467:invokevirtual   #110 <Method boolean Real.isOdd()>
    //* 219  470:ifeq            483
                    byte0 = 1;
    //  220  473:iconst_1        
    //  221  474:istore_2        
            } else
    //* 222  475:goto            483
            {
                makeNan();
    //  223  478:aload_0         
    //  224  479:invokevirtual   #23  <Method void Real.makeNan()>
                return;
    //  225  482:return          
            }
            sign = 0;
    //  226  483:aload_0         
    //  227  484:iconst_0        
    //  228  485:putfield        #4   <Field byte Real.sign>
        }
        tmp1.mantissa = real.mantissa;
    //  229  488:getstatic       #107 <Field Real Real.tmp1>
    //  230  491:aload_1         
    //  231  492:getfield        #2   <Field long Real.mantissa>
    //  232  495:putfield        #2   <Field long Real.mantissa>
        tmp1.exponent = real.exponent;
    //  233  498:getstatic       #107 <Field Real Real.tmp1>
    //  234  501:aload_1         
    //  235  502:getfield        #3   <Field int Real.exponent>
    //  236  505:putfield        #3   <Field int Real.exponent>
        tmp1.sign = real.sign;
    //  237  508:getstatic       #107 <Field Real Real.tmp1>
    //  238  511:aload_1         
    //  239  512:getfield        #4   <Field byte Real.sign>
    //  240  515:putfield        #4   <Field byte Real.sign>
        if(tmp1.exponent <= 0x4000001e)
    //* 241  518:getstatic       #107 <Field Real Real.tmp1>
    //* 242  521:getfield        #3   <Field int Real.exponent>
    //* 243  524:ldc1            #11  <Int 0x4000001e>
    //* 244  526:icmpgt          625
        {
            tmp2.mantissa = tmp1.mantissa;
    //  245  529:getstatic       #100 <Field Real Real.tmp2>
    //  246  532:getstatic       #107 <Field Real Real.tmp1>
    //  247  535:getfield        #2   <Field long Real.mantissa>
    //  248  538:putfield        #2   <Field long Real.mantissa>
            tmp2.exponent = tmp1.exponent;
    //  249  541:getstatic       #100 <Field Real Real.tmp2>
    //  250  544:getstatic       #107 <Field Real Real.tmp1>
    //  251  547:getfield        #3   <Field int Real.exponent>
    //  252  550:putfield        #3   <Field int Real.exponent>
            tmp2.sign = tmp1.sign;
    //  253  553:getstatic       #100 <Field Real Real.tmp2>
    //  254  556:getstatic       #107 <Field Real Real.tmp1>
    //  255  559:getfield        #4   <Field byte Real.sign>
    //  256  562:putfield        #4   <Field byte Real.sign>
            tmp2.floor();
    //  257  565:getstatic       #100 <Field Real Real.tmp2>
    //  258  568:invokevirtual   #36  <Method void Real.floor()>
            tmp3.mantissa = mantissa;
    //  259  571:getstatic       #105 <Field Real Real.tmp3>
    //  260  574:aload_0         
    //  261  575:getfield        #2   <Field long Real.mantissa>
    //  262  578:putfield        #2   <Field long Real.mantissa>
            tmp3.exponent = exponent;
    //  263  581:getstatic       #105 <Field Real Real.tmp3>
    //  264  584:aload_0         
    //  265  585:getfield        #3   <Field int Real.exponent>
    //  266  588:putfield        #3   <Field int Real.exponent>
            tmp3.sign = sign;
    //  267  591:getstatic       #105 <Field Real Real.tmp3>
    //  268  594:aload_0         
    //  269  595:getfield        #4   <Field byte Real.sign>
    //  270  598:putfield        #4   <Field byte Real.sign>
            tmp3.pow(tmp2.toInteger());
    //  271  601:getstatic       #105 <Field Real Real.tmp3>
    //  272  604:getstatic       #100 <Field Real Real.tmp2>
    //  273  607:invokevirtual   #81  <Method int Real.toInteger()>
    //  274  610:invokevirtual   #104 <Method void Real.pow(int)>
            tmp1.sub(tmp2);
    //  275  613:getstatic       #107 <Field Real Real.tmp1>
    //  276  616:getstatic       #100 <Field Real Real.tmp2>
    //  277  619:invokevirtual   #95  <Method void Real.sub(Real)>
        } else
    //* 278  622:goto            661
        {
            tmp3.mantissa = ONE.mantissa;
    //  279  625:getstatic       #105 <Field Real Real.tmp3>
    //  280  628:getstatic       #31  <Field Real Real.ONE>
    //  281  631:getfield        #2   <Field long Real.mantissa>
    //  282  634:putfield        #2   <Field long Real.mantissa>
            tmp3.exponent = ONE.exponent;
    //  283  637:getstatic       #105 <Field Real Real.tmp3>
    //  284  640:getstatic       #31  <Field Real Real.ONE>
    //  285  643:getfield        #3   <Field int Real.exponent>
    //  286  646:putfield        #3   <Field int Real.exponent>
            tmp3.sign = ONE.sign;
    //  287  649:getstatic       #105 <Field Real Real.tmp3>
    //  288  652:getstatic       #31  <Field Real Real.ONE>
    //  289  655:getfield        #4   <Field byte Real.sign>
    //  290  658:putfield        #4   <Field byte Real.sign>
        }
        int j = exponent - 0x40000000;
    //  291  661:aload_0         
    //  292  662:getfield        #3   <Field int Real.exponent>
    //  293  665:ldc1            #30  <Int 0x40000000>
    //  294  667:isub            
    //  295  668:istore_3        
        exponent = 0x40000000;
    //  296  669:aload_0         
    //  297  670:ldc1            #30  <Int 0x40000000>
    //  298  672:putfield        #3   <Field int Real.exponent>
        lnInternal();
    //  299  675:aload_0         
    //  300  676:invokespecial   #97  <Method void Real.lnInternal()>
        tmp2.assign(0, 0x40000000, 0x5c551d94ae0bf85dL);
    //  301  679:getstatic       #100 <Field Real Real.tmp2>
    //  302  682:iconst_0        
    //  303  683:ldc1            #30  <Int 0x40000000>
    //  304  685:ldc2w           #90  <Long 0x5c551d94ae0bf85dL>
    //  305  688:invokevirtual   #7   <Method void Real.assign(int, int, long)>
        long l = mul128(0L, tmp2, 0xdf43ff68348e9f44L);
    //  306  691:aload_0         
    //  307  692:lconst_0        
    //  308  693:getstatic       #100 <Field Real Real.tmp2>
    //  309  696:ldc2w           #92  <Long 0xdf43ff68348e9f44L>
    //  310  699:invokevirtual   #64  <Method long Real.mul128(long, Real, long)>
    //  311  702:lstore          4
        tmp2.assign(j);
    //  312  704:getstatic       #100 <Field Real Real.tmp2>
    //  313  707:iload_3         
    //  314  708:invokevirtual   #5   <Method void Real.assign(int)>
        l = add128(l, tmp2, 0L);
    //  315  711:aload_0         
    //  316  712:lload           4
    //  317  714:getstatic       #100 <Field Real Real.tmp2>
    //  318  717:lconst_0        
    //  319  718:invokevirtual   #65  <Method long Real.add128(long, Real, long)>
    //  320  721:lstore          4
        l = tmp1.mul128(0L, this, l);
    //  321  723:getstatic       #107 <Field Real Real.tmp1>
    //  322  726:lconst_0        
    //  323  727:aload_0         
    //  324  728:lload           4
    //  325  730:invokevirtual   #64  <Method long Real.mul128(long, Real, long)>
    //  326  733:lstore          4
        tmp1.exp2Internal(l);
    //  327  735:getstatic       #107 <Field Real Real.tmp1>
    //  328  738:lload           4
    //  329  740:invokespecial   #94  <Method void Real.exp2Internal(long)>
        mantissa = tmp1.mantissa;
    //  330  743:aload_0         
    //  331  744:getstatic       #107 <Field Real Real.tmp1>
    //  332  747:getfield        #2   <Field long Real.mantissa>
    //  333  750:putfield        #2   <Field long Real.mantissa>
        exponent = tmp1.exponent;
    //  334  753:aload_0         
    //  335  754:getstatic       #107 <Field Real Real.tmp1>
    //  336  757:getfield        #3   <Field int Real.exponent>
    //  337  760:putfield        #3   <Field int Real.exponent>
        sign = tmp1.sign;
    //  338  763:aload_0         
    //  339  764:getstatic       #107 <Field Real Real.tmp1>
    //  340  767:getfield        #4   <Field byte Real.sign>
    //  341  770:putfield        #4   <Field byte Real.sign>
        mul(tmp3);
    //  342  773:aload_0         
    //  343  774:getstatic       #105 <Field Real Real.tmp3>
    //  344  777:invokevirtual   #76  <Method void Real.mul(Real)>
        if(exponent >= 0 || mantissa == 0L)
    //* 345  780:aload_0         
    //* 346  781:getfield        #3   <Field int Real.exponent>
    //* 347  784:ifge            796
    //* 348  787:aload_0         
    //* 349  788:getfield        #2   <Field long Real.mantissa>
    //* 350  791:lconst_0        
    //* 351  792:lcmp            
    //* 352  793:ifne            801
            sign = byte0;
    //  353  796:aload_0         
    //  354  797:iload_2         
    //  355  798:putfield        #4   <Field byte Real.sign>
        /* return; */
    //  356  801:return          
    }

    // Decompiling method: sinInternal  Signature: ()V
    // Max stack: 4, #locals: 2, #params: 1
    // Code length: 192 bytes, Code offset: 20099
    // Parameter  0 added: Name this Type LReal; At 0 192 Range 0 191 Init 0 fixed
    // RetValue   2 added: Name <returnValue> Type V At 0 192 Range 0 191 Init 0 fixed
    // LocalVar   1 added: Name byte0 Type B At 140 33 Range 140 172 Init 140
    // LocalVar   1 chged: Name i Oname byte0 Type I At 169 3 Range 140 172 Init 140
    private void sinInternal()
    {
        tmp1.mantissa = mantissa;
    //    0    0:getstatic       #107 <Field Real Real.tmp1>
    //    1    3:aload_0         
    //    2    4:getfield        #2   <Field long Real.mantissa>
    //    3    7:putfield        #2   <Field long Real.mantissa>
        tmp1.exponent = exponent;
    //    4   10:getstatic       #107 <Field Real Real.tmp1>
    //    5   13:aload_0         
    //    6   14:getfield        #3   <Field int Real.exponent>
    //    7   17:putfield        #3   <Field int Real.exponent>
        tmp1.sign = sign;
    //    8   20:getstatic       #107 <Field Real Real.tmp1>
    //    9   23:aload_0         
    //   10   24:getfield        #4   <Field byte Real.sign>
    //   11   27:putfield        #4   <Field byte Real.sign>
        tmp2.mantissa = mantissa;
    //   12   30:getstatic       #100 <Field Real Real.tmp2>
    //   13   33:aload_0         
    //   14   34:getfield        #2   <Field long Real.mantissa>
    //   15   37:putfield        #2   <Field long Real.mantissa>
        tmp2.exponent = exponent;
    //   16   40:getstatic       #100 <Field Real Real.tmp2>
    //   17   43:aload_0         
    //   18   44:getfield        #3   <Field int Real.exponent>
    //   19   47:putfield        #3   <Field int Real.exponent>
        tmp2.sign = sign;
    //   20   50:getstatic       #100 <Field Real Real.tmp2>
    //   21   53:aload_0         
    //   22   54:getfield        #4   <Field byte Real.sign>
    //   23   57:putfield        #4   <Field byte Real.sign>
        tmp2.sqr();
    //   24   60:getstatic       #100 <Field Real Real.tmp2>
    //   25   63:invokevirtual   #77  <Method void Real.sqr()>
        tmp2.neg();
    //   26   66:getstatic       #100 <Field Real Real.tmp2>
    //   27   69:invokevirtual   #35  <Method void Real.neg()>
        mantissa = ONE.mantissa;
    //   28   72:aload_0         
    //   29   73:getstatic       #31  <Field Real Real.ONE>
    //   30   76:getfield        #2   <Field long Real.mantissa>
    //   31   79:putfield        #2   <Field long Real.mantissa>
        exponent = ONE.exponent;
    //   32   82:aload_0         
    //   33   83:getstatic       #31  <Field Real Real.ONE>
    //   34   86:getfield        #3   <Field int Real.exponent>
    //   35   89:putfield        #3   <Field int Real.exponent>
        sign = ONE.sign;
    //   36   92:aload_0         
    //   37   93:getstatic       #31  <Field Real Real.ONE>
    //   38   96:getfield        #4   <Field byte Real.sign>
    //   39   99:putfield        #4   <Field byte Real.sign>
        tmp3.mantissa = ONE.mantissa;
    //   40  102:getstatic       #105 <Field Real Real.tmp3>
    //   41  105:getstatic       #31  <Field Real Real.ONE>
    //   42  108:getfield        #2   <Field long Real.mantissa>
    //   43  111:putfield        #2   <Field long Real.mantissa>
        tmp3.exponent = ONE.exponent;
    //   44  114:getstatic       #105 <Field Real Real.tmp3>
    //   45  117:getstatic       #31  <Field Real Real.ONE>
    //   46  120:getfield        #3   <Field int Real.exponent>
    //   47  123:putfield        #3   <Field int Real.exponent>
        tmp3.sign = ONE.sign;
    //   48  126:getstatic       #105 <Field Real Real.tmp3>
    //   49  129:getstatic       #31  <Field Real Real.ONE>
    //   50  132:getfield        #4   <Field byte Real.sign>
    //   51  135:putfield        #4   <Field byte Real.sign>
        for(int i = 19; i >= 3; i -= 2)
    //*  52  138:bipush          19
    //*  53  140:istore_1        
    //*  54  141:goto            172
        {
            mul(tmp2);
    //   55  144:aload_0         
    //   56  145:getstatic       #100 <Field Real Real.tmp2>
    //   57  148:invokevirtual   #76  <Method void Real.mul(Real)>
            tmp3.mul(i * (i - 1));
    //   58  151:getstatic       #105 <Field Real Real.tmp3>
    //   59  154:iload_1         
    //   60  155:iload_1         
    //   61  156:iconst_1        
    //   62  157:isub            
    //   63  158:imul            
    //   64  159:invokevirtual   #88  <Method void Real.mul(int)>
            add(tmp3);
    //   65  162:aload_0         
    //   66  163:getstatic       #105 <Field Real Real.tmp3>
    //   67  166:invokevirtual   #47  <Method void Real.add(Real)>
        }

    //   68  169:iinc            1  -2
    //   69  172:iload_1         
    //   70  173:iconst_3        
    //   71  174:icmpge          144
        mul(tmp1);
    //   72  177:aload_0         
    //   73  178:getstatic       #107 <Field Real Real.tmp1>
    //   74  181:invokevirtual   #76  <Method void Real.mul(Real)>
        div(tmp3);
    //   75  184:aload_0         
    //   76  185:getstatic       #105 <Field Real Real.tmp3>
    //   77  188:invokevirtual   #89  <Method void Real.div(Real)>
        /* return; */
    //   78  191:return          
    }

    // Decompiling method: cosInternal  Signature: ()V
    // Max stack: 4, #locals: 2, #params: 1
    // Code length: 199 bytes, Code offset: 20345
    // Parameter  0 added: Name this Type LReal; At 0 199 Range 0 198 Init 0 fixed
    // RetValue   2 added: Name <returnValue> Type V At 0 199 Range 0 198 Init 0 fixed
    // LocalVar   1 added: Name byte0 Type B At 140 33 Range 140 172 Init 140
    // LocalVar   1 chged: Name i Oname byte0 Type I At 169 3 Range 140 172 Init 140
    private void cosInternal()
    {
        tmp1.mantissa = mantissa;
    //    0    0:getstatic       #107 <Field Real Real.tmp1>
    //    1    3:aload_0         
    //    2    4:getfield        #2   <Field long Real.mantissa>
    //    3    7:putfield        #2   <Field long Real.mantissa>
        tmp1.exponent = exponent;
    //    4   10:getstatic       #107 <Field Real Real.tmp1>
    //    5   13:aload_0         
    //    6   14:getfield        #3   <Field int Real.exponent>
    //    7   17:putfield        #3   <Field int Real.exponent>
        tmp1.sign = sign;
    //    8   20:getstatic       #107 <Field Real Real.tmp1>
    //    9   23:aload_0         
    //   10   24:getfield        #4   <Field byte Real.sign>
    //   11   27:putfield        #4   <Field byte Real.sign>
        tmp2.mantissa = mantissa;
    //   12   30:getstatic       #100 <Field Real Real.tmp2>
    //   13   33:aload_0         
    //   14   34:getfield        #2   <Field long Real.mantissa>
    //   15   37:putfield        #2   <Field long Real.mantissa>
        tmp2.exponent = exponent;
    //   16   40:getstatic       #100 <Field Real Real.tmp2>
    //   17   43:aload_0         
    //   18   44:getfield        #3   <Field int Real.exponent>
    //   19   47:putfield        #3   <Field int Real.exponent>
        tmp2.sign = sign;
    //   20   50:getstatic       #100 <Field Real Real.tmp2>
    //   21   53:aload_0         
    //   22   54:getfield        #4   <Field byte Real.sign>
    //   23   57:putfield        #4   <Field byte Real.sign>
        tmp2.sqr();
    //   24   60:getstatic       #100 <Field Real Real.tmp2>
    //   25   63:invokevirtual   #77  <Method void Real.sqr()>
        tmp2.neg();
    //   26   66:getstatic       #100 <Field Real Real.tmp2>
    //   27   69:invokevirtual   #35  <Method void Real.neg()>
        mantissa = tmp2.mantissa;
    //   28   72:aload_0         
    //   29   73:getstatic       #100 <Field Real Real.tmp2>
    //   30   76:getfield        #2   <Field long Real.mantissa>
    //   31   79:putfield        #2   <Field long Real.mantissa>
        exponent = tmp2.exponent;
    //   32   82:aload_0         
    //   33   83:getstatic       #100 <Field Real Real.tmp2>
    //   34   86:getfield        #3   <Field int Real.exponent>
    //   35   89:putfield        #3   <Field int Real.exponent>
        sign = tmp2.sign;
    //   36   92:aload_0         
    //   37   93:getstatic       #100 <Field Real Real.tmp2>
    //   38   96:getfield        #4   <Field byte Real.sign>
    //   39   99:putfield        #4   <Field byte Real.sign>
        tmp3.mantissa = ONE.mantissa;
    //   40  102:getstatic       #105 <Field Real Real.tmp3>
    //   41  105:getstatic       #31  <Field Real Real.ONE>
    //   42  108:getfield        #2   <Field long Real.mantissa>
    //   43  111:putfield        #2   <Field long Real.mantissa>
        tmp3.exponent = ONE.exponent;
    //   44  114:getstatic       #105 <Field Real Real.tmp3>
    //   45  117:getstatic       #31  <Field Real Real.ONE>
    //   46  120:getfield        #3   <Field int Real.exponent>
    //   47  123:putfield        #3   <Field int Real.exponent>
        tmp3.sign = ONE.sign;
    //   48  126:getstatic       #105 <Field Real Real.tmp3>
    //   49  129:getstatic       #31  <Field Real Real.ONE>
    //   50  132:getfield        #4   <Field byte Real.sign>
    //   51  135:putfield        #4   <Field byte Real.sign>
        for(int i = 18; i >= 4; i -= 2)
    //*  52  138:bipush          18
    //*  53  140:istore_1        
    //*  54  141:goto            172
        {
            tmp3.mul(i * (i - 1));
    //   55  144:getstatic       #105 <Field Real Real.tmp3>
    //   56  147:iload_1         
    //   57  148:iload_1         
    //   58  149:iconst_1        
    //   59  150:isub            
    //   60  151:imul            
    //   61  152:invokevirtual   #88  <Method void Real.mul(int)>
            add(tmp3);
    //   62  155:aload_0         
    //   63  156:getstatic       #105 <Field Real Real.tmp3>
    //   64  159:invokevirtual   #47  <Method void Real.add(Real)>
            mul(tmp2);
    //   65  162:aload_0         
    //   66  163:getstatic       #100 <Field Real Real.tmp2>
    //   67  166:invokevirtual   #76  <Method void Real.mul(Real)>
        }

    //   68  169:iinc            1  -2
    //   69  172:iload_1         
    //   70  173:iconst_4        
    //   71  174:icmpge          144
        tmp3.scalbn(1);
    //   72  177:getstatic       #105 <Field Real Real.tmp3>
    //   73  180:iconst_1        
    //   74  181:invokevirtual   #66  <Method void Real.scalbn(int)>
        div(tmp3);
    //   75  184:aload_0         
    //   76  185:getstatic       #105 <Field Real Real.tmp3>
    //   77  188:invokevirtual   #89  <Method void Real.div(Real)>
        add(ONE);
    //   78  191:aload_0         
    //   79  192:getstatic       #31  <Field Real Real.ONE>
    //   80  195:invokevirtual   #47  <Method void Real.add(Real)>
        /* return; */
    //   81  198:return          
    }

    // Decompiling method: sin  Signature: ()V
    // Max stack: 4, #locals: 2, #params: 1
    // Code length: 185 bytes, Code offset: 20598
    // Parameter  0 added: Name this Type LReal; At 0 185 Range 0 184 Init 0 fixed
    // RetValue   2 added: Name <returnValue> Type V At 0 185 Range 0 184 Init 0 fixed
    // LocalVar   1 added: Name flag Type Z At 38 119 Range 38 156 Init 38
    public void sin()
    {
        if(exponent < 0 || mantissa == 0L)
    //*   0    0:aload_0         
    //*   1    1:getfield        #3   <Field int Real.exponent>
    //*   2    4:iflt            16
    //*   3    7:aload_0         
    //*   4    8:getfield        #2   <Field long Real.mantissa>
    //*   5   11:lconst_0        
    //*   6   12:lcmp            
    //*   7   13:ifne            37
        {
            if(exponent != 0 || mantissa != 0L)
    //*   8   16:aload_0         
    //*   9   17:getfield        #3   <Field int Real.exponent>
    //*  10   20:ifne            32
    //*  11   23:aload_0         
    //*  12   24:getfield        #2   <Field long Real.mantissa>
    //*  13   27:lconst_0        
    //*  14   28:lcmp            
    //*  15   29:ifeq            36
                makeNan();
    //   16   32:aload_0         
    //   17   33:invokevirtual   #23  <Method void Real.makeNan()>
            return;
    //   18   36:return          
        }
        boolean flag = false;
    //   19   37:iconst_0        
    //   20   38:istore_1        
        if(sign != 0)
    //*  21   39:aload_0         
    //*  22   40:getfield        #4   <Field byte Real.sign>
    //*  23   43:ifeq            52
        {
            abs();
    //   24   46:aload_0         
    //   25   47:invokevirtual   #108 <Method void Real.abs()>
            flag = true;
    //   26   50:iconst_1        
    //   27   51:istore_1        
        }
        if(compare(PI2) > 0)
    //*  28   52:aload_0         
    //*  29   53:getstatic       #111 <Field Real Real.PI2>
    //*  30   56:invokespecial   #27  <Method int Real.compare(Real)>
    //*  31   59:ifle            72
            modInternal(PI2, 0x62633145c06e0e69L);
    //   32   62:aload_0         
    //   33   63:getstatic       #111 <Field Real Real.PI2>
    //   34   66:ldc2w           #112 <Long 0x62633145c06e0e69L>
    //   35   69:invokespecial   #114 <Method void Real.modInternal(Real, long)>
        if(compare(PI) > 0)
    //*  36   72:aload_0         
    //*  37   73:getstatic       #115 <Field Real Real.PI>
    //*  38   76:invokespecial   #27  <Method int Real.compare(Real)>
    //*  39   79:ifle            103
        {
            sub(PI2);
    //   40   82:aload_0         
    //   41   83:getstatic       #111 <Field Real Real.PI2>
    //   42   86:invokevirtual   #95  <Method void Real.sub(Real)>
            neg();
    //   43   89:aload_0         
    //   44   90:invokevirtual   #35  <Method void Real.neg()>
            flag = !flag;
    //   45   93:iload_1         
    //   46   94:ifne            101
    //   47   97:iconst_1        
    //   48   98:goto            102
    //   49  101:iconst_0        
    //   50  102:istore_1        
        }
        if(compare(PI_2) > 0)
    //*  51  103:aload_0         
    //*  52  104:getstatic       #116 <Field Real Real.PI_2>
    //*  53  107:invokespecial   #27  <Method int Real.compare(Real)>
    //*  54  110:ifle            124
        {
            sub(PI);
    //   55  113:aload_0         
    //   56  114:getstatic       #115 <Field Real Real.PI>
    //   57  117:invokevirtual   #95  <Method void Real.sub(Real)>
            neg();
    //   58  120:aload_0         
    //   59  121:invokevirtual   #35  <Method void Real.neg()>
        }
        if(compare(PI_4) > 0)
    //*  60  124:aload_0         
    //*  61  125:getstatic       #117 <Field Real Real.PI_4>
    //*  62  128:invokespecial   #27  <Method int Real.compare(Real)>
    //*  63  131:ifle            152
        {
            sub(PI_2);
    //   64  134:aload_0         
    //   65  135:getstatic       #116 <Field Real Real.PI_2>
    //   66  138:invokevirtual   #95  <Method void Real.sub(Real)>
            neg();
    //   67  141:aload_0         
    //   68  142:invokevirtual   #35  <Method void Real.neg()>
            cosInternal();
    //   69  145:aload_0         
    //   70  146:invokespecial   #118 <Method void Real.cosInternal()>
        } else
    //*  71  149:goto            156
        {
            sinInternal();
    //   72  152:aload_0         
    //   73  153:invokespecial   #119 <Method void Real.sinInternal()>
        }
        if(flag)
    //*  74  156:iload_1         
    //*  75  157:ifeq            164
            neg();
    //   76  160:aload_0         
    //   77  161:invokevirtual   #35  <Method void Real.neg()>
        if(exponent == 0 && mantissa == 0L)
    //*  78  164:aload_0         
    //*  79  165:getfield        #3   <Field int Real.exponent>
    //*  80  168:ifne            184
    //*  81  171:aload_0         
    //*  82  172:getfield        #2   <Field long Real.mantissa>
    //*  83  175:lconst_0        
    //*  84  176:lcmp            
    //*  85  177:ifne            184
            abs();
    //   86  180:aload_0         
    //   87  181:invokevirtual   #108 <Method void Real.abs()>
        /* return; */
    //   88  184:return          
    }

    // Decompiling method: cos  Signature: ()V
    // Max stack: 4, #locals: 1, #params: 1
    // Code length: 87 bytes, Code offset: 20954
    // Parameter  0 added: Name this Type LReal; At 0 87 Range 0 86 Init 0 fixed
    // RetValue   1 added: Name <returnValue> Type V At 0 87 Range 0 86 Init 0 fixed
    public void cos()
    {
        if(exponent == 0 && mantissa == 0L)
    //*   0    0:aload_0         
    //*   1    1:getfield        #3   <Field int Real.exponent>
    //*   2    4:ifne            47
    //*   3    7:aload_0         
    //*   4    8:getfield        #2   <Field long Real.mantissa>
    //*   5   11:lconst_0        
    //*   6   12:lcmp            
    //*   7   13:ifne            47
        {
            mantissa = ONE.mantissa;
    //    8   16:aload_0         
    //    9   17:getstatic       #31  <Field Real Real.ONE>
    //   10   20:getfield        #2   <Field long Real.mantissa>
    //   11   23:putfield        #2   <Field long Real.mantissa>
            exponent = ONE.exponent;
    //   12   26:aload_0         
    //   13   27:getstatic       #31  <Field Real Real.ONE>
    //   14   30:getfield        #3   <Field int Real.exponent>
    //   15   33:putfield        #3   <Field int Real.exponent>
            sign = ONE.sign;
    //   16   36:aload_0         
    //   17   37:getstatic       #31  <Field Real Real.ONE>
    //   18   40:getfield        #4   <Field byte Real.sign>
    //   19   43:putfield        #4   <Field byte Real.sign>
            return;
    //   20   46:return          
        }
        if(sign != 0)
    //*  21   47:aload_0         
    //*  22   48:getfield        #4   <Field byte Real.sign>
    //*  23   51:ifeq            58
            abs();
    //   24   54:aload_0         
    //   25   55:invokevirtual   #108 <Method void Real.abs()>
        if(compare(PI_4) < 0)
    //*  26   58:aload_0         
    //*  27   59:getstatic       #117 <Field Real Real.PI_4>
    //*  28   62:invokespecial   #27  <Method int Real.compare(Real)>
    //*  29   65:ifge            75
        {
            cosInternal();
    //   30   68:aload_0         
    //   31   69:invokespecial   #118 <Method void Real.cosInternal()>
        } else
    //*  32   72:goto            86
        {
            add(PI_2);
    //   33   75:aload_0         
    //   34   76:getstatic       #116 <Field Real Real.PI_2>
    //   35   79:invokevirtual   #47  <Method void Real.add(Real)>
            sin();
    //   36   82:aload_0         
    //   37   83:invokevirtual   #120 <Method void Real.sin()>
        }
        /* return; */
    //   38   86:return          
    }

    // Decompiling method: tan  Signature: ()V
    // Max stack: 3, #locals: 1, #params: 1
    // Code length: 48 bytes, Code offset: 21111
    // Parameter  0 added: Name this Type LReal; At 0 48 Range 0 47 Init 0 fixed
    // RetValue   1 added: Name <returnValue> Type V At 0 48 Range 0 47 Init 0 fixed
    public void tan()
    {
        tmp4.mantissa = mantissa;
    //    0    0:getstatic       #121 <Field Real Real.tmp4>
    //    1    3:aload_0         
    //    2    4:getfield        #2   <Field long Real.mantissa>
    //    3    7:putfield        #2   <Field long Real.mantissa>
        tmp4.exponent = exponent;
    //    4   10:getstatic       #121 <Field Real Real.tmp4>
    //    5   13:aload_0         
    //    6   14:getfield        #3   <Field int Real.exponent>
    //    7   17:putfield        #3   <Field int Real.exponent>
        tmp4.sign = sign;
    //    8   20:getstatic       #121 <Field Real Real.tmp4>
    //    9   23:aload_0         
    //   10   24:getfield        #4   <Field byte Real.sign>
    //   11   27:putfield        #4   <Field byte Real.sign>
        tmp4.cos();
    //   12   30:getstatic       #121 <Field Real Real.tmp4>
    //   13   33:invokevirtual   #122 <Method void Real.cos()>
        sin();
    //   14   36:aload_0         
    //   15   37:invokevirtual   #120 <Method void Real.sin()>
        div(tmp4);
    //   16   40:aload_0         
    //   17   41:getstatic       #121 <Field Real Real.tmp4>
    //   18   44:invokevirtual   #89  <Method void Real.div(Real)>
        /* return; */
    //   19   47:return          
    }

    // Decompiling method: asin  Signature: ()V
    // Max stack: 3, #locals: 1, #params: 1
    // Code length: 61 bytes, Code offset: 21185
    // Parameter  0 added: Name this Type LReal; At 0 61 Range 0 60 Init 0 fixed
    // RetValue   1 added: Name <returnValue> Type V At 0 61 Range 0 60 Init 0 fixed
    public void asin()
    {
        tmp1.mantissa = mantissa;
    //    0    0:getstatic       #107 <Field Real Real.tmp1>
    //    1    3:aload_0         
    //    2    4:getfield        #2   <Field long Real.mantissa>
    //    3    7:putfield        #2   <Field long Real.mantissa>
        tmp1.exponent = exponent;
    //    4   10:getstatic       #107 <Field Real Real.tmp1>
    //    5   13:aload_0         
    //    6   14:getfield        #3   <Field int Real.exponent>
    //    7   17:putfield        #3   <Field int Real.exponent>
        tmp1.sign = sign;
    //    8   20:getstatic       #107 <Field Real Real.tmp1>
    //    9   23:aload_0         
    //   10   24:getfield        #4   <Field byte Real.sign>
    //   11   27:putfield        #4   <Field byte Real.sign>
        sqr();
    //   12   30:aload_0         
    //   13   31:invokevirtual   #77  <Method void Real.sqr()>
        neg();
    //   14   34:aload_0         
    //   15   35:invokevirtual   #35  <Method void Real.neg()>
        add(ONE);
    //   16   38:aload_0         
    //   17   39:getstatic       #31  <Field Real Real.ONE>
    //   18   42:invokevirtual   #47  <Method void Real.add(Real)>
        rsqrt();
    //   19   45:aload_0         
    //   20   46:invokevirtual   #123 <Method void Real.rsqrt()>
        mul(tmp1);
    //   21   49:aload_0         
    //   22   50:getstatic       #107 <Field Real Real.tmp1>
    //   23   53:invokevirtual   #76  <Method void Real.mul(Real)>
        atan();
    //   24   56:aload_0         
    //   25   57:invokevirtual   #124 <Method void Real.atan()>
        /* return; */
    //   26   60:return          
    }

    // Decompiling method: acos  Signature: ()V
    // Max stack: 3, #locals: 2, #params: 1
    // Code length: 93 bytes, Code offset: 21272
    // Parameter  0 added: Name this Type LReal; At 0 93 Range 0 92 Init 0 fixed
    // RetValue   2 added: Name <returnValue> Type V At 0 93 Range 0 92 Init 0 fixed
    // LocalVar   1 added: Name flag Type Z At 12 66 Range 12 77 Init 12
    public void acos()
    {
        boolean flag = sign != 0;
    //    0    0:aload_0         
    //    1    1:getfield        #4   <Field byte Real.sign>
    //    2    4:ifeq            11
    //    3    7:iconst_1        
    //    4    8:goto            12
    //    5   11:iconst_0        
    //    6   12:istore_1        
        abs();
    //    7   13:aload_0         
    //    8   14:invokevirtual   #108 <Method void Real.abs()>
        tmp1.mantissa = mantissa;
    //    9   17:getstatic       #107 <Field Real Real.tmp1>
    //   10   20:aload_0         
    //   11   21:getfield        #2   <Field long Real.mantissa>
    //   12   24:putfield        #2   <Field long Real.mantissa>
        tmp1.exponent = exponent;
    //   13   27:getstatic       #107 <Field Real Real.tmp1>
    //   14   30:aload_0         
    //   15   31:getfield        #3   <Field int Real.exponent>
    //   16   34:putfield        #3   <Field int Real.exponent>
        tmp1.sign = sign;
    //   17   37:getstatic       #107 <Field Real Real.tmp1>
    //   18   40:aload_0         
    //   19   41:getfield        #4   <Field byte Real.sign>
    //   20   44:putfield        #4   <Field byte Real.sign>
        sqr();
    //   21   47:aload_0         
    //   22   48:invokevirtual   #77  <Method void Real.sqr()>
        neg();
    //   23   51:aload_0         
    //   24   52:invokevirtual   #35  <Method void Real.neg()>
        add(ONE);
    //   25   55:aload_0         
    //   26   56:getstatic       #31  <Field Real Real.ONE>
    //   27   59:invokevirtual   #47  <Method void Real.add(Real)>
        sqrt();
    //   28   62:aload_0         
    //   29   63:invokevirtual   #125 <Method void Real.sqrt()>
        div(tmp1);
    //   30   66:aload_0         
    //   31   67:getstatic       #107 <Field Real Real.tmp1>
    //   32   70:invokevirtual   #89  <Method void Real.div(Real)>
        atan();
    //   33   73:aload_0         
    //   34   74:invokevirtual   #124 <Method void Real.atan()>
        if(flag)
    //*  35   77:iload_1         
    //*  36   78:ifeq            92
        {
            neg();
    //   37   81:aload_0         
    //   38   82:invokevirtual   #35  <Method void Real.neg()>
            add(PI);
    //   39   85:aload_0         
    //   40   86:getstatic       #115 <Field Real Real.PI>
    //   41   89:invokevirtual   #47  <Method void Real.add(Real)>
        }
        /* return; */
    //   42   92:return          
    }

    // Decompiling method: atanInternal  Signature: ()V
    // Max stack: 3, #locals: 2, #params: 1
    // Code length: 195 bytes, Code offset: 21428
    // Parameter  0 added: Name this Type LReal; At 0 195 Range 0 194 Init 0 fixed
    // RetValue   2 added: Name <returnValue> Type V At 0 195 Range 0 194 Init 0 fixed
    // LocalVar   1 added: Name byte0 Type B At 140 36 Range 140 175 Init 140
    // LocalVar   1 chged: Name i Oname byte0 Type I At 172 3 Range 140 175 Init 140
    private void atanInternal()
    {
        tmp1.mantissa = mantissa;
    //    0    0:getstatic       #107 <Field Real Real.tmp1>
    //    1    3:aload_0         
    //    2    4:getfield        #2   <Field long Real.mantissa>
    //    3    7:putfield        #2   <Field long Real.mantissa>
        tmp1.exponent = exponent;
    //    4   10:getstatic       #107 <Field Real Real.tmp1>
    //    5   13:aload_0         
    //    6   14:getfield        #3   <Field int Real.exponent>
    //    7   17:putfield        #3   <Field int Real.exponent>
        tmp1.sign = sign;
    //    8   20:getstatic       #107 <Field Real Real.tmp1>
    //    9   23:aload_0         
    //   10   24:getfield        #4   <Field byte Real.sign>
    //   11   27:putfield        #4   <Field byte Real.sign>
        tmp2.mantissa = mantissa;
    //   12   30:getstatic       #100 <Field Real Real.tmp2>
    //   13   33:aload_0         
    //   14   34:getfield        #2   <Field long Real.mantissa>
    //   15   37:putfield        #2   <Field long Real.mantissa>
        tmp2.exponent = exponent;
    //   16   40:getstatic       #100 <Field Real Real.tmp2>
    //   17   43:aload_0         
    //   18   44:getfield        #3   <Field int Real.exponent>
    //   19   47:putfield        #3   <Field int Real.exponent>
        tmp2.sign = sign;
    //   20   50:getstatic       #100 <Field Real Real.tmp2>
    //   21   53:aload_0         
    //   22   54:getfield        #4   <Field byte Real.sign>
    //   23   57:putfield        #4   <Field byte Real.sign>
        tmp2.sqr();
    //   24   60:getstatic       #100 <Field Real Real.tmp2>
    //   25   63:invokevirtual   #77  <Method void Real.sqr()>
        tmp2.neg();
    //   26   66:getstatic       #100 <Field Real Real.tmp2>
    //   27   69:invokevirtual   #35  <Method void Real.neg()>
        mantissa = ONE.mantissa;
    //   28   72:aload_0         
    //   29   73:getstatic       #31  <Field Real Real.ONE>
    //   30   76:getfield        #2   <Field long Real.mantissa>
    //   31   79:putfield        #2   <Field long Real.mantissa>
        exponent = ONE.exponent;
    //   32   82:aload_0         
    //   33   83:getstatic       #31  <Field Real Real.ONE>
    //   34   86:getfield        #3   <Field int Real.exponent>
    //   35   89:putfield        #3   <Field int Real.exponent>
        sign = ONE.sign;
    //   36   92:aload_0         
    //   37   93:getstatic       #31  <Field Real Real.ONE>
    //   38   96:getfield        #4   <Field byte Real.sign>
    //   39   99:putfield        #4   <Field byte Real.sign>
        tmp3.mantissa = ONE.mantissa;
    //   40  102:getstatic       #105 <Field Real Real.tmp3>
    //   41  105:getstatic       #31  <Field Real Real.ONE>
    //   42  108:getfield        #2   <Field long Real.mantissa>
    //   43  111:putfield        #2   <Field long Real.mantissa>
        tmp3.exponent = ONE.exponent;
    //   44  114:getstatic       #105 <Field Real Real.tmp3>
    //   45  117:getstatic       #31  <Field Real Real.ONE>
    //   46  120:getfield        #3   <Field int Real.exponent>
    //   47  123:putfield        #3   <Field int Real.exponent>
        tmp3.sign = ONE.sign;
    //   48  126:getstatic       #105 <Field Real Real.tmp3>
    //   49  129:getstatic       #31  <Field Real Real.ONE>
    //   50  132:getfield        #4   <Field byte Real.sign>
    //   51  135:putfield        #4   <Field byte Real.sign>
        for(int i = 45; i >= 3; i -= 2)
    //*  52  138:bipush          45
    //*  53  140:istore_1        
    //*  54  141:goto            175
        {
            mul(tmp2);
    //   55  144:aload_0         
    //   56  145:getstatic       #100 <Field Real Real.tmp2>
    //   57  148:invokevirtual   #76  <Method void Real.mul(Real)>
            mul(i - 2);
    //   58  151:aload_0         
    //   59  152:iload_1         
    //   60  153:iconst_2        
    //   61  154:isub            
    //   62  155:invokevirtual   #88  <Method void Real.mul(int)>
            tmp3.mul(i);
    //   63  158:getstatic       #105 <Field Real Real.tmp3>
    //   64  161:iload_1         
    //   65  162:invokevirtual   #88  <Method void Real.mul(int)>
            add(tmp3);
    //   66  165:aload_0         
    //   67  166:getstatic       #105 <Field Real Real.tmp3>
    //   68  169:invokevirtual   #47  <Method void Real.add(Real)>
        }

    //   69  172:iinc            1  -2
    //   70  175:iload_1         
    //   71  176:iconst_3        
    //   72  177:icmpge          144
        mul(tmp1);
    //   73  180:aload_0         
    //   74  181:getstatic       #107 <Field Real Real.tmp1>
    //   75  184:invokevirtual   #76  <Method void Real.mul(Real)>
        div(tmp3);
    //   76  187:aload_0         
    //   77  188:getstatic       #105 <Field Real Real.tmp3>
    //   78  191:invokevirtual   #89  <Method void Real.div(Real)>
        /* return; */
    //   79  194:return          
    }

    // Decompiling method: atan  Signature: ()V
    // Max stack: 4, #locals: 4, #params: 1
    // Code length: 275 bytes, Code offset: 21677
    // Parameter  0 added: Name this Type LReal; At 0 275 Range 0 274 Init 0 fixed
    // RetValue   4 added: Name <returnValue> Type V At 0 275 Range 0 274 Init 0 fixed
    // LocalVar   1 added: Name byte0 Type B At 53 33 Range 53 85 Init 53
    // LocalVar   1 added: Name byte1 Type B At 94 177 Range 94 270 Init 94
    // LocalVar   2 added: Name flag Type Z At 101 154 Range 101 254 Init 101
    // LocalVar   3 added: Name flag1 Type Z At 164 80 Range 164 243 Init 164
    public void atan()
    {
        if(exponent == 0 && mantissa == 0L || exponent < 0 && mantissa != 0L)
    //*   0    0:aload_0         
    //*   1    1:getfield        #3   <Field int Real.exponent>
    //*   2    4:ifne            16
    //*   3    7:aload_0         
    //*   4    8:getfield        #2   <Field long Real.mantissa>
    //*   5   11:lconst_0        
    //*   6   12:lcmp            
    //*   7   13:ifeq            32
    //*   8   16:aload_0         
    //*   9   17:getfield        #3   <Field int Real.exponent>
    //*  10   20:ifge            33
    //*  11   23:aload_0         
    //*  12   24:getfield        #2   <Field long Real.mantissa>
    //*  13   27:lconst_0        
    //*  14   28:lcmp            
    //*  15   29:ifeq            33
            return;
    //   16   32:return          
        if(exponent < 0 && mantissa == 0L)
    //*  17   33:aload_0         
    //*  18   34:getfield        #3   <Field int Real.exponent>
    //*  19   37:ifge            90
    //*  20   40:aload_0         
    //*  21   41:getfield        #2   <Field long Real.mantissa>
    //*  22   44:lconst_0        
    //*  23   45:lcmp            
    //*  24   46:ifne            90
        {
            byte byte0 = sign;
    //   25   49:aload_0         
    //   26   50:getfield        #4   <Field byte Real.sign>
    //   27   53:istore_1        
            mantissa = PI_2.mantissa;
    //   28   54:aload_0         
    //   29   55:getstatic       #116 <Field Real Real.PI_2>
    //   30   58:getfield        #2   <Field long Real.mantissa>
    //   31   61:putfield        #2   <Field long Real.mantissa>
            exponent = PI_2.exponent;
    //   32   64:aload_0         
    //   33   65:getstatic       #116 <Field Real Real.PI_2>
    //   34   68:getfield        #3   <Field int Real.exponent>
    //   35   71:putfield        #3   <Field int Real.exponent>
            sign = PI_2.sign;
    //   36   74:aload_0         
    //   37   75:getstatic       #116 <Field Real Real.PI_2>
    //   38   78:getfield        #4   <Field byte Real.sign>
    //   39   81:putfield        #4   <Field byte Real.sign>
            sign = byte0;
    //   40   84:aload_0         
    //   41   85:iload_1         
    //   42   86:putfield        #4   <Field byte Real.sign>
            return;
    //   43   89:return          
        }
        byte byte1 = sign;
    //   44   90:aload_0         
    //   45   91:getfield        #4   <Field byte Real.sign>
    //   46   94:istore_1        
        sign = 0;
    //   47   95:aload_0         
    //   48   96:iconst_0        
    //   49   97:putfield        #4   <Field byte Real.sign>
        boolean flag = false;
    //   50  100:iconst_0        
    //   51  101:istore_2        
        if(compare(ONE) > 0)
    //*  52  102:aload_0         
    //*  53  103:getstatic       #31  <Field Real Real.ONE>
    //*  54  106:invokespecial   #27  <Method int Real.compare(Real)>
    //*  55  109:ifle            118
        {
            flag = true;
    //   56  112:iconst_1        
    //   57  113:istore_2        
            recip();
    //   58  114:aload_0         
    //   59  115:invokevirtual   #62  <Method void Real.recip()>
        }
        tmp1.mantissa = SQRT2.mantissa;
    //   60  118:getstatic       #107 <Field Real Real.tmp1>
    //   61  121:getstatic       #126 <Field Real Real.SQRT2>
    //   62  124:getfield        #2   <Field long Real.mantissa>
    //   63  127:putfield        #2   <Field long Real.mantissa>
        tmp1.exponent = SQRT2.exponent;
    //   64  130:getstatic       #107 <Field Real Real.tmp1>
    //   65  133:getstatic       #126 <Field Real Real.SQRT2>
    //   66  136:getfield        #3   <Field int Real.exponent>
    //   67  139:putfield        #3   <Field int Real.exponent>
        tmp1.sign = SQRT2.sign;
    //   68  142:getstatic       #107 <Field Real Real.tmp1>
    //   69  145:getstatic       #126 <Field Real Real.SQRT2>
    //   70  148:getfield        #4   <Field byte Real.sign>
    //   71  151:putfield        #4   <Field byte Real.sign>
        tmp1.sub(ONE);
    //   72  154:getstatic       #107 <Field Real Real.tmp1>
    //   73  157:getstatic       #31  <Field Real Real.ONE>
    //   74  160:invokevirtual   #95  <Method void Real.sub(Real)>
        boolean flag1 = false;
    //   75  163:iconst_0        
    //   76  164:istore_3        
        if(compare(tmp1) > 0)
    //*  77  165:aload_0         
    //*  78  166:getstatic       #107 <Field Real Real.tmp1>
    //*  79  169:invokespecial   #27  <Method int Real.compare(Real)>
    //*  80  172:ifle            239
        {
            flag1 = true;
    //   81  175:iconst_1        
    //   82  176:istore_3        
            tmp2.mantissa = mantissa;
    //   83  177:getstatic       #100 <Field Real Real.tmp2>
    //   84  180:aload_0         
    //   85  181:getfield        #2   <Field long Real.mantissa>
    //   86  184:putfield        #2   <Field long Real.mantissa>
            tmp2.exponent = exponent;
    //   87  187:getstatic       #100 <Field Real Real.tmp2>
    //   88  190:aload_0         
    //   89  191:getfield        #3   <Field int Real.exponent>
    //   90  194:putfield        #3   <Field int Real.exponent>
            tmp2.sign = sign;
    //   91  197:getstatic       #100 <Field Real Real.tmp2>
    //   92  200:aload_0         
    //   93  201:getfield        #4   <Field byte Real.sign>
    //   94  204:putfield        #4   <Field byte Real.sign>
            sub(tmp1);
    //   95  207:aload_0         
    //   96  208:getstatic       #107 <Field Real Real.tmp1>
    //   97  211:invokevirtual   #95  <Method void Real.sub(Real)>
            tmp2.mul(tmp1);
    //   98  214:getstatic       #100 <Field Real Real.tmp2>
    //   99  217:getstatic       #107 <Field Real Real.tmp1>
    //  100  220:invokevirtual   #76  <Method void Real.mul(Real)>
            tmp2.add(ONE);
    //  101  223:getstatic       #100 <Field Real Real.tmp2>
    //  102  226:getstatic       #31  <Field Real Real.ONE>
    //  103  229:invokevirtual   #47  <Method void Real.add(Real)>
            div(tmp2);
    //  104  232:aload_0         
    //  105  233:getstatic       #100 <Field Real Real.tmp2>
    //  106  236:invokevirtual   #89  <Method void Real.div(Real)>
        }
        atanInternal();
    //  107  239:aload_0         
    //  108  240:invokespecial   #127 <Method void Real.atanInternal()>
        if(flag1)
    //* 109  243:iload_3         
    //* 110  244:ifeq            254
            add(PI_8);
    //  111  247:aload_0         
    //  112  248:getstatic       #128 <Field Real Real.PI_8>
    //  113  251:invokevirtual   #47  <Method void Real.add(Real)>
        if(flag)
    //* 114  254:iload_2         
    //* 115  255:ifeq            269
        {
            neg();
    //  116  258:aload_0         
    //  117  259:invokevirtual   #35  <Method void Real.neg()>
            add(PI_2);
    //  118  262:aload_0         
    //  119  263:getstatic       #116 <Field Real Real.PI_2>
    //  120  266:invokevirtual   #47  <Method void Real.add(Real)>
        }
        sign = byte1;
    //  121  269:aload_0         
    //  122  270:iload_1         
    //  123  271:putfield        #4   <Field byte Real.sign>
        /* return; */
    //  124  274:return          
    }

    // Decompiling method: atan2  Signature: (LReal;)V
    // Max stack: 4, #locals: 4, #params: 2
    // Code length: 152 bytes, Code offset: 22069
    // Parameter  0 added: Name this Type LReal; At 0 152 Range 0 151 Init 0 fixed
    // Parameter  1 added: Name real Type LReal; At 0 152 Range 0 151 Init 0
    // RetValue   4 added: Name <returnValue> Type V At 0 152 Range 0 151 Init 0 fixed
    // LocalVar   2 added: Name byte0 Type B At 106 42 Range 106 147 Init 106
    // LocalVar   3 added: Name byte1 Type B At 111 21 Range 111 131 Init 111
    public void atan2(Real real)
    {
        if(exponent < 0 && mantissa != 0L || real.exponent < 0 && real.mantissa != 0L || exponent < 0 && mantissa == 0L && real.exponent < 0 && real.mantissa == 0L)
    //*   0    0:aload_0         
    //*   1    1:getfield        #3   <Field int Real.exponent>
    //*   2    4:ifge            16
    //*   3    7:aload_0         
    //*   4    8:getfield        #2   <Field long Real.mantissa>
    //*   5   11:lconst_0        
    //*   6   12:lcmp            
    //*   7   13:ifne            64
    //*   8   16:aload_1         
    //*   9   17:getfield        #3   <Field int Real.exponent>
    //*  10   20:ifge            32
    //*  11   23:aload_1         
    //*  12   24:getfield        #2   <Field long Real.mantissa>
    //*  13   27:lconst_0        
    //*  14   28:lcmp            
    //*  15   29:ifne            64
    //*  16   32:aload_0         
    //*  17   33:getfield        #3   <Field int Real.exponent>
    //*  18   36:ifge            69
    //*  19   39:aload_0         
    //*  20   40:getfield        #2   <Field long Real.mantissa>
    //*  21   43:lconst_0        
    //*  22   44:lcmp            
    //*  23   45:ifne            69
    //*  24   48:aload_1         
    //*  25   49:getfield        #3   <Field int Real.exponent>
    //*  26   52:ifge            69
    //*  27   55:aload_1         
    //*  28   56:getfield        #2   <Field long Real.mantissa>
    //*  29   59:lconst_0        
    //*  30   60:lcmp            
    //*  31   61:ifne            69
        {
            makeNan();
    //   32   64:aload_0         
    //   33   65:invokevirtual   #23  <Method void Real.makeNan()>
            return;
    //   34   68:return          
        }
        if(exponent == 0 && mantissa == 0L && real.exponent == 0 && real.mantissa == 0L)
    //*  35   69:aload_0         
    //*  36   70:getfield        #3   <Field int Real.exponent>
    //*  37   73:ifne            102
    //*  38   76:aload_0         
    //*  39   77:getfield        #2   <Field long Real.mantissa>
    //*  40   80:lconst_0        
    //*  41   81:lcmp            
    //*  42   82:ifne            102
    //*  43   85:aload_1         
    //*  44   86:getfield        #3   <Field int Real.exponent>
    //*  45   89:ifne            102
    //*  46   92:aload_1         
    //*  47   93:getfield        #2   <Field long Real.mantissa>
    //*  48   96:lconst_0        
    //*  49   97:lcmp            
    //*  50   98:ifne            102
            return;
    //   51  101:return          
        byte byte0 = sign;
    //   52  102:aload_0         
    //   53  103:getfield        #4   <Field byte Real.sign>
    //   54  106:istore_2        
        byte byte1 = real.sign;
    //   55  107:aload_1         
    //   56  108:getfield        #4   <Field byte Real.sign>
    //   57  111:istore_3        
        sign = 0;
    //   58  112:aload_0         
    //   59  113:iconst_0        
    //   60  114:putfield        #4   <Field byte Real.sign>
        real.sign = 0;
    //   61  117:aload_1         
    //   62  118:iconst_0        
    //   63  119:putfield        #4   <Field byte Real.sign>
        div(real);
    //   64  122:aload_0         
    //   65  123:aload_1         
    //   66  124:invokevirtual   #89  <Method void Real.div(Real)>
        atan();
    //   67  127:aload_0         
    //   68  128:invokevirtual   #124 <Method void Real.atan()>
        if(byte1 != 0)
    //*  69  131:iload_3         
    //*  70  132:ifeq            146
        {
            neg();
    //   71  135:aload_0         
    //   72  136:invokevirtual   #35  <Method void Real.neg()>
            add(PI);
    //   73  139:aload_0         
    //   74  140:getstatic       #115 <Field Real Real.PI>
    //   75  143:invokevirtual   #47  <Method void Real.add(Real)>
        }
        sign = byte0;
    //   76  146:aload_0         
    //   77  147:iload_2         
    //   78  148:putfield        #4   <Field byte Real.sign>
        /* return; */
    //   79  151:return          
    }

    // Decompiling method: floorDiv  Signature: (II)I
    // Max stack: 2, #locals: 2, #params: 2
    // Code length: 18 bytes, Code offset: 22329
    // Parameter  0 added: Name i Type I At 0 18 Range 0 17 Init 0
    // Parameter  1 added: Name j Type I At 0 18 Range 0 17 Init 0
    // RetValue   2 added: Name <returnValue> Type I At 0 18 Range 0 17 Init 0 fixed
    private static int floorDiv(int i, int j)
    {
        if(i >= 0)
    //*   0    0:iload_0         
    //*   1    1:iflt            8
            return i / j;
    //    2    4:iload_0         
    //    3    5:iload_1         
    //    4    6:idiv            
    //    5    7:ireturn         
        else
            return -(((-i + j) - 1) / j);
    //    6    8:iload_0         
    //    7    9:ineg            
    //    8   10:iload_1         
    //    9   11:iadd            
    //   10   12:iconst_1        
    //   11   13:isub            
    //   12   14:iload_1         
    //   13   15:idiv            
    //   14   16:ineg            
    //   15   17:ireturn         
    }

    // Decompiling method: floorMod  Signature: (II)I
    // Max stack: 3, #locals: 2, #params: 2
    // Code length: 21 bytes, Code offset: 22389
    // Parameter  0 added: Name i Type I At 0 21 Range 0 20 Init 0
    // Parameter  1 added: Name j Type I At 0 21 Range 0 20 Init 0
    // RetValue   2 added: Name <returnValue> Type I At 0 21 Range 0 20 Init 0 fixed
    private static int floorMod(int i, int j)
    {
        if(i >= 0)
    //*   0    0:iload_0         
    //*   1    1:iflt            8
            return i % j;
    //    2    4:iload_0         
    //    3    5:iload_1         
    //    4    6:irem            
    //    5    7:ireturn         
        else
            return i + (((-i + j) - 1) / j) * j;
    //    6    8:iload_0         
    //    7    9:iload_0         
    //    8   10:ineg            
    //    9   11:iload_1         
    //   10   12:iadd            
    //   11   13:iconst_1        
    //   12   14:isub            
    //   13   15:iload_1         
    //   14   16:idiv            
    //   15   17:iload_1         
    //   16   18:imul            
    //   17   19:iadd            
    //   18   20:ireturn         
    }

    // Decompiling method: digit  Signature: (CIZ)I
    // Max stack: 3, #locals: 5, #params: 4
    // Code length: 68 bytes, Code offset: 22452
    // Parameter  0 added: Name this Type LReal; At 0 68 Range 0 67 Init 0 fixed
    // Parameter  1 added: Name c Type C At 0 68 Range 0 67 Init 0
    // Parameter  2 added: Name i Type I At 0 68 Range 0 67 Init 0
    // Parameter  3 added: Name flag Type Z At 0 68 Range 0 67 Init 0
    // RetValue   5 added: Name <returnValue> Type I At 0 68 Range 0 67 Init 0 fixed
    // LocalVar   4 added: Name byte0 Type B At 1 66 Range 1 66 Init 1
    // LocalVar   4 chged: Name j Oname byte0 Type I At 19 48 Range 1 66 Init 1
    private int digit(char c, int i, boolean flag)
    {
        int j = -1;
    //    0    0:iconst_m1       
    //    1    1:istore          4
        if(c >= '0' && c <= '9')
    //*   2    3:iload_1         
    //*   3    4:bipush          48
    //*   4    6:icmplt          24
    //*   5    9:iload_1         
    //*   6   10:bipush          57
    //*   7   12:icmpgt          24
            j = c - 48;
    //    8   15:iload_1         
    //    9   16:bipush          48
    //   10   18:isub            
    //   11   19:istore          4
        else
    //*  12   21:goto            45
        if(c >= 'A' && c <= 'F')
    //*  13   24:iload_1         
    //*  14   25:bipush          65
    //*  15   27:icmplt          45
    //*  16   30:iload_1         
    //*  17   31:bipush          70
    //*  18   33:icmpgt          45
            j = (c - 65) + 10;
    //   19   36:iload_1         
    //   20   37:bipush          65
    //   21   39:isub            
    //   22   40:bipush          10
    //   23   42:iadd            
    //   24   43:istore          4
        if(j >= i)
    //*  25   45:iload           4
    //*  26   47:iload_2         
    //*  27   48:icmplt          53
            return -1;
    //   28   51:iconst_m1       
    //   29   52:ireturn         
        if(flag)
    //*  30   53:iload_3         
    //*  31   54:ifeq            65
            j ^= i - 1;
    //   32   57:iload           4
    //   33   59:iload_2         
    //   34   60:iconst_1        
    //   35   61:isub            
    //   36   62:ixor            
    //   37   63:istore          4
        return j;
    //   38   65:iload           4
    //   39   67:ireturn         
    }

    // Decompiling method: shiftUp  Signature: (I)V
    // Max stack: 2, #locals: 2, #params: 2
    // Code length: 46 bytes, Code offset: 22606
    // Parameter  0 added: Name this Type LReal; At 0 46 Range 0 45 Init 0 fixed
    // Parameter  1 added: Name i Type I At 0 46 Range 0 45 Init 0
    // RetValue   2 added: Name <returnValue> Type V At 0 46 Range 0 45 Init 0 fixed
    private void shiftUp(int i)
    {
        if(i == 2)
    //*   0    0:iload_1         
    //*   1    1:iconst_2        
    //*   2    2:icmpne          13
            scalbn(1);
    //    3    5:aload_0         
    //    4    6:iconst_1        
    //    5    7:invokevirtual   #66  <Method void Real.scalbn(int)>
        else
    //*   6   10:goto            45
        if(i == 8)
    //*   7   13:iload_1         
    //*   8   14:bipush          8
    //*   9   16:icmpne          27
            scalbn(3);
    //   10   19:aload_0         
    //   11   20:iconst_3        
    //   12   21:invokevirtual   #66  <Method void Real.scalbn(int)>
        else
    //*  13   24:goto            45
        if(i == 16)
    //*  14   27:iload_1         
    //*  15   28:bipush          16
    //*  16   30:icmpne          41
            scalbn(4);
    //   17   33:aload_0         
    //   18   34:iconst_4        
    //   19   35:invokevirtual   #66  <Method void Real.scalbn(int)>
        else
    //*  20   38:goto            45
            mul10();
    //   21   41:aload_0         
    //   22   42:invokespecial   #106 <Method void Real.mul10()>
        /* return; */
    //   23   45:return          
    }

    // Decompiling method: atof  Signature: (Ljava/lang/String;I)V
    // Max stack: 4, #locals: 10, #params: 3
    // Code length: 668 bytes, Code offset: 22726
    // Parameter  0 added: Name this Type LReal; At 0 668 Range 0 667 Init 0 fixed
    // Parameter  1 added: Name s Type Ljava/lang/String; At 0 668 Range 0 667 Init 0
    // Parameter  2 added: Name i Type I At 0 668 Range 0 667 Init 0
    // RetValue  10 added: Name <returnValue> Type V At 0 668 Range 0 667 Init 0 fixed
    // LocalVar   3 added: Name j Type I At 8 439 Range 8 446 Init 8
    // LocalVar   4 added: Name flag Type Z At 10 454 Range 10 463 Init 10
    // LocalVar   5 added: Name flag1 Type Z At 13 651 Range 13 663 Init 13
    // LocalVar   6 added: Name flag2 Type Z At 16 282 Range 16 297 Init 16
    // LocalVar   4 chged: Name k Oname flag Type I At 24 2 Range 10 463 Init 10
    // LocalVar   7 added: Name l Type I At 125 30 Range 125 154 Init 153
    // LocalVar   7 added: Name i1 Type I At 241 30 Range 241 270 Init 269
    // LocalVar   8 added: Name flag Type Z At 363 288 Range 363 650 Init 363
    // LocalVar   9 added: Name flag3 Type Z At 366 108 Range 366 473 Init 366
    // LocalVar   8 chged: Name j1 Oname flag Type I At 477 2 Range 363 650 Init 363
    // LocalVar   5 chged: Name byte0 Oname flag1 Type B At 662 2 Range 13 663 Init 13
    private void atof(String s, int i)
    {
        makeZero();
    //    0    0:aload_0         
    //    1    1:invokevirtual   #8   <Method void Real.makeZero()>
        int j = s.length();
    //    2    4:aload_1         
    //    3    5:invokevirtual   #12  <Method int java.lang.String.length()>
    //    4    8:istore_3        
        int k = 0;
    //    5    9:iconst_0        
    //    6   10:istore          4
        byte byte0 = 0;
    //    7   12:iconst_0        
    //    8   13:istore          5
        boolean flag = false;
    //    9   15:iconst_0        
    //   10   16:istore          6
    //*  11   18:goto            24
        for(; k < j && s.charAt(k) == ' '; k++);
    //   12   21:iinc            4  1
    //   13   24:iload           4
    //   14   26:iload_3         
    //   15   27:icmpge          41
    //   16   30:aload_1         
    //   17   31:iload           4
    //   18   33:invokevirtual   #129 <Method char java.lang.String.charAt(int)>
    //   19   36:bipush          32
    //   20   38:icmpeq          21
        if(k < j && s.charAt(k) == '-')
    //*  21   41:iload           4
    //*  22   43:iload_3         
    //*  23   44:icmpge          67
    //*  24   47:aload_1         
    //*  25   48:iload           4
    //*  26   50:invokevirtual   #129 <Method char java.lang.String.charAt(int)>
    //*  27   53:bipush          45
    //*  28   55:icmpne          67
        {
            byte0 = 1;
    //   29   58:iconst_1        
    //   30   59:istore          5
            k++;
    //   31   61:iinc            4  1
        } else
    //*  32   64:goto            133
        if(k < j && s.charAt(k) == '+')
    //*  33   67:iload           4
    //*  34   69:iload_3         
    //*  35   70:icmpge          90
    //*  36   73:aload_1         
    //*  37   74:iload           4
    //*  38   76:invokevirtual   #129 <Method char java.lang.String.charAt(int)>
    //*  39   79:bipush          43
    //*  40   81:icmpne          90
            k++;
    //   41   84:iinc            4  1
        else
    //*  42   87:goto            133
        if(k < j && s.charAt(k) == '/')
    //*  43   90:iload           4
    //*  44   92:iload_3         
    //*  45   93:icmpge          133
    //*  46   96:aload_1         
    //*  47   97:iload           4
    //*  48   99:invokevirtual   #129 <Method char java.lang.String.charAt(int)>
    //*  49  102:bipush          47
    //*  50  104:icmpne          133
        {
            flag = true;
    //   51  107:iconst_1        
    //   52  108:istore          6
            byte0 = 1;
    //   53  110:iconst_1        
    //   54  111:istore          5
            k++;
    //   55  113:iinc            4  1
        }
    //*  56  116:goto            133
        int l;
        for(; k < j && (l = digit(s.charAt(k), i, flag)) >= 0; k++)
        {
            shiftUp(i);
    //   57  119:aload_0         
    //   58  120:iload_2         
    //   59  121:invokespecial   #130 <Method void Real.shiftUp(int)>
            add(l);
    //   60  124:aload_0         
    //   61  125:iload           7
    //   62  127:invokevirtual   #131 <Method void Real.add(int)>
        }

    //   63  130:iinc            4  1
    //   64  133:iload           4
    //   65  135:iload_3         
    //   66  136:icmpge          158
    //   67  139:aload_0         
    //   68  140:aload_1         
    //   69  141:iload           4
    //   70  143:invokevirtual   #129 <Method char java.lang.String.charAt(int)>
    //   71  146:iload_2         
    //   72  147:iload           6
    //   73  149:invokespecial   #132 <Method int Real.digit(char, int, boolean)>
    //   74  152:dup             
    //   75  153:istore          7
    //   76  155:ifge            119
        if(k < j && (s.charAt(k) == '.' || s.charAt(k) == ','))
    //*  77  158:iload           4
    //*  78  160:iload_3         
    //*  79  161:icmpge          296
    //*  80  164:aload_1         
    //*  81  165:iload           4
    //*  82  167:invokevirtual   #129 <Method char java.lang.String.charAt(int)>
    //*  83  170:bipush          46
    //*  84  172:icmpeq          186
    //*  85  175:aload_1         
    //*  86  176:iload           4
    //*  87  178:invokevirtual   #129 <Method char java.lang.String.charAt(int)>
    //*  88  181:bipush          44
    //*  89  183:icmpne          296
        {
            k++;
    //   90  186:iinc            4  1
            tmp2.mantissa = ONE.mantissa;
    //   91  189:getstatic       #100 <Field Real Real.tmp2>
    //   92  192:getstatic       #31  <Field Real Real.ONE>
    //   93  195:getfield        #2   <Field long Real.mantissa>
    //   94  198:putfield        #2   <Field long Real.mantissa>
            tmp2.exponent = ONE.exponent;
    //   95  201:getstatic       #100 <Field Real Real.tmp2>
    //   96  204:getstatic       #31  <Field Real Real.ONE>
    //   97  207:getfield        #3   <Field int Real.exponent>
    //   98  210:putfield        #3   <Field int Real.exponent>
            tmp2.sign = ONE.sign;
    //   99  213:getstatic       #100 <Field Real Real.tmp2>
    //  100  216:getstatic       #31  <Field Real Real.ONE>
    //  101  219:getfield        #4   <Field byte Real.sign>
    //  102  222:putfield        #4   <Field byte Real.sign>
    //* 103  225:goto            249
            int i1;
            for(; k < j && (i1 = digit(s.charAt(k), i, flag)) >= 0; k++)
            {
                tmp2.shiftUp(i);
    //  104  228:getstatic       #100 <Field Real Real.tmp2>
    //  105  231:iload_2         
    //  106  232:invokespecial   #130 <Method void Real.shiftUp(int)>
                shiftUp(i);
    //  107  235:aload_0         
    //  108  236:iload_2         
    //  109  237:invokespecial   #130 <Method void Real.shiftUp(int)>
                add(i1);
    //  110  240:aload_0         
    //  111  241:iload           7
    //  112  243:invokevirtual   #131 <Method void Real.add(int)>
            }

    //  113  246:iinc            4  1
    //  114  249:iload           4
    //  115  251:iload_3         
    //  116  252:icmpge          274
    //  117  255:aload_0         
    //  118  256:aload_1         
    //  119  257:iload           4
    //  120  259:invokevirtual   #129 <Method char java.lang.String.charAt(int)>
    //  121  262:iload_2         
    //  122  263:iload           6
    //  123  265:invokespecial   #132 <Method int Real.digit(char, int, boolean)>
    //  124  268:dup             
    //  125  269:istore          7
    //  126  271:ifge            228
            if(flag)
    //* 127  274:iload           6
    //* 128  276:ifeq            286
                add(ONE);
    //  129  279:aload_0         
    //  130  280:getstatic       #31  <Field Real Real.ONE>
    //  131  283:invokevirtual   #47  <Method void Real.add(Real)>
            div(tmp2);
    //  132  286:aload_0         
    //  133  287:getstatic       #100 <Field Real Real.tmp2>
    //  134  290:invokevirtual   #89  <Method void Real.div(Real)>
        } else
    //* 135  293:goto            314
        if(flag)
    //* 136  296:iload           6
    //* 137  298:ifeq            314
            add(ONE);
    //  138  301:aload_0         
    //  139  302:getstatic       #31  <Field Real Real.ONE>
    //  140  305:invokevirtual   #47  <Method void Real.add(Real)>
    //* 141  308:goto            314
        for(; k < j && s.charAt(k) == ' '; k++);
    //  142  311:iinc            4  1
    //  143  314:iload           4
    //  144  316:iload_3         
    //  145  317:icmpge          331
    //  146  320:aload_1         
    //  147  321:iload           4
    //  148  323:invokevirtual   #129 <Method char java.lang.String.charAt(int)>
    //  149  326:bipush          32
    //  150  328:icmpeq          311
        if(k < j && (s.charAt(k) == 'e' || s.charAt(k) == 'E'))
    //* 151  331:iload           4
    //* 152  333:iload_3         
    //* 153  334:icmpge          661
    //* 154  337:aload_1         
    //* 155  338:iload           4
    //* 156  340:invokevirtual   #129 <Method char java.lang.String.charAt(int)>
    //* 157  343:bipush          101
    //* 158  345:icmpeq          359
    //* 159  348:aload_1         
    //* 160  349:iload           4
    //* 161  351:invokevirtual   #129 <Method char java.lang.String.charAt(int)>
    //* 162  354:bipush          69
    //* 163  356:icmpne          661
        {
            k++;
    //  164  359:iinc            4  1
            int j1 = 0;
    //  165  362:iconst_0        
    //  166  363:istore          8
            boolean flag1 = false;
    //  167  365:iconst_0        
    //  168  366:istore          9
            if(k < j && s.charAt(k) == '-')
    //* 169  368:iload           4
    //* 170  370:iload_3         
    //* 171  371:icmpge          394
    //* 172  374:aload_1         
    //* 173  375:iload           4
    //* 174  377:invokevirtual   #129 <Method char java.lang.String.charAt(int)>
    //* 175  380:bipush          45
    //* 176  382:icmpne          394
            {
                flag1 = true;
    //  177  385:iconst_1        
    //  178  386:istore          9
                k++;
    //  179  388:iinc            4  1
            } else
    //* 180  391:goto            444
            if(k < j && s.charAt(k) == '+')
    //* 181  394:iload           4
    //* 182  396:iload_3         
    //* 183  397:icmpge          444
    //* 184  400:aload_1         
    //* 185  401:iload           4
    //* 186  403:invokevirtual   #129 <Method char java.lang.String.charAt(int)>
    //* 187  406:bipush          43
    //* 188  408:icmpne          444
                k++;
    //  189  411:iinc            4  1
    //* 190  414:goto            444
            for(; k < j && s.charAt(k) >= '0' && s.charAt(k) <= '9'; k++)
                if(j1 < 0x17d78400)
    //* 191  417:iload           8
    //* 192  419:ldc1            #133 <Int 0x17d78400>
    //* 193  421:icmpge          441
                    j1 = j1 * 10 + (s.charAt(k) - 48);
    //  194  424:iload           8
    //  195  426:bipush          10
    //  196  428:imul            
    //  197  429:aload_1         
    //  198  430:iload           4
    //  199  432:invokevirtual   #129 <Method char java.lang.String.charAt(int)>
    //  200  435:bipush          48
    //  201  437:isub            
    //  202  438:iadd            
    //  203  439:istore          8

    //  204  441:iinc            4  1
    //  205  444:iload           4
    //  206  446:iload_3         
    //  207  447:icmpge          472
    //  208  450:aload_1         
    //  209  451:iload           4
    //  210  453:invokevirtual   #129 <Method char java.lang.String.charAt(int)>
    //  211  456:bipush          48
    //  212  458:icmplt          472
    //  213  461:aload_1         
    //  214  462:iload           4
    //  215  464:invokevirtual   #129 <Method char java.lang.String.charAt(int)>
    //  216  467:bipush          57
    //  217  469:icmple          417
            if(flag1)
    //* 218  472:iload           9
    //* 219  474:ifeq            482
                j1 = -j1;
    //  220  477:iload           8
    //  221  479:ineg            
    //  222  480:istore          8
            if(i == 2)
    //* 223  482:iload_2         
    //* 224  483:iconst_2        
    //* 225  484:icmpne          496
                scalbn(j1);
    //  226  487:aload_0         
    //  227  488:iload           8
    //  228  490:invokevirtual   #66  <Method void Real.scalbn(int)>
            else
    //* 229  493:goto            661
            if(i == 8)
    //* 230  496:iload_2         
    //* 231  497:bipush          8
    //* 232  499:icmpne          513
                scalbn(j1 * 3);
    //  233  502:aload_0         
    //  234  503:iload           8
    //  235  505:iconst_3        
    //  236  506:imul            
    //  237  507:invokevirtual   #66  <Method void Real.scalbn(int)>
            else
    //* 238  510:goto            661
            if(i == 16)
    //* 239  513:iload_2         
    //* 240  514:bipush          16
    //* 241  516:icmpne          530
            {
                scalbn(j1 * 4);
    //  242  519:aload_0         
    //  243  520:iload           8
    //  244  522:iconst_4        
    //  245  523:imul            
    //  246  524:invokevirtual   #66  <Method void Real.scalbn(int)>
            } else
    //* 247  527:goto            661
            {
                if(exponent > 0x11e1a300 || exponent < 0xee1e5d00)
    //* 248  530:aload_0         
    //* 249  531:getfield        #3   <Field int Real.exponent>
    //* 250  534:ldc1            #134 <Int 0x11e1a300>
    //* 251  536:icmpgt          548
    //* 252  539:aload_0         
    //* 253  540:getfield        #3   <Field int Real.exponent>
    //* 254  543:ldc1            #135 <Int 0xee1e5d00>
    //* 255  545:icmpge          610
                {
                    tmp1.mantissa = TEN.mantissa;
    //  256  548:getstatic       #107 <Field Real Real.tmp1>
    //  257  551:getstatic       #103 <Field Real Real.TEN>
    //  258  554:getfield        #2   <Field long Real.mantissa>
    //  259  557:putfield        #2   <Field long Real.mantissa>
                    tmp1.exponent = TEN.exponent;
    //  260  560:getstatic       #107 <Field Real Real.tmp1>
    //  261  563:getstatic       #103 <Field Real Real.TEN>
    //  262  566:getfield        #3   <Field int Real.exponent>
    //  263  569:putfield        #3   <Field int Real.exponent>
                    tmp1.sign = TEN.sign;
    //  264  572:getstatic       #107 <Field Real Real.tmp1>
    //  265  575:getstatic       #103 <Field Real Real.TEN>
    //  266  578:getfield        #4   <Field byte Real.sign>
    //  267  581:putfield        #4   <Field byte Real.sign>
                    tmp1.pow(j1 / 2);
    //  268  584:getstatic       #107 <Field Real Real.tmp1>
    //  269  587:iload           8
    //  270  589:iconst_2        
    //  271  590:idiv            
    //  272  591:invokevirtual   #104 <Method void Real.pow(int)>
                    mul(tmp1);
    //  273  594:aload_0         
    //  274  595:getstatic       #107 <Field Real Real.tmp1>
    //  275  598:invokevirtual   #76  <Method void Real.mul(Real)>
                    j1 -= j1 / 2;
    //  276  601:iload           8
    //  277  603:iload           8
    //  278  605:iconst_2        
    //  279  606:idiv            
    //  280  607:isub            
    //  281  608:istore          8
                }
                tmp1.mantissa = TEN.mantissa;
    //  282  610:getstatic       #107 <Field Real Real.tmp1>
    //  283  613:getstatic       #103 <Field Real Real.TEN>
    //  284  616:getfield        #2   <Field long Real.mantissa>
    //  285  619:putfield        #2   <Field long Real.mantissa>
                tmp1.exponent = TEN.exponent;
    //  286  622:getstatic       #107 <Field Real Real.tmp1>
    //  287  625:getstatic       #103 <Field Real Real.TEN>
    //  288  628:getfield        #3   <Field int Real.exponent>
    //  289  631:putfield        #3   <Field int Real.exponent>
                tmp1.sign = TEN.sign;
    //  290  634:getstatic       #107 <Field Real Real.tmp1>
    //  291  637:getstatic       #103 <Field Real Real.TEN>
    //  292  640:getfield        #4   <Field byte Real.sign>
    //  293  643:putfield        #4   <Field byte Real.sign>
                tmp1.pow(j1);
    //  294  646:getstatic       #107 <Field Real Real.tmp1>
    //  295  649:iload           8
    //  296  651:invokevirtual   #104 <Method void Real.pow(int)>
                mul(tmp1);
    //  297  654:aload_0         
    //  298  655:getstatic       #107 <Field Real Real.tmp1>
    //  299  658:invokevirtual   #76  <Method void Real.mul(Real)>
            }
        }
        sign = byte0;
    //  300  661:aload_0         
    //  301  662:iload           5
    //  302  664:putfield        #4   <Field byte Real.sign>
        /* return; */
    //  303  667:return          
    }

    // Decompiling method: normalizeBCD  Signature: ()V
    // Max stack: 7, #locals: 4, #params: 1
    // Code length: 204 bytes, Code offset: 23973
    // Parameter  0 added: Name this Type LReal; At 0 204 Range 0 203 Init 0 fixed
    // RetValue   4 added: Name <returnValue> Type V At 0 204 Range 0 203 Init 0 fixed
    // LocalVar   1 added: Name flag Type Z At 16 74 Range 16 89 Init 16
    // LocalVar   2 added: Name flag1 Type Z At 18 66 Range 18 83 Init 18
    // LocalVar   2 chged: Name i Oname flag1 Type I At 83 1 Range 18 83 Init 18
    // LocalVar   1 chged: Name j Oname flag Type I At 33 1 Range 16 89 Init 16
    // LocalVar   3 added: Name k Type I At 35 38 Range 35 72 Init 35
    private void normalizeBCD()
    {
        if(mantissa == 0L)
    //*   0    0:aload_0         
    //*   1    1:getfield        #2   <Field long Real.mantissa>
    //*   2    4:lconst_0        
    //*   3    5:lcmp            
    //*   4    6:ifne            15
        {
            exponent = 0;
    //    5    9:aload_0         
    //    6   10:iconst_0        
    //    7   11:putfield        #3   <Field int Real.exponent>
            return;
    //    8   14:return          
        }
        int i = 0;
    //    9   15:iconst_0        
    //   10   16:istore_1        
        for(int j = 0; j < 64; j += 4)
    //*  11   17:iconst_0        
    //*  12   18:istore_2        
    //*  13   19:goto            83
        {
            int k = (int)(mantissa >>> j & 15L) + i;
    //   14   22:aload_0         
    //   15   23:getfield        #2   <Field long Real.mantissa>
    //   16   26:iload_2         
    //   17   27:lushr           
    //   18   28:ldc2w           #136 <Long 15L>
    //   19   31:land            
    //   20   32:l2i             
    //   21   33:iload_1         
    //   22   34:iadd            
    //   23   35:istore_3        
            i = 0;
    //   24   36:iconst_0        
    //   25   37:istore_1        
            if(k >= 10)
    //*  26   38:iload_3         
    //*  27   39:bipush          10
    //*  28   41:icmplt          49
            {
                k -= 10;
    //   29   44:iinc            3  -10
                i = 1;
    //   30   47:iconst_1        
    //   31   48:istore_1        
            }
            mantissa &= ~(15L << j);
    //   32   49:aload_0         
    //   33   50:dup             
    //   34   51:getfield        #2   <Field long Real.mantissa>
    //   35   54:ldc2w           #136 <Long 15L>
    //   36   57:iload_2         
    //   37   58:lshl            
    //   38   59:ldc2w           #33  <Long -1L>
    //   39   62:lxor            
    //   40   63:land            
    //   41   64:putfield        #2   <Field long Real.mantissa>
            mantissa += (long)k << j;
    //   42   67:aload_0         
    //   43   68:dup             
    //   44   69:getfield        #2   <Field long Real.mantissa>
    //   45   72:iload_3         
    //   46   73:i2l             
    //   47   74:iload_2         
    //   48   75:lshl            
    //   49   76:ladd            
    //   50   77:putfield        #2   <Field long Real.mantissa>
        }

    //   51   80:iinc            2  4
    //   52   83:iload_2         
    //   53   84:bipush          64
    //   54   86:icmplt          22
        if(i != 0)
    //*  55   89:iload_1         
    //*  56   90:ifeq            191
        {
            if((int)(mantissa & 15L) >= 5)
    //*  57   93:aload_0         
    //*  58   94:getfield        #2   <Field long Real.mantissa>
    //*  59   97:ldc2w           #136 <Long 15L>
    //*  60  100:land            
    //*  61  101:l2i             
    //*  62  102:iconst_5        
    //*  63  103:icmplt          118
                mantissa += 16L;
    //   64  106:aload_0         
    //   65  107:dup             
    //   66  108:getfield        #2   <Field long Real.mantissa>
    //   67  111:ldc2w           #138 <Long 16L>
    //   68  114:ladd            
    //   69  115:putfield        #2   <Field long Real.mantissa>
            mantissa >>>= 4;
    //   70  118:aload_0         
    //   71  119:dup             
    //   72  120:getfield        #2   <Field long Real.mantissa>
    //   73  123:iconst_4        
    //   74  124:lushr           
    //   75  125:putfield        #2   <Field long Real.mantissa>
            mantissa += 0x1000000000000000L;
    //   76  128:aload_0         
    //   77  129:dup             
    //   78  130:getfield        #2   <Field long Real.mantissa>
    //   79  133:ldc2w           #140 <Long 0x1000000000000000L>
    //   80  136:ladd            
    //   81  137:putfield        #2   <Field long Real.mantissa>
            exponent++;
    //   82  140:aload_0         
    //   83  141:dup             
    //   84  142:getfield        #3   <Field int Real.exponent>
    //   85  145:iconst_1        
    //   86  146:iadd            
    //   87  147:putfield        #3   <Field int Real.exponent>
            if((int)(mantissa & 15L) >= 10)
    //*  88  150:aload_0         
    //*  89  151:getfield        #2   <Field long Real.mantissa>
    //*  90  154:ldc2w           #136 <Long 15L>
    //*  91  157:land            
    //*  92  158:l2i             
    //*  93  159:bipush          10
    //*  94  161:icmplt          191
                normalizeBCD();
    //   95  164:aload_0         
    //   96  165:invokespecial   #142 <Method void Real.normalizeBCD()>
        }
    //*  97  168:goto            191
        while(mantissa >>> 60 == 0L) 
        {
            mantissa <<= 4;
    //   98  171:aload_0         
    //   99  172:dup             
    //  100  173:getfield        #2   <Field long Real.mantissa>
    //  101  176:iconst_4        
    //  102  177:lshl            
    //  103  178:putfield        #2   <Field long Real.mantissa>
            exponent--;
    //  104  181:aload_0         
    //  105  182:dup             
    //  106  183:getfield        #3   <Field int Real.exponent>
    //  107  186:iconst_1        
    //  108  187:isub            
    //  109  188:putfield        #3   <Field int Real.exponent>
        }
    //  110  191:aload_0         
    //  111  192:getfield        #2   <Field long Real.mantissa>
    //  112  195:bipush          60
    //  113  197:lushr           
    //  114  198:lconst_0        
    //  115  199:lcmp            
    //  116  200:ifeq            171
        /* return; */
    //  117  203:return          
    }

    // Decompiling method: toBCD  Signature: ()V
    // Max stack: 6, #locals: 2, #params: 1
    // Code length: 339 bytes, Code offset: 24287
    // Parameter  0 added: Name this Type LReal; At 0 339 Range 0 338 Init 0 fixed
    // RetValue   2 added: Name <returnValue> Type V At 0 339 Range 0 338 Init 0 fixed
    // LocalVar   1 added: Name byte0 Type B At 226 83 Range 226 308 Init 226
    // LocalVar   1 chged: Name i Oname byte0 Type I At 305 3 Range 226 308 Init 226
    private void toBCD()
    {
        tmp1.mantissa = mantissa;
    //    0    0:getstatic       #107 <Field Real Real.tmp1>
    //    1    3:aload_0         
    //    2    4:getfield        #2   <Field long Real.mantissa>
    //    3    7:putfield        #2   <Field long Real.mantissa>
        tmp1.exponent = exponent;
    //    4   10:getstatic       #107 <Field Real Real.tmp1>
    //    5   13:aload_0         
    //    6   14:getfield        #3   <Field int Real.exponent>
    //    7   17:putfield        #3   <Field int Real.exponent>
        tmp1.sign = sign;
    //    8   20:getstatic       #107 <Field Real Real.tmp1>
    //    9   23:aload_0         
    //   10   24:getfield        #4   <Field byte Real.sign>
    //   11   27:putfield        #4   <Field byte Real.sign>
        tmp1.abs();
    //   12   30:getstatic       #107 <Field Real Real.tmp1>
    //   13   33:invokevirtual   #108 <Method void Real.abs()>
        tmp2.mantissa = tmp1.mantissa;
    //   14   36:getstatic       #100 <Field Real Real.tmp2>
    //   15   39:getstatic       #107 <Field Real Real.tmp1>
    //   16   42:getfield        #2   <Field long Real.mantissa>
    //   17   45:putfield        #2   <Field long Real.mantissa>
        tmp2.exponent = tmp1.exponent;
    //   18   48:getstatic       #100 <Field Real Real.tmp2>
    //   19   51:getstatic       #107 <Field Real Real.tmp1>
    //   20   54:getfield        #3   <Field int Real.exponent>
    //   21   57:putfield        #3   <Field int Real.exponent>
        tmp2.sign = tmp1.sign;
    //   22   60:getstatic       #100 <Field Real Real.tmp2>
    //   23   63:getstatic       #107 <Field Real Real.tmp1>
    //   24   66:getfield        #4   <Field byte Real.sign>
    //   25   69:putfield        #4   <Field byte Real.sign>
        exponent = tmp1.lowPow10();
    //   26   72:aload_0         
    //   27   73:getstatic       #107 <Field Real Real.tmp1>
    //   28   76:invokevirtual   #143 <Method int Real.lowPow10()>
    //   29   79:putfield        #3   <Field int Real.exponent>
        if(exponent > 0x11e1a300 || exponent < 0xee1e5d00)
    //*  30   82:aload_0         
    //*  31   83:getfield        #3   <Field int Real.exponent>
    //*  32   86:ldc1            #134 <Int 0x11e1a300>
    //*  33   88:icmpgt          100
    //*  34   91:aload_0         
    //*  35   92:getfield        #3   <Field int Real.exponent>
    //*  36   95:ldc1            #135 <Int 0xee1e5d00>
    //*  37   97:icmpge          210
        {
            tmp1.mantissa = TEN.mantissa;
    //   38  100:getstatic       #107 <Field Real Real.tmp1>
    //   39  103:getstatic       #103 <Field Real Real.TEN>
    //   40  106:getfield        #2   <Field long Real.mantissa>
    //   41  109:putfield        #2   <Field long Real.mantissa>
            tmp1.exponent = TEN.exponent;
    //   42  112:getstatic       #107 <Field Real Real.tmp1>
    //   43  115:getstatic       #103 <Field Real Real.TEN>
    //   44  118:getfield        #3   <Field int Real.exponent>
    //   45  121:putfield        #3   <Field int Real.exponent>
            tmp1.sign = TEN.sign;
    //   46  124:getstatic       #107 <Field Real Real.tmp1>
    //   47  127:getstatic       #103 <Field Real Real.TEN>
    //   48  130:getfield        #4   <Field byte Real.sign>
    //   49  133:putfield        #4   <Field byte Real.sign>
            tmp1.pow(exponent / 2);
    //   50  136:getstatic       #107 <Field Real Real.tmp1>
    //   51  139:aload_0         
    //   52  140:getfield        #3   <Field int Real.exponent>
    //   53  143:iconst_2        
    //   54  144:idiv            
    //   55  145:invokevirtual   #104 <Method void Real.pow(int)>
            tmp2.div(tmp1);
    //   56  148:getstatic       #100 <Field Real Real.tmp2>
    //   57  151:getstatic       #107 <Field Real Real.tmp1>
    //   58  154:invokevirtual   #89  <Method void Real.div(Real)>
            tmp1.mantissa = TEN.mantissa;
    //   59  157:getstatic       #107 <Field Real Real.tmp1>
    //   60  160:getstatic       #103 <Field Real Real.TEN>
    //   61  163:getfield        #2   <Field long Real.mantissa>
    //   62  166:putfield        #2   <Field long Real.mantissa>
            tmp1.exponent = TEN.exponent;
    //   63  169:getstatic       #107 <Field Real Real.tmp1>
    //   64  172:getstatic       #103 <Field Real Real.TEN>
    //   65  175:getfield        #3   <Field int Real.exponent>
    //   66  178:putfield        #3   <Field int Real.exponent>
            tmp1.sign = TEN.sign;
    //   67  181:getstatic       #107 <Field Real Real.tmp1>
    //   68  184:getstatic       #103 <Field Real Real.TEN>
    //   69  187:getfield        #4   <Field byte Real.sign>
    //   70  190:putfield        #4   <Field byte Real.sign>
            tmp1.pow(exponent - exponent / 2);
    //   71  193:getstatic       #107 <Field Real Real.tmp1>
    //   72  196:aload_0         
    //   73  197:getfield        #3   <Field int Real.exponent>
    //   74  200:aload_0         
    //   75  201:getfield        #3   <Field int Real.exponent>
    //   76  204:iconst_2        
    //   77  205:idiv            
    //   78  206:isub            
    //   79  207:invokevirtual   #104 <Method void Real.pow(int)>
        }
        tmp2.div(tmp1);
    //   80  210:getstatic       #100 <Field Real Real.tmp2>
    //   81  213:getstatic       #107 <Field Real Real.tmp1>
    //   82  216:invokevirtual   #89  <Method void Real.div(Real)>
        mantissa = 0L;
    //   83  219:aload_0         
    //   84  220:lconst_0        
    //   85  221:putfield        #2   <Field long Real.mantissa>
        for(int i = 60; i >= 0; i -= 4)
    //*  86  224:bipush          60
    //*  87  226:istore_1        
    //*  88  227:goto            308
        {
            tmp1.mantissa = tmp2.mantissa;
    //   89  230:getstatic       #107 <Field Real Real.tmp1>
    //   90  233:getstatic       #100 <Field Real Real.tmp2>
    //   91  236:getfield        #2   <Field long Real.mantissa>
    //   92  239:putfield        #2   <Field long Real.mantissa>
            tmp1.exponent = tmp2.exponent;
    //   93  242:getstatic       #107 <Field Real Real.tmp1>
    //   94  245:getstatic       #100 <Field Real Real.tmp2>
    //   95  248:getfield        #3   <Field int Real.exponent>
    //   96  251:putfield        #3   <Field int Real.exponent>
            tmp1.sign = tmp2.sign;
    //   97  254:getstatic       #107 <Field Real Real.tmp1>
    //   98  257:getstatic       #100 <Field Real Real.tmp2>
    //   99  260:getfield        #4   <Field byte Real.sign>
    //  100  263:putfield        #4   <Field byte Real.sign>
            tmp1.floor();
    //  101  266:getstatic       #107 <Field Real Real.tmp1>
    //  102  269:invokevirtual   #36  <Method void Real.floor()>
            mantissa += (long)tmp1.toInteger() << i;
    //  103  272:aload_0         
    //  104  273:dup             
    //  105  274:getfield        #2   <Field long Real.mantissa>
    //  106  277:getstatic       #107 <Field Real Real.tmp1>
    //  107  280:invokevirtual   #81  <Method int Real.toInteger()>
    //  108  283:i2l             
    //  109  284:iload_1         
    //  110  285:lshl            
    //  111  286:ladd            
    //  112  287:putfield        #2   <Field long Real.mantissa>
            tmp2.sub(tmp1);
    //  113  290:getstatic       #100 <Field Real Real.tmp2>
    //  114  293:getstatic       #107 <Field Real Real.tmp1>
    //  115  296:invokevirtual   #95  <Method void Real.sub(Real)>
            tmp2.mul10();
    //  116  299:getstatic       #100 <Field Real Real.tmp2>
    //  117  302:invokespecial   #106 <Method void Real.mul10()>
        }

    //  118  305:iinc            1  -4
    //  119  308:iload_1         
    //  120  309:ifge            230
        if(tmp2.compare(FIVE) >= 0)
    //* 121  312:getstatic       #100 <Field Real Real.tmp2>
    //* 122  315:getstatic       #144 <Field Real Real.FIVE>
    //* 123  318:invokespecial   #27  <Method int Real.compare(Real)>
    //* 124  321:iflt            334
            mantissa++;
    //  125  324:aload_0         
    //  126  325:dup             
    //  127  326:getfield        #2   <Field long Real.mantissa>
    //  128  329:lconst_1        
    //  129  330:ladd            
    //  130  331:putfield        #2   <Field long Real.mantissa>
        normalizeBCD();
    //  131  334:aload_0         
    //  132  335:invokespecial   #142 <Method void Real.normalizeBCD()>
        /* return; */
    //  133  338:return          
    }

    // Decompiling method: testCarryWhenRounded  Signature: (III)Z
    // Max stack: 7, #locals: 5, #params: 4
    // Code length: 142 bytes, Code offset: 24708
    // Parameter  0 added: Name this Type LReal; At 0 142 Range 0 141 Init 0 fixed
    // Parameter  1 added: Name i Type I At 0 142 Range 0 141 Init 0
    // Parameter  2 added: Name j Type I At 0 142 Range 0 141 Init 0
    // Parameter  3 added: Name k Type I At 0 142 Range 0 141 Init 0
    // RetValue   5 added: Name <returnValue> Type Z At 0 142 Range 0 141 Init 0 fixed
    // LocalVar   4 added: Name l Type I At 17 83 Range 17 99 Init 17
    private boolean testCarryWhenRounded(int i, int j, int k)
    {
        if(mantissa >= 0L)
    //*   0    0:aload_0         
    //*   1    1:getfield        #2   <Field long Real.mantissa>
    //*   2    4:lconst_0        
    //*   3    5:lcmp            
    //*   4    6:iflt            11
            return false;
    //    5    9:iconst_0        
    //    6   10:ireturn         
        int l = 64 - k * j;
    //    7   11:bipush          64
    //    8   13:iload_3         
    //    9   14:iload_2         
    //   10   15:imul            
    //   11   16:isub            
    //   12   17:istore          4
        if(l <= 0)
    //*  13   19:iload           4
    //*  14   21:ifgt            26
            return false;
    //   15   24:iconst_0        
    //   16   25:ireturn         
        tmp5.mantissa = mantissa;
    //   17   26:getstatic       #145 <Field Real Real.tmp5>
    //   18   29:aload_0         
    //   19   30:getfield        #2   <Field long Real.mantissa>
    //   20   33:putfield        #2   <Field long Real.mantissa>
        tmp5.exponent = exponent;
    //   21   36:getstatic       #145 <Field Real Real.tmp5>
    //   22   39:aload_0         
    //   23   40:getfield        #3   <Field int Real.exponent>
    //   24   43:putfield        #3   <Field int Real.exponent>
        tmp5.sign = sign;
    //   25   46:getstatic       #145 <Field Real Real.tmp5>
    //   26   49:aload_0         
    //   27   50:getfield        #4   <Field byte Real.sign>
    //   28   53:putfield        #4   <Field byte Real.sign>
        if(i == 10)
    //*  29   56:iload_1         
    //*  30   57:bipush          10
    //*  31   59:icmpne          90
        {
            tmp5.mantissa += 5L << l - 4;
    //   32   62:getstatic       #145 <Field Real Real.tmp5>
    //   33   65:dup             
    //   34   66:getfield        #2   <Field long Real.mantissa>
    //   35   69:ldc2w           #146 <Long 5L>
    //   36   72:iload           4
    //   37   74:iconst_4        
    //   38   75:isub            
    //   39   76:lshl            
    //   40   77:ladd            
    //   41   78:putfield        #2   <Field long Real.mantissa>
            tmp5.normalizeBCD();
    //   42   81:getstatic       #145 <Field Real Real.tmp5>
    //   43   84:invokespecial   #142 <Method void Real.normalizeBCD()>
        } else
    //*  44   87:goto            107
        {
            tmp5.mantissa += 1L << l - 1;
    //   45   90:getstatic       #145 <Field Real Real.tmp5>
    //   46   93:dup             
    //   47   94:getfield        #2   <Field long Real.mantissa>
    //   48   97:lconst_1        
    //   49   98:iload           4
    //   50  100:iconst_1        
    //   51  101:isub            
    //   52  102:lshl            
    //   53  103:ladd            
    //   54  104:putfield        #2   <Field long Real.mantissa>
        }
        if(tmp5.mantissa >= 0L)
    //*  55  107:getstatic       #145 <Field Real Real.tmp5>
    //*  56  110:getfield        #2   <Field long Real.mantissa>
    //*  57  113:lconst_0        
    //*  58  114:lcmp            
    //*  59  115:iflt            140
        {
            mantissa = 1L << 64 - j;
    //   60  118:aload_0         
    //   61  119:lconst_1        
    //   62  120:bipush          64
    //   63  122:iload_2         
    //   64  123:isub            
    //   65  124:lshl            
    //   66  125:putfield        #2   <Field long Real.mantissa>
            exponent++;
    //   67  128:aload_0         
    //   68  129:dup             
    //   69  130:getfield        #3   <Field int Real.exponent>
    //   70  133:iconst_1        
    //   71  134:iadd            
    //   72  135:putfield        #3   <Field int Real.exponent>
            return true;
    //   73  138:iconst_1        
    //   74  139:ireturn         
        } else
        {
            return false;
    //   75  140:iconst_0        
    //   76  141:ireturn         
        }
    }

    // Decompiling method: round  Signature: (III)V
    // Max stack: 7, #locals: 7, #params: 4
    // Code length: 119 bytes, Code offset: 24948
    // Parameter  0 added: Name this Type LReal; At 0 119 Range 0 118 Init 0 fixed
    // Parameter  1 added: Name i Type I At 0 119 Range 0 118 Init 0
    // Parameter  2 added: Name j Type I At 0 119 Range 0 118 Init 0
    // Parameter  3 added: Name k Type I At 0 119 Range 0 118 Init 0
    // RetValue   7 added: Name <returnValue> Type V At 0 119 Range 0 118 Init 0 fixed
    // LocalVar   4 added: Name l Type I At 23 52 Range 23 74 Init 23
    // LocalVar   5 added: Name l1 Type J At 35 49 Range 35 83 Init 35
    private void round(int i, int j, int k)
    {
        if(exponent == 0 && mantissa == 0L)
    //*   0    0:aload_0         
    //*   1    1:getfield        #3   <Field int Real.exponent>
    //*   2    4:ifne            17
    //*   3    7:aload_0         
    //*   4    8:getfield        #2   <Field long Real.mantissa>
    //*   5   11:lconst_0        
    //*   6   12:lcmp            
    //*   7   13:ifne            17
            return;
    //    8   16:return          
        int l = 64 - k * j;
    //    9   17:bipush          64
    //   10   19:iload_3         
    //   11   20:iload_2         
    //   12   21:imul            
    //   13   22:isub            
    //   14   23:istore          4
        if(l <= 0)
    //*  15   25:iload           4
    //*  16   27:ifgt            31
            return;
    //   17   30:return          
        long l1 = mantissa;
    //   18   31:aload_0         
    //   19   32:getfield        #2   <Field long Real.mantissa>
    //   20   35:lstore          5
        if(i == 10)
    //*  21   37:iload_1         
    //*  22   38:bipush          10
    //*  23   40:icmpne          67
        {
            mantissa += 5L << l - 4;
    //   24   43:aload_0         
    //   25   44:dup             
    //   26   45:getfield        #2   <Field long Real.mantissa>
    //   27   48:ldc2w           #146 <Long 5L>
    //   28   51:iload           4
    //   29   53:iconst_4        
    //   30   54:isub            
    //   31   55:lshl            
    //   32   56:ladd            
    //   33   57:putfield        #2   <Field long Real.mantissa>
            normalizeBCD();
    //   34   60:aload_0         
    //   35   61:invokespecial   #142 <Method void Real.normalizeBCD()>
        } else
    //*  36   64:goto            82
        {
            mantissa += 1L << l - 1;
    //   37   67:aload_0         
    //   38   68:dup             
    //   39   69:getfield        #2   <Field long Real.mantissa>
    //   40   72:lconst_1        
    //   41   73:iload           4
    //   42   75:iconst_1        
    //   43   76:isub            
    //   44   77:lshl            
    //   45   78:ladd            
    //   46   79:putfield        #2   <Field long Real.mantissa>
        }
        if(l1 < 0L && mantissa >= 0L)
    //*  47   82:lload           5
    //*  48   84:lconst_0        
    //*  49   85:lcmp            
    //*  50   86:ifge            118
    //*  51   89:aload_0         
    //*  52   90:getfield        #2   <Field long Real.mantissa>
    //*  53   93:lconst_0        
    //*  54   94:lcmp            
    //*  55   95:iflt            118
        {
            mantissa = 1L << 64 - j;
    //   56   98:aload_0         
    //   57   99:lconst_1        
    //   58  100:bipush          64
    //   59  102:iload_2         
    //   60  103:isub            
    //   61  104:lshl            
    //   62  105:putfield        #2   <Field long Real.mantissa>
            exponent++;
    //   63  108:aload_0         
    //   64  109:dup             
    //   65  110:getfield        #3   <Field int Real.exponent>
    //   66  113:iconst_1        
    //   67  114:iadd            
    //   68  115:putfield        #3   <Field int Real.exponent>
        }
        /* return; */
    //   69  118:return          
    }

    // Decompiling method: align  Signature: (Ljava/lang/StringBuffer;LReal$NumberFormat;)Ljava/lang/String;
    // Max stack: 3, #locals: 3, #params: 3
    // Code length: 118 bytes, Code offset: 25168
    // Parameter  0 added: Name this Type LReal; At 0 118 Range 0 117 Init 0 fixed
    // Parameter  1 added: Name stringbuffer Type Ljava/lang/StringBuffer; At 0 118 Range 0 117 Init 0
    // Parameter  2 added: Name numberformat Type LReal$NumberFormat; At 0 118 Range 0 117 Init 0
    // RetValue   3 added: Name <returnValue> Type Ljava/lang/String; At 0 118 Range 0 117 Init 0 fixed
    private String align(StringBuffer stringbuffer, NumberFormat numberformat)
    {
        if(numberformat.align == 1)
    //*   0    0:aload_2         
    //*   1    1:getfield        #148 <Field int Real$NumberFormat.align>
    //*   2    4:iconst_1        
    //*   3    5:icmpne          32
    //*   4    8:goto            18
            for(; stringbuffer.length() < numberformat.maxwidth; stringbuffer.append(' '));
    //    5   11:aload_1         
    //    6   12:bipush          32
    //    7   14:invokevirtual   #149 <Method java.lang.StringBuffer java.lang.StringBuffer.append(char)>
    //    8   17:pop             
    //    9   18:aload_1         
    //   10   19:invokevirtual   #150 <Method int java.lang.StringBuffer.length()>
    //   11   22:aload_2         
    //   12   23:getfield        #151 <Field int Real$NumberFormat.maxwidth>
    //   13   26:icmplt          11
        else
    //*  14   29:goto            113
        if(numberformat.align == 2)
    //*  15   32:aload_2         
    //*  16   33:getfield        #148 <Field int Real$NumberFormat.align>
    //*  17   36:iconst_2        
    //*  18   37:icmpne          65
    //*  19   40:goto            51
            for(; stringbuffer.length() < numberformat.maxwidth; stringbuffer.insert(0, ' '));
    //   20   43:aload_1         
    //   21   44:iconst_0        
    //   22   45:bipush          32
    //   23   47:invokevirtual   #152 <Method java.lang.StringBuffer java.lang.StringBuffer.insert(int, char)>
    //   24   50:pop             
    //   25   51:aload_1         
    //   26   52:invokevirtual   #150 <Method int java.lang.StringBuffer.length()>
    //   27   55:aload_2         
    //   28   56:getfield        #151 <Field int Real$NumberFormat.maxwidth>
    //   29   59:icmplt          43
        else
    //*  30   62:goto            113
        if(numberformat.align == 3)
    //*  31   65:aload_2         
    //*  32   66:getfield        #148 <Field int Real$NumberFormat.align>
    //*  33   69:iconst_3        
    //*  34   70:icmpne          113
    //*  35   73:goto            102
            while(stringbuffer.length() < numberformat.maxwidth) 
            {
                stringbuffer.append(' ');
    //   36   76:aload_1         
    //   37   77:bipush          32
    //   38   79:invokevirtual   #149 <Method java.lang.StringBuffer java.lang.StringBuffer.append(char)>
    //   39   82:pop             
                if(stringbuffer.length() < numberformat.maxwidth)
    //*  40   83:aload_1         
    //*  41   84:invokevirtual   #150 <Method int java.lang.StringBuffer.length()>
    //*  42   87:aload_2         
    //*  43   88:getfield        #151 <Field int Real$NumberFormat.maxwidth>
    //*  44   91:icmpge          102
                    stringbuffer.insert(0, ' ');
    //   45   94:aload_1         
    //   46   95:iconst_0        
    //   47   96:bipush          32
    //   48   98:invokevirtual   #152 <Method java.lang.StringBuffer java.lang.StringBuffer.insert(int, char)>
    //   49  101:pop             
            }
    //   50  102:aload_1         
    //   51  103:invokevirtual   #150 <Method int java.lang.StringBuffer.length()>
    //   52  106:aload_2         
    //   53  107:getfield        #151 <Field int Real$NumberFormat.maxwidth>
    //   54  110:icmplt          76
        return stringbuffer.toString();
    //   55  113:aload_1         
    //   56  114:invokevirtual   #153 <Method java.lang.String java.lang.StringBuffer.toString()>
    //   57  117:areturn         
    }

    // Decompiling method: ftoa  Signature: (LReal$NumberFormat;)Ljava/lang/String;
    // Max stack: 7, #locals: 11, #params: 2
    // Code length: 1319 bytes, Code offset: 25455
    // Parameter  0 added: Name this Type LReal; At 0 1319 Range 0 1318 Init 0 fixed
    // Parameter  1 added: Name numberformat Type LReal$NumberFormat; At 0 1319 Range 0 1318 Init 0
    // RetValue  11 added: Name <returnValue> Type Ljava/lang/String; At 0 1319 Range 0 1318 Init 0 fixed
    // LocalVar   2 added: Name flag Type Z At 133 928 Range 133 1060 Init 133
    // LocalVar   3 added: Name byte0 Type B At 136 1100 Range 136 1235 Init 136
    // LocalVar   2 chged: Name byte1 Oname flag Type B At 141 920 Range 133 1060 Init 133
    // LocalVar   3 chged: Name c Oname byte0 Type C At 145 1091 Range 136 1235 Init 136
    // LocalVar   4 added: Name byte0 Type B At 173 297 Range 173 469 Init 173
    // LocalVar   4 chged: Name i Oname byte0 Type I At 327 3 Range 173 469 Init 173
    // LocalVar   5 added: Name j Type I At 357 104 Range 357 460 Init 357
    // LocalVar   5 added: Name k Type I At 476 370 Range 476 845 Init 476
    // LocalVar   7 added: Name flag Type Z At 479 631 Range 479 1109 Init 479
    // LocalVar   8 added: Name l Type I At 487 384 Range 487 870 Init 487
    // LocalVar   9 added: Name flag1 Type Z At 490 296 Range 490 785 Init 490
    // LocalVar  10 added: Name flag2 Type Z At 520 278 Range 520 797 Init 520
    // LocalVar   6 added: Name i1 Type I At 562 550 Range 562 1111 Init 562
    // LocalVar   7 chged: Name j1 Oname flag Type I At 580 530 Range 479 1109 Init 479
    // LocalVar   9 chged: Name k1 Oname flag1 Type I At 636 2 Range 490 785 Init 490
    // LocalVar   8 added: Name l1 Type I At 942 293 Range 942 1234 Init 942
    // LocalVar   9 added: Name c1 Type C At 978 293 Range 978 1270 Init 978
    private String ftoa(NumberFormat numberformat)
    {
        ftoaBuf.setLength(0);
    //    0    0:getstatic       #154 <Field java.lang.StringBuffer Real.ftoaBuf>
    //    1    3:iconst_0        
    //    2    4:invokevirtual   #155 <Method void java.lang.StringBuffer.setLength(int)>
        if(exponent < 0 && mantissa != 0L)
    //*   3    7:aload_0         
    //*   4    8:getfield        #3   <Field int Real.exponent>
    //*   5   11:ifge            41
    //*   6   14:aload_0         
    //*   7   15:getfield        #2   <Field long Real.mantissa>
    //*   8   18:lconst_0        
    //*   9   19:lcmp            
    //*  10   20:ifeq            41
        {
            ftoaBuf.append("nan");
    //   11   23:getstatic       #154 <Field java.lang.StringBuffer Real.ftoaBuf>
    //   12   26:ldc1            #156 <String "nan">
    //   13   28:invokevirtual   #157 <Method java.lang.StringBuffer java.lang.StringBuffer.append(java.lang.String)>
    //   14   31:pop             
            return align(ftoaBuf, numberformat);
    //   15   32:aload_0         
    //   16   33:getstatic       #154 <Field java.lang.StringBuffer Real.ftoaBuf>
    //   17   36:aload_1         
    //   18   37:invokespecial   #158 <Method java.lang.String Real.align(java.lang.StringBuffer, Real$NumberFormat)>
    //   19   40:areturn         
        }
        if(exponent < 0 && mantissa == 0L)
    //*  20   41:aload_0         
    //*  21   42:getfield        #3   <Field int Real.exponent>
    //*  22   45:ifge            87
    //*  23   48:aload_0         
    //*  24   49:getfield        #2   <Field long Real.mantissa>
    //*  25   52:lconst_0        
    //*  26   53:lcmp            
    //*  27   54:ifne            87
        {
            ftoaBuf.append(sign == 0 ? "inf" : "-inf");
    //   28   57:getstatic       #154 <Field java.lang.StringBuffer Real.ftoaBuf>
    //   29   60:aload_0         
    //   30   61:getfield        #4   <Field byte Real.sign>
    //   31   64:ifeq            72
    //   32   67:ldc1            #159 <String "-inf">
    //   33   69:goto            74
    //   34   72:ldc1            #160 <String "inf">
    //   35   74:invokevirtual   #157 <Method java.lang.StringBuffer java.lang.StringBuffer.append(java.lang.String)>
    //   36   77:pop             
            return align(ftoaBuf, numberformat);
    //   37   78:aload_0         
    //   38   79:getstatic       #154 <Field java.lang.StringBuffer Real.ftoaBuf>
    //   39   82:aload_1         
    //   40   83:invokespecial   #158 <Method java.lang.String Real.align(java.lang.StringBuffer, Real$NumberFormat)>
    //   41   86:areturn         
        }
        byte byte0;
        char c;
        switch(numberformat.base)
    //*  42   87:aload_1         
    //*  43   88:getfield        #161 <Field int Real$NumberFormat.base>
        {
    //*  44   91:lookupswitch    4: default 156
    //                   2: 132
    //                   8: 140
    //                   10: 156
    //                   16: 149
        case 2: // '\002'
            byte0 = 1;
    //   45  132:iconst_1        
    //   46  133:istore_2        
            c = '\b';
    //   47  134:bipush          8
    //   48  136:istore_3        
            break;

    //*  49  137:goto            160
        case 8: // '\b'
            byte0 = 3;
    //   50  140:iconst_3        
    //   51  141:istore_2        
            c = '\u03E8';
    //   52  142:sipush          1000
    //   53  145:istore_3        
            break;

    //*  54  146:goto            160
        case 16: // '\020'
            byte0 = 4;
    //   55  149:iconst_4        
    //   56  150:istore_2        
            c = '\004';
    //   57  151:iconst_4        
    //   58  152:istore_3        
            break;

    //*  59  153:goto            160
        case 10: // '\n'
        default:
            byte0 = 4;
    //   60  156:iconst_4        
    //   61  157:istore_2        
            c = '\003';
    //   62  158:iconst_3        
    //   63  159:istore_3        
            break;
        }
        if(numberformat.thousand == 0)
    //*  64  160:aload_1         
    //*  65  161:getfield        #162 <Field char Real$NumberFormat.thousand>
    //*  66  164:ifne            171
            c = '\u03E8';
    //   67  167:sipush          1000
    //   68  170:istore_3        
        int i = 64;
    //   69  171:bipush          64
    //   70  173:istore          4
        tmp4.mantissa = mantissa;
    //   71  175:getstatic       #121 <Field Real Real.tmp4>
    //   72  178:aload_0         
    //   73  179:getfield        #2   <Field long Real.mantissa>
    //   74  182:putfield        #2   <Field long Real.mantissa>
        tmp4.exponent = exponent;
    //   75  185:getstatic       #121 <Field Real Real.tmp4>
    //   76  188:aload_0         
    //   77  189:getfield        #3   <Field int Real.exponent>
    //   78  192:putfield        #3   <Field int Real.exponent>
        tmp4.sign = sign;
    //   79  195:getstatic       #121 <Field Real Real.tmp4>
    //   80  198:aload_0         
    //   81  199:getfield        #4   <Field byte Real.sign>
    //   82  202:putfield        #4   <Field byte Real.sign>
        if(exponent == 0 && mantissa == 0L)
    //*  83  205:aload_0         
    //*  84  206:getfield        #3   <Field int Real.exponent>
    //*  85  209:ifne            247
    //*  86  212:aload_0         
    //*  87  213:getfield        #2   <Field long Real.mantissa>
    //*  88  216:lconst_0        
    //*  89  217:lcmp            
    //*  90  218:ifne            247
        {
            tmp4.exponent = 0;
    //   91  221:getstatic       #121 <Field Real Real.tmp4>
    //   92  224:iconst_0        
    //   93  225:putfield        #3   <Field int Real.exponent>
            if(numberformat.base != 10)
    //*  94  228:aload_1         
    //*  95  229:getfield        #161 <Field int Real$NumberFormat.base>
    //*  96  232:bipush          10
    //*  97  234:icmpeq          468
                tmp4.sign = 0;
    //   98  237:getstatic       #121 <Field Real Real.tmp4>
    //   99  240:iconst_0        
    //  100  241:putfield        #4   <Field byte Real.sign>
        } else
    //* 101  244:goto            468
        if(numberformat.base == 10)
    //* 102  247:aload_1         
    //* 103  248:getfield        #161 <Field int Real$NumberFormat.base>
    //* 104  251:bipush          10
    //* 105  253:icmpne          265
        {
            tmp4.toBCD();
    //  106  256:getstatic       #121 <Field Real Real.tmp4>
    //  107  259:invokespecial   #163 <Method void Real.toBCD()>
        } else
    //* 108  262:goto            468
        {
            if(tmp4.sign != 0)
    //* 109  265:getstatic       #121 <Field Real Real.tmp4>
    //* 110  268:getfield        #4   <Field byte Real.sign>
    //* 111  271:ifeq            330
            {
                tmp4.mantissa = -tmp4.mantissa;
    //  112  274:getstatic       #121 <Field Real Real.tmp4>
    //  113  277:getstatic       #121 <Field Real Real.tmp4>
    //  114  280:getfield        #2   <Field long Real.mantissa>
    //  115  283:lneg            
    //  116  284:putfield        #2   <Field long Real.mantissa>
                if(tmp4.mantissa >>> 62 == 3L)
    //* 117  287:getstatic       #121 <Field Real Real.tmp4>
    //* 118  290:getfield        #2   <Field long Real.mantissa>
    //* 119  293:bipush          62
    //* 120  295:lushr           
    //* 121  296:ldc2w           #164 <Long 3L>
    //* 122  299:lcmp            
    //* 123  300:ifne            330
                {
                    tmp4.mantissa <<= 1;
    //  124  303:getstatic       #121 <Field Real Real.tmp4>
    //  125  306:dup             
    //  126  307:getfield        #2   <Field long Real.mantissa>
    //  127  310:iconst_1        
    //  128  311:lshl            
    //  129  312:putfield        #2   <Field long Real.mantissa>
                    tmp4.exponent--;
    //  130  315:getstatic       #121 <Field Real Real.tmp4>
    //  131  318:dup             
    //  132  319:getfield        #3   <Field int Real.exponent>
    //  133  322:iconst_1        
    //  134  323:isub            
    //  135  324:putfield        #3   <Field int Real.exponent>
                    i--;
    //  136  327:iinc            4  -1
                }
            }
            tmp4.exponent -= 0x3fffffff;
    //  137  330:getstatic       #121 <Field Real Real.tmp4>
    //  138  333:dup             
    //  139  334:getfield        #3   <Field int Real.exponent>
    //  140  337:ldc1            #37  <Int 0x3fffffff>
    //  141  339:isub            
    //  142  340:putfield        #3   <Field int Real.exponent>
            int j = byte0 - 1 - floorMod(tmp4.exponent, byte0);
    //  143  343:iload_2         
    //  144  344:iconst_1        
    //  145  345:isub            
    //  146  346:getstatic       #121 <Field Real Real.tmp4>
    //  147  349:getfield        #3   <Field int Real.exponent>
    //  148  352:iload_2         
    //  149  353:invokestatic    #166 <Method int Real.floorMod(int, int)>
    //  150  356:isub            
    //  151  357:istore          5
            tmp4.exponent = floorDiv(tmp4.exponent, byte0);
    //  152  359:getstatic       #121 <Field Real Real.tmp4>
    //  153  362:getstatic       #121 <Field Real Real.tmp4>
    //  154  365:getfield        #3   <Field int Real.exponent>
    //  155  368:iload_2         
    //  156  369:invokestatic    #167 <Method int Real.floorDiv(int, int)>
    //  157  372:putfield        #3   <Field int Real.exponent>
            if(j == byte0 - 1)
    //* 158  375:iload           5
    //* 159  377:iload_2         
    //* 160  378:iconst_1        
    //* 161  379:isub            
    //* 162  380:icmpne          413
            {
                tmp4.mantissa <<= 1;
    //  163  383:getstatic       #121 <Field Real Real.tmp4>
    //  164  386:dup             
    //  165  387:getfield        #2   <Field long Real.mantissa>
    //  166  390:iconst_1        
    //  167  391:lshl            
    //  168  392:putfield        #2   <Field long Real.mantissa>
                tmp4.exponent--;
    //  169  395:getstatic       #121 <Field Real Real.tmp4>
    //  170  398:dup             
    //  171  399:getfield        #3   <Field int Real.exponent>
    //  172  402:iconst_1        
    //  173  403:isub            
    //  174  404:putfield        #3   <Field int Real.exponent>
                i--;
    //  175  407:iinc            4  -1
            } else
    //* 176  410:goto            468
            if(j > 0)
    //* 177  413:iload           5
    //* 178  415:ifle            468
            {
                tmp4.mantissa = tmp4.mantissa + (1L << j - 1) >>> j;
    //  179  418:getstatic       #121 <Field Real Real.tmp4>
    //  180  421:getstatic       #121 <Field Real Real.tmp4>
    //  181  424:getfield        #2   <Field long Real.mantissa>
    //  182  427:lconst_1        
    //  183  428:iload           5
    //  184  430:iconst_1        
    //  185  431:isub            
    //  186  432:lshl            
    //  187  433:ladd            
    //  188  434:iload           5
    //  189  436:lushr           
    //  190  437:putfield        #2   <Field long Real.mantissa>
                if(tmp4.sign != 0)
    //* 191  440:getstatic       #121 <Field Real Real.tmp4>
    //* 192  443:getfield        #4   <Field byte Real.sign>
    //* 193  446:ifeq            468
                    tmp4.mantissa |= 0x8000000000000000L >> j - 1;
    //  194  449:getstatic       #121 <Field Real Real.tmp4>
    //  195  452:dup             
    //  196  453:getfield        #2   <Field long Real.mantissa>
    //  197  456:ldc2w           #59  <Long 0x8000000000000000L>
    //  198  459:iload           5
    //  199  461:iconst_1        
    //  200  462:isub            
    //  201  463:lshr            
    //  202  464:lor             
    //  203  465:putfield        #2   <Field long Real.mantissa>
            }
        }
        int k = ((i + byte0) - 1) / byte0;
    //  204  468:iload           4
    //  205  470:iload_2         
    //  206  471:iadd            
    //  207  472:iconst_1        
    //  208  473:isub            
    //  209  474:iload_2         
    //  210  475:idiv            
    //  211  476:istore          5
        int i1 = 0;
    //  212  478:iconst_0        
    //  213  479:istore          7
        int l;
        do
        {
            int j1 = numberformat.maxwidth - 1;
    //  214  481:aload_1         
    //  215  482:getfield        #151 <Field int Real$NumberFormat.maxwidth>
    //  216  485:iconst_1        
    //  217  486:isub            
    //  218  487:istore          8
            int l1 = 0;
    //  219  489:iconst_0        
    //  220  490:istore          9
            if(numberformat.base != 10)
    //* 221  492:aload_1         
    //* 222  493:getfield        #161 <Field int Real$NumberFormat.base>
    //* 223  496:bipush          10
    //* 224  498:icmpeq          507
                l1 = 1;
    //  225  501:iconst_1        
    //  226  502:istore          9
            else
    //* 227  504:goto            519
            if(tmp4.sign != 0)
    //* 228  507:getstatic       #121 <Field Real Real.tmp4>
    //* 229  510:getfield        #4   <Field byte Real.sign>
    //* 230  513:ifeq            519
                j1--;
    //  231  516:iinc            8  -1
            boolean flag = false;
    //  232  519:iconst_0        
    //  233  520:istore          10
            switch(numberformat.fse)
    //* 234  522:aload_1         
    //* 235  523:getfield        #168 <Field int Real$NumberFormat.fse>
            {
    //* 236  526:tableswitch     0 3: default 599
    //                   0 599
    //                   1 599
    //                   2 556
    //                   3 570
            case 2: // '\002'
                l = numberformat.precision + 1;
    //  237  556:aload_1         
    //  238  557:getfield        #169 <Field int Real$NumberFormat.precision>
    //  239  560:iconst_1        
    //  240  561:iadd            
    //  241  562:istore          6
                flag = true;
    //  242  564:iconst_1        
    //  243  565:istore          10
                break;

    //* 244  567:goto            772
            case 3: // '\003'
                i1 = floorMod(tmp4.exponent, 3);
    //  245  570:getstatic       #121 <Field Real Real.tmp4>
    //  246  573:getfield        #3   <Field int Real.exponent>
    //  247  576:iconst_3        
    //  248  577:invokestatic    #166 <Method int Real.floorMod(int, int)>
    //  249  580:istore          7
                l = numberformat.precision + 1 + i1;
    //  250  582:aload_1         
    //  251  583:getfield        #169 <Field int Real$NumberFormat.precision>
    //  252  586:iconst_1        
    //  253  587:iadd            
    //  254  588:iload           7
    //  255  590:iadd            
    //  256  591:istore          6
                flag = true;
    //  257  593:iconst_1        
    //  258  594:istore          10
                break;

    //* 259  596:goto            772
            case 0: // '\0'
            case 1: // '\001'
            default:
                l = 1000;
    //  260  599:sipush          1000
    //  261  602:istore          6
                if(numberformat.fse == 1)
    //* 262  604:aload_1         
    //* 263  605:getfield        #168 <Field int Real$NumberFormat.fse>
    //* 264  608:iconst_1        
    //* 265  609:icmpne          620
                    l = numberformat.precision + 1;
    //  266  612:aload_1         
    //  267  613:getfield        #169 <Field int Real$NumberFormat.precision>
    //  268  616:iconst_1        
    //  269  617:iadd            
    //  270  618:istore          6
                if(tmp4.exponent + 1 > (j1 - (tmp4.exponent + l1) / c - l1) + (numberformat.removePoint ? 1 : 0) || (tmp4.exponent + 1 > k || -tmp4.exponent >= j1 || -tmp4.exponent >= l))
    //* 271  620:getstatic       #121 <Field Real Real.tmp4>
    //* 272  623:getfield        #3   <Field int Real.exponent>
    //* 273  626:iconst_1        
    //* 274  627:iadd            
    //* 275  628:iload           8
    //* 276  630:getstatic       #121 <Field Real Real.tmp4>
    //* 277  633:getfield        #3   <Field int Real.exponent>
    //* 278  636:iload           9
    //* 279  638:iadd            
    //* 280  639:iload_3         
    //* 281  640:idiv            
    //* 282  641:isub            
    //* 283  642:iload           9
    //* 284  644:isub            
    //* 285  645:aload_1         
    //* 286  646:getfield        #170 <Field boolean Real$NumberFormat.removePoint>
    //* 287  649:ifeq            656
    //* 288  652:iconst_1        
    //* 289  653:goto            657
    //* 290  656:iconst_0        
    //* 291  657:iadd            
    //* 292  658:icmpgt          698
    //* 293  661:getstatic       #121 <Field Real Real.tmp4>
    //* 294  664:getfield        #3   <Field int Real.exponent>
    //* 295  667:iconst_1        
    //* 296  668:iadd            
    //* 297  669:iload           5
    //* 298  671:icmpgt          698
    //* 299  674:getstatic       #121 <Field Real Real.tmp4>
    //* 300  677:getfield        #3   <Field int Real.exponent>
    //* 301  680:ineg            
    //* 302  681:iload           8
    //* 303  683:icmpge          698
    //* 304  686:getstatic       #121 <Field Real Real.tmp4>
    //* 305  689:getfield        #3   <Field int Real.exponent>
    //* 306  692:ineg            
    //* 307  693:iload           6
    //* 308  695:icmplt          704
                {
                    flag = true;
    //  309  698:iconst_1        
    //  310  699:istore          10
                } else
    //* 311  701:goto            772
                {
                    i1 = tmp4.exponent;
    //  312  704:getstatic       #121 <Field Real Real.tmp4>
    //  313  707:getfield        #3   <Field int Real.exponent>
    //  314  710:istore          7
                    l += tmp4.exponent;
    //  315  712:iload           6
    //  316  714:getstatic       #121 <Field Real Real.tmp4>
    //  317  717:getfield        #3   <Field int Real.exponent>
    //  318  720:iadd            
    //  319  721:istore          6
                    if(tmp4.exponent > 0)
    //* 320  723:getstatic       #121 <Field Real Real.tmp4>
    //* 321  726:getfield        #3   <Field int Real.exponent>
    //* 322  729:ifle            748
                        j1 -= (tmp4.exponent + l1) / c;
    //  323  732:iload           8
    //  324  734:getstatic       #121 <Field Real Real.tmp4>
    //  325  737:getfield        #3   <Field int Real.exponent>
    //  326  740:iload           9
    //  327  742:iadd            
    //  328  743:iload_3         
    //  329  744:idiv            
    //  330  745:isub            
    //  331  746:istore          8
                    if(numberformat.removePoint && tmp4.exponent == j1 - l1)
    //* 332  748:aload_1         
    //* 333  749:getfield        #170 <Field boolean Real$NumberFormat.removePoint>
    //* 334  752:ifeq            772
    //* 335  755:getstatic       #121 <Field Real Real.tmp4>
    //* 336  758:getfield        #3   <Field int Real.exponent>
    //* 337  761:iload           8
    //* 338  763:iload           9
    //* 339  765:isub            
    //* 340  766:icmpne          772
                        j1++;
    //  341  769:iinc            8  1
                }
                break;
            }
            if(l1 != 0 && i1 >= 0)
    //* 342  772:iload           9
    //* 343  774:ifeq            789
    //* 344  777:iload           7
    //* 345  779:iflt            789
                j1 -= l1;
    //  346  782:iload           8
    //  347  784:iload           9
    //  348  786:isub            
    //  349  787:istore          8
            ftoaExp.setLength(0);
    //  350  789:getstatic       #171 <Field java.lang.StringBuffer Real.ftoaExp>
    //  351  792:iconst_0        
    //  352  793:invokevirtual   #155 <Method void java.lang.StringBuffer.setLength(int)>
            if(flag)
    //* 353  796:iload           10
    //* 354  798:ifeq            837
            {
                ftoaExp.append('e');
    //  355  801:getstatic       #171 <Field java.lang.StringBuffer Real.ftoaExp>
    //  356  804:bipush          101
    //  357  806:invokevirtual   #149 <Method java.lang.StringBuffer java.lang.StringBuffer.append(char)>
    //  358  809:pop             
                ftoaExp.append(tmp4.exponent - i1);
    //  359  810:getstatic       #171 <Field java.lang.StringBuffer Real.ftoaExp>
    //  360  813:getstatic       #121 <Field Real Real.tmp4>
    //  361  816:getfield        #3   <Field int Real.exponent>
    //  362  819:iload           7
    //  363  821:isub            
    //  364  822:invokevirtual   #172 <Method java.lang.StringBuffer java.lang.StringBuffer.append(int)>
    //  365  825:pop             
                j1 -= ftoaExp.length();
    //  366  826:iload           8
    //  367  828:getstatic       #171 <Field java.lang.StringBuffer Real.ftoaExp>
    //  368  831:invokevirtual   #150 <Method int java.lang.StringBuffer.length()>
    //  369  834:isub            
    //  370  835:istore          8
            }
            if(l > k)
    //* 371  837:iload           6
    //* 372  839:iload           5
    //* 373  841:icmple          848
                l = k;
    //  374  844:iload           5
    //  375  846:istore          6
            if(l > j1)
    //* 376  848:iload           6
    //* 377  850:iload           8
    //* 378  852:icmple          859
                l = j1;
    //  379  855:iload           8
    //  380  857:istore          6
            if(l > j1 + i1)
    //* 381  859:iload           6
    //* 382  861:iload           8
    //* 383  863:iload           7
    //* 384  865:iadd            
    //* 385  866:icmple          876
                l = j1 + i1;
    //  386  869:iload           8
    //  387  871:iload           7
    //  388  873:iadd            
    //  389  874:istore          6
            if(l <= 0)
    //* 390  876:iload           6
    //* 391  878:ifgt            884
                l = 1;
    //  392  881:iconst_1        
    //  393  882:istore          6
        } while(tmp4.testCarryWhenRounded(numberformat.base, byte0, l));
    //  394  884:getstatic       #121 <Field Real Real.tmp4>
    //  395  887:aload_1         
    //  396  888:getfield        #161 <Field int Real$NumberFormat.base>
    //  397  891:iload_2         
    //  398  892:iload           6
    //  399  894:invokespecial   #173 <Method boolean Real.testCarryWhenRounded(int, int, int)>
    //  400  897:ifne            481
        tmp4.round(numberformat.base, byte0, l);
    //  401  900:getstatic       #121 <Field Real Real.tmp4>
    //  402  903:aload_1         
    //  403  904:getfield        #161 <Field int Real$NumberFormat.base>
    //  404  907:iload_2         
    //  405  908:iload           6
    //  406  910:invokespecial   #174 <Method void Real.round(int, int, int)>
        if(tmp4.sign != 0 && numberformat.base == 10)
    //* 407  913:getstatic       #121 <Field Real Real.tmp4>
    //* 408  916:getfield        #4   <Field byte Real.sign>
    //* 409  919:ifeq            940
    //* 410  922:aload_1         
    //* 411  923:getfield        #161 <Field int Real$NumberFormat.base>
    //* 412  926:bipush          10
    //* 413  928:icmpne          940
            ftoaBuf.append('-');
    //  414  931:getstatic       #154 <Field java.lang.StringBuffer Real.ftoaBuf>
    //  415  934:bipush          45
    //  416  936:invokevirtual   #149 <Method java.lang.StringBuffer java.lang.StringBuffer.append(char)>
    //  417  939:pop             
        int k1 = i1;
    //  418  940:iload           7
    //  419  942:istore          8
        char c1 = numberformat.base != 10 && tmp4.sign != 0 ? "0123456789ABCDEF".charAt(numberformat.base - 1) : '0';
    //  420  944:aload_1         
    //  421  945:getfield        #161 <Field int Real$NumberFormat.base>
    //  422  948:bipush          10
    //  423  950:icmpeq          962
    //  424  953:getstatic       #121 <Field Real Real.tmp4>
    //  425  956:getfield        #4   <Field byte Real.sign>
    //  426  959:ifne            967
    //  427  962:bipush          48
    //  428  964:goto            978
    //  429  967:ldc1            #175 <String "0123456789ABCDEF">
    //  430  969:aload_1         
    //  431  970:getfield        #161 <Field int Real$NumberFormat.base>
    //  432  973:iconst_1        
    //  433  974:isub            
    //  434  975:invokevirtual   #129 <Method char java.lang.String.charAt(int)>
    //  435  978:istore          9
        if(i1 < 0)
    //* 436  980:iload           7
    //* 437  982:ifge            1110
        {
            ftoaBuf.append(c1);
    //  438  985:getstatic       #154 <Field java.lang.StringBuffer Real.ftoaBuf>
    //  439  988:iload           9
    //  440  990:invokevirtual   #149 <Method java.lang.StringBuffer java.lang.StringBuffer.append(char)>
    //  441  993:pop             
            ftoaBuf.append(numberformat.point);
    //  442  994:getstatic       #154 <Field java.lang.StringBuffer Real.ftoaBuf>
    //  443  997:aload_1         
    //  444  998:getfield        #176 <Field char Real$NumberFormat.point>
    //  445 1001:invokevirtual   #149 <Method java.lang.StringBuffer java.lang.StringBuffer.append(char)>
    //  446 1004:pop             
    //* 447 1005:goto            1020
            for(; i1 < -1; i1++)
                ftoaBuf.append(c1);
    //  448 1008:getstatic       #154 <Field java.lang.StringBuffer Real.ftoaBuf>
    //  449 1011:iload           9
    //  450 1013:invokevirtual   #149 <Method java.lang.StringBuffer java.lang.StringBuffer.append(char)>
    //  451 1016:pop             

    //  452 1017:iinc            7  1
    //  453 1020:iload           7
    //  454 1022:iconst_m1       
    //  455 1023:icmplt          1008
        }
    //* 456 1026:goto            1110
        while(l > 0) 
        {
            ftoaBuf.append("0123456789ABCDEF".charAt((int)(tmp4.mantissa >>> 64 - byte0)));
    //  457 1029:getstatic       #154 <Field java.lang.StringBuffer Real.ftoaBuf>
    //  458 1032:ldc1            #175 <String "0123456789ABCDEF">
    //  459 1034:getstatic       #121 <Field Real Real.tmp4>
    //  460 1037:getfield        #2   <Field long Real.mantissa>
    //  461 1040:bipush          64
    //  462 1042:iload_2         
    //  463 1043:isub            
    //  464 1044:lushr           
    //  465 1045:l2i             
    //  466 1046:invokevirtual   #129 <Method char java.lang.String.charAt(int)>
    //  467 1049:invokevirtual   #149 <Method java.lang.StringBuffer java.lang.StringBuffer.append(char)>
    //  468 1052:pop             
            tmp4.mantissa <<= byte0;
    //  469 1053:getstatic       #121 <Field Real Real.tmp4>
    //  470 1056:dup             
    //  471 1057:getfield        #2   <Field long Real.mantissa>
    //  472 1060:iload_2         
    //  473 1061:lshl            
    //  474 1062:putfield        #2   <Field long Real.mantissa>
            if(i1 > 0 && i1 % c == 0)
    //* 475 1065:iload           7
    //* 476 1067:ifle            1088
    //* 477 1070:iload           7
    //* 478 1072:iload_3         
    //* 479 1073:irem            
    //* 480 1074:ifne            1088
                ftoaBuf.append(numberformat.thousand);
    //  481 1077:getstatic       #154 <Field java.lang.StringBuffer Real.ftoaBuf>
    //  482 1080:aload_1         
    //  483 1081:getfield        #162 <Field char Real$NumberFormat.thousand>
    //  484 1084:invokevirtual   #149 <Method java.lang.StringBuffer java.lang.StringBuffer.append(char)>
    //  485 1087:pop             
            if(i1 == 0)
    //* 486 1088:iload           7
    //* 487 1090:ifne            1104
                ftoaBuf.append(numberformat.point);
    //  488 1093:getstatic       #154 <Field java.lang.StringBuffer Real.ftoaBuf>
    //  489 1096:aload_1         
    //  490 1097:getfield        #176 <Field char Real$NumberFormat.point>
    //  491 1100:invokevirtual   #149 <Method java.lang.StringBuffer java.lang.StringBuffer.append(char)>
    //  492 1103:pop             
            l--;
    //  493 1104:iinc            6  -1
            i1--;
    //  494 1107:iinc            7  -1
        }
    //  495 1110:iload           6
    //  496 1112:ifgt            1029
        if(numberformat.fse == 0)
    //* 497 1115:aload_1         
    //* 498 1116:getfield        #168 <Field int Real$NumberFormat.fse>
    //* 499 1119:ifne            1158
    //* 500 1122:goto            1139
            for(; ftoaBuf.charAt(ftoaBuf.length() - 1) == '0'; ftoaBuf.setLength(ftoaBuf.length() - 1));
    //  501 1125:getstatic       #154 <Field java.lang.StringBuffer Real.ftoaBuf>
    //  502 1128:getstatic       #154 <Field java.lang.StringBuffer Real.ftoaBuf>
    //  503 1131:invokevirtual   #150 <Method int java.lang.StringBuffer.length()>
    //  504 1134:iconst_1        
    //  505 1135:isub            
    //  506 1136:invokevirtual   #155 <Method void java.lang.StringBuffer.setLength(int)>
    //  507 1139:getstatic       #154 <Field java.lang.StringBuffer Real.ftoaBuf>
    //  508 1142:getstatic       #154 <Field java.lang.StringBuffer Real.ftoaBuf>
    //  509 1145:invokevirtual   #150 <Method int java.lang.StringBuffer.length()>
    //  510 1148:iconst_1        
    //  511 1149:isub            
    //  512 1150:invokevirtual   #177 <Method char java.lang.StringBuffer.charAt(int)>
    //  513 1153:bipush          48
    //  514 1155:icmpeq          1125
        if(numberformat.removePoint && ftoaBuf.charAt(ftoaBuf.length() - 1) == numberformat.point)
    //* 515 1158:aload_1         
    //* 516 1159:getfield        #170 <Field boolean Real$NumberFormat.removePoint>
    //* 517 1162:ifeq            1200
    //* 518 1165:getstatic       #154 <Field java.lang.StringBuffer Real.ftoaBuf>
    //* 519 1168:getstatic       #154 <Field java.lang.StringBuffer Real.ftoaBuf>
    //* 520 1171:invokevirtual   #150 <Method int java.lang.StringBuffer.length()>
    //* 521 1174:iconst_1        
    //* 522 1175:isub            
    //* 523 1176:invokevirtual   #177 <Method char java.lang.StringBuffer.charAt(int)>
    //* 524 1179:aload_1         
    //* 525 1180:getfield        #176 <Field char Real$NumberFormat.point>
    //* 526 1183:icmpne          1200
            ftoaBuf.setLength(ftoaBuf.length() - 1);
    //  527 1186:getstatic       #154 <Field java.lang.StringBuffer Real.ftoaBuf>
    //  528 1189:getstatic       #154 <Field java.lang.StringBuffer Real.ftoaBuf>
    //  529 1192:invokevirtual   #150 <Method int java.lang.StringBuffer.length()>
    //  530 1195:iconst_1        
    //  531 1196:isub            
    //  532 1197:invokevirtual   #155 <Method void java.lang.StringBuffer.setLength(int)>
        ftoaBuf.append(ftoaExp.toString());
    //  533 1200:getstatic       #154 <Field java.lang.StringBuffer Real.ftoaBuf>
    //  534 1203:getstatic       #171 <Field java.lang.StringBuffer Real.ftoaExp>
    //  535 1206:invokevirtual   #153 <Method java.lang.String java.lang.StringBuffer.toString()>
    //  536 1209:invokevirtual   #157 <Method java.lang.StringBuffer java.lang.StringBuffer.append(java.lang.String)>
    //  537 1212:pop             
        if(numberformat.base != 10)
    //* 538 1213:aload_1         
    //* 539 1214:getfield        #161 <Field int Real$NumberFormat.base>
    //* 540 1217:bipush          10
    //* 541 1219:icmpeq          1310
    //* 542 1222:goto            1275
        {
            while(ftoaBuf.length() < numberformat.maxwidth) 
            {
                if(++k1 > 0 && k1 % c == 0)
    //* 543 1225:iinc            8  1
    //* 544 1228:iload           8
    //* 545 1230:ifle            1252
    //* 546 1233:iload           8
    //* 547 1235:iload_3         
    //* 548 1236:irem            
    //* 549 1237:ifne            1252
                    ftoaBuf.insert(0, numberformat.thousand);
    //  550 1240:getstatic       #154 <Field java.lang.StringBuffer Real.ftoaBuf>
    //  551 1243:iconst_0        
    //  552 1244:aload_1         
    //  553 1245:getfield        #162 <Field char Real$NumberFormat.thousand>
    //  554 1248:invokevirtual   #152 <Method java.lang.StringBuffer java.lang.StringBuffer.insert(int, char)>
    //  555 1251:pop             
                if(ftoaBuf.length() < numberformat.maxwidth)
    //* 556 1252:getstatic       #154 <Field java.lang.StringBuffer Real.ftoaBuf>
    //* 557 1255:invokevirtual   #150 <Method int java.lang.StringBuffer.length()>
    //* 558 1258:aload_1         
    //* 559 1259:getfield        #151 <Field int Real$NumberFormat.maxwidth>
    //* 560 1262:icmpge          1275
                    ftoaBuf.insert(0, c1);
    //  561 1265:getstatic       #154 <Field java.lang.StringBuffer Real.ftoaBuf>
    //  562 1268:iconst_0        
    //  563 1269:iload           9
    //  564 1271:invokevirtual   #152 <Method java.lang.StringBuffer java.lang.StringBuffer.insert(int, char)>
    //  565 1274:pop             
            }
    //  566 1275:getstatic       #154 <Field java.lang.StringBuffer Real.ftoaBuf>
    //  567 1278:invokevirtual   #150 <Method int java.lang.StringBuffer.length()>
    //  568 1281:aload_1         
    //  569 1282:getfield        #151 <Field int Real$NumberFormat.maxwidth>
    //  570 1285:icmplt          1225
            if(ftoaBuf.charAt(0) == numberformat.thousand)
    //* 571 1288:getstatic       #154 <Field java.lang.StringBuffer Real.ftoaBuf>
    //* 572 1291:iconst_0        
    //* 573 1292:invokevirtual   #177 <Method char java.lang.StringBuffer.charAt(int)>
    //* 574 1295:aload_1         
    //* 575 1296:getfield        #162 <Field char Real$NumberFormat.thousand>
    //* 576 1299:icmpne          1310
                ftoaBuf.deleteCharAt(0);
    //  577 1302:getstatic       #154 <Field java.lang.StringBuffer Real.ftoaBuf>
    //  578 1305:iconst_0        
    //  579 1306:invokevirtual   #178 <Method java.lang.StringBuffer java.lang.StringBuffer.deleteCharAt(int)>
    //  580 1309:pop             
        }
        return align(ftoaBuf, numberformat);
    //  581 1310:aload_0         
    //  582 1311:getstatic       #154 <Field java.lang.StringBuffer Real.ftoaBuf>
    //  583 1314:aload_1         
    //  584 1315:invokespecial   #158 <Method java.lang.String Real.align(java.lang.StringBuffer, Real$NumberFormat)>
    //  585 1318:areturn         
    }

    // Decompiling method: toString  Signature: ()Ljava/lang/String;
    // Max stack: 2, #locals: 1, #params: 1
    // Code length: 16 bytes, Code offset: 27795
    // Parameter  0 added: Name this Type LReal; At 0 16 Range 0 15 Init 0 fixed
    // RetValue   1 added: Name <returnValue> Type Ljava/lang/String; At 0 16 Range 0 15 Init 0 fixed
    public String toString()
    {
        tmpFormat.base = 10;
    //    0    0:getstatic       #179 <Field Real$NumberFormat Real.tmpFormat>
    //    1    3:bipush          10
    //    2    5:putfield        #161 <Field int Real$NumberFormat.base>
        return ftoa(tmpFormat);
    //    3    8:aload_0         
    //    4    9:getstatic       #179 <Field Real$NumberFormat Real.tmpFormat>
    //    5   12:invokespecial   #180 <Method java.lang.String Real.ftoa(Real$NumberFormat)>
    //    6   15:areturn         
    }

    // Decompiling method: toString  Signature: (I)Ljava/lang/String;
    // Max stack: 2, #locals: 2, #params: 2
    // Code length: 15 bytes, Code offset: 27837
    // Parameter  0 added: Name this Type LReal; At 0 15 Range 0 14 Init 0 fixed
    // Parameter  1 added: Name i Type I At 0 15 Range 0 14 Init 0
    // RetValue   2 added: Name <returnValue> Type Ljava/lang/String; At 0 15 Range 0 14 Init 0 fixed
    public String toString(int i)
    {
        tmpFormat.base = i;
    //    0    0:getstatic       #179 <Field Real$NumberFormat Real.tmpFormat>
    //    1    3:iload_1         
    //    2    4:putfield        #161 <Field int Real$NumberFormat.base>
        return ftoa(tmpFormat);
    //    3    7:aload_0         
    //    4    8:getstatic       #179 <Field Real$NumberFormat Real.tmpFormat>
    //    5   11:invokespecial   #180 <Method java.lang.String Real.ftoa(Real$NumberFormat)>
    //    6   14:areturn         
    }

    // Decompiling method: toString  Signature: (LReal$NumberFormat;)Ljava/lang/String;
    // Max stack: 2, #locals: 2, #params: 2
    // Code length: 6 bytes, Code offset: 27878
    // Parameter  0 added: Name this Type LReal; At 0 6 Range 0 5 Init 0 fixed
    // Parameter  1 added: Name numberformat Type LReal$NumberFormat; At 0 6 Range 0 5 Init 0
    // RetValue   2 added: Name <returnValue> Type Ljava/lang/String; At 0 6 Range 0 5 Init 0 fixed
    public String toString(NumberFormat numberformat)
    {
        return ftoa(numberformat);
    //    0    0:aload_0         
    //    1    1:aload_1         
    //    2    2:invokespecial   #180 <Method java.lang.String Real.ftoa(Real$NumberFormat)>
    //    3    5:areturn         
    }

    long mantissa = 0;
    int exponent = 0;
    byte sign = 0;
    public static boolean magicRounding = true;
    public static final Real ZERO = new Real(0, 0, 0L);
    public static final Real ONE = new Real(0, 0x40000000, 0x4000000000000000L);
    public static final Real THREE = new Real(0, 0x40000001, 0x6000000000000000L);
    public static final Real FIVE = new Real(0, 0x40000002, 0x5000000000000000L);
    public static final Real TEN = new Real(0, 0x40000003, 0x5000000000000000L);
    public static final Real SQRT2 = new Real(0, 0x40000000, 0x5a827999fcef3242L);
    public static final Real SQRT1_2 = new Real(0, 0x3fffffff, 0x5a827999fcef3242L);
    public static final Real CBRT1_2 = new Real(0, 0x3fffffff, 0x6597fa94f5b8f20bL);
    public static final Real PI2 = new Real(0, 0x40000002, 0x6487ed5110b4611aL);
    public static final Real PI = new Real(0, 0x40000001, 0x6487ed5110b4611aL);
    public static final Real PI_2 = new Real(0, 0x40000000, 0x6487ed5110b4611aL);
    public static final Real PI_4 = new Real(0, 0x3fffffff, 0x6487ed5110b4611aL);
    public static final Real PI_8 = new Real(0, 0x3ffffffe, 0x6487ed5110b4611aL);
    public static final Real E = new Real(0, 0x40000001, 0x56fc2a2c515da54dL);
    public static final Real LN2 = new Real(0, 0x3fffffff, 0x58b90bfbe8e7bcd6L);
    public static final Real LN10 = new Real(0, 0x40000001, 0x49aec6eed554560bL);
    public static final Real LOG10E = new Real(0, 0x3ffffffe, 0x6f2dec549b9438cbL);
    public static final Real MAX = new Real(0, 0x7fffffff, 0x7fffffffffffffffL);
    public static final Real MIN = new Real(0, 0, 0x4000000000000000L);
    private static final int clz_magic = 0x7c4acdd;
    private static final byte clz_tab[] = {
        31, 22, 30, 21, 18, 10, 29, 2, 20, 17, 
        15, 13, 9, 6, 28, 1, 23, 19, 11, 3, 
        16, 14, 7, 24, 12, 4, 8, 25, 5, 26, 
        27, 0
    };
    private static Real tmp0 = new Real();
    private static Real recipTmp = new Real();
    private static Real recipTmp2 = new Real();
    private static Real sqrtTmp = new Real();
    private static Real expTmp = new Real();
    private static Real expTmp2 = new Real();
    private static Real expTmp3 = new Real();
    private static Real tmp1 = new Real();
    private static Real tmp2 = new Real();
    private static Real tmp3 = new Real();
    private static Real tmp4 = new Real();
    private static Real tmp5 = new Real();
    private static StringBuffer ftoaBuf = new StringBuffer(40);
    private static StringBuffer ftoaExp = new StringBuffer(15);
    public static final String hexChar = "0123456789ABCDEF";
    private static NumberFormat tmpFormat = new NumberFormat();

    // Decompiling method: <clinit>  Signature: ()V
    // Max stack: 6, #locals: 0, #params: 0
    // Code length: 646 bytes, Code offset: 27910
    // RetValue   0 added: Name <returnValue> Type V At 0 646 Range 0 645 Init 0 fixed
    static 
    {
        /* magicRounding = true; */
    //    0    0:iconst_1        
    //    1    1:putstatic       #40  <Field boolean Real.magicRounding>
        /* ZERO = new Real(0, 0, 0L); */
    //    2    4:new             #181 <Class Real>
    //    3    7:dup             
    //    4    8:iconst_0        
    //    5    9:iconst_0        
    //    6   10:lconst_0        
    //    7   11:invokespecial   #182 <Method void Real(int, int, long)>
    //    8   14:putstatic       #13  <Field Real Real.ZERO>
        /* ONE = new Real(0, 0x40000000, 0x4000000000000000L); */
    //    9   17:new             #181 <Class Real>
    //   10   20:dup             
    //   11   21:iconst_0        
    //   12   22:ldc1            #30  <Int 0x40000000>
    //   13   24:ldc2w           #20  <Long 0x4000000000000000L>
    //   14   27:invokespecial   #182 <Method void Real(int, int, long)>
    //   15   30:putstatic       #31  <Field Real Real.ONE>
        /* THREE = new Real(0, 0x40000001, 0x6000000000000000L); */
    //   16   33:new             #181 <Class Real>
    //   17   36:dup             
    //   18   37:iconst_0        
    //   19   38:ldc1            #183 <Int 0x40000001>
    //   20   40:ldc2w           #184 <Long 0x6000000000000000L>
    //   21   43:invokespecial   #182 <Method void Real(int, int, long)>
    //   22   46:putstatic       #186 <Field Real Real.THREE>
        /* FIVE = new Real(0, 0x40000002, 0x5000000000000000L); */
    //   23   49:new             #181 <Class Real>
    //   24   52:dup             
    //   25   53:iconst_0        
    //   26   54:ldc1            #187 <Int 0x40000002>
    //   27   56:ldc2w           #188 <Long 0x5000000000000000L>
    //   28   59:invokespecial   #182 <Method void Real(int, int, long)>
    //   29   62:putstatic       #144 <Field Real Real.FIVE>
        /* TEN = new Real(0, 0x40000003, 0x5000000000000000L); */
    //   30   65:new             #181 <Class Real>
    //   31   68:dup             
    //   32   69:iconst_0        
    //   33   70:ldc1            #190 <Int 0x40000003>
    //   34   72:ldc2w           #188 <Long 0x5000000000000000L>
    //   35   75:invokespecial   #182 <Method void Real(int, int, long)>
    //   36   78:putstatic       #103 <Field Real Real.TEN>
        /* SQRT2 = new Real(0, 0x40000000, 0x5a827999fcef3242L); */
    //   37   81:new             #181 <Class Real>
    //   38   84:dup             
    //   39   85:iconst_0        
    //   40   86:ldc1            #30  <Int 0x40000000>
    //   41   88:ldc2w           #191 <Long 0x5a827999fcef3242L>
    //   42   91:invokespecial   #182 <Method void Real(int, int, long)>
    //   43   94:putstatic       #126 <Field Real Real.SQRT2>
        /* SQRT1_2 = new Real(0, 0x3fffffff, 0x5a827999fcef3242L); */
    //   44   97:new             #181 <Class Real>
    //   45  100:dup             
    //   46  101:iconst_0        
    //   47  102:ldc1            #37  <Int 0x3fffffff>
    //   48  104:ldc2w           #191 <Long 0x5a827999fcef3242L>
    //   49  107:invokespecial   #182 <Method void Real(int, int, long)>
    //   50  110:putstatic       #75  <Field Real Real.SQRT1_2>
        /* CBRT1_2 = new Real(0, 0x3fffffff, 0x6597fa94f5b8f20bL); */
    //   51  113:new             #181 <Class Real>
    //   52  116:dup             
    //   53  117:iconst_0        
    //   54  118:ldc1            #37  <Int 0x3fffffff>
    //   55  120:ldc2w           #193 <Long 0x6597fa94f5b8f20bL>
    //   56  123:invokespecial   #182 <Method void Real(int, int, long)>
    //   57  126:putstatic       #195 <Field Real Real.CBRT1_2>
        /* PI2 = new Real(0, 0x40000002, 0x6487ed5110b4611aL); */
    //   58  129:new             #181 <Class Real>
    //   59  132:dup             
    //   60  133:iconst_0        
    //   61  134:ldc1            #187 <Int 0x40000002>
    //   62  136:ldc2w           #196 <Long 0x6487ed5110b4611aL>
    //   63  139:invokespecial   #182 <Method void Real(int, int, long)>
    //   64  142:putstatic       #111 <Field Real Real.PI2>
        /* PI = new Real(0, 0x40000001, 0x6487ed5110b4611aL); */
    //   65  145:new             #181 <Class Real>
    //   66  148:dup             
    //   67  149:iconst_0        
    //   68  150:ldc1            #183 <Int 0x40000001>
    //   69  152:ldc2w           #196 <Long 0x6487ed5110b4611aL>
    //   70  155:invokespecial   #182 <Method void Real(int, int, long)>
    //   71  158:putstatic       #115 <Field Real Real.PI>
        /* PI_2 = new Real(0, 0x40000000, 0x6487ed5110b4611aL); */
    //   72  161:new             #181 <Class Real>
    //   73  164:dup             
    //   74  165:iconst_0        
    //   75  166:ldc1            #30  <Int 0x40000000>
    //   76  168:ldc2w           #196 <Long 0x6487ed5110b4611aL>
    //   77  171:invokespecial   #182 <Method void Real(int, int, long)>
    //   78  174:putstatic       #116 <Field Real Real.PI_2>
        /* PI_4 = new Real(0, 0x3fffffff, 0x6487ed5110b4611aL); */
    //   79  177:new             #181 <Class Real>
    //   80  180:dup             
    //   81  181:iconst_0        
    //   82  182:ldc1            #37  <Int 0x3fffffff>
    //   83  184:ldc2w           #196 <Long 0x6487ed5110b4611aL>
    //   84  187:invokespecial   #182 <Method void Real(int, int, long)>
    //   85  190:putstatic       #117 <Field Real Real.PI_4>
        /* PI_8 = new Real(0, 0x3ffffffe, 0x6487ed5110b4611aL); */
    //   86  193:new             #181 <Class Real>
    //   87  196:dup             
    //   88  197:iconst_0        
    //   89  198:ldc1            #198 <Int 0x3ffffffe>
    //   90  200:ldc2w           #196 <Long 0x6487ed5110b4611aL>
    //   91  203:invokespecial   #182 <Method void Real(int, int, long)>
    //   92  206:putstatic       #128 <Field Real Real.PI_8>
        /* E = new Real(0, 0x40000001, 0x56fc2a2c515da54dL); */
    //   93  209:new             #181 <Class Real>
    //   94  212:dup             
    //   95  213:iconst_0        
    //   96  214:ldc1            #183 <Int 0x40000001>
    //   97  216:ldc2w           #199 <Long 0x56fc2a2c515da54dL>
    //   98  219:invokespecial   #182 <Method void Real(int, int, long)>
    //   99  222:putstatic       #201 <Field Real Real.E>
        /* LN2 = new Real(0, 0x3fffffff, 0x58b90bfbe8e7bcd6L); */
    //  100  225:new             #181 <Class Real>
    //  101  228:dup             
    //  102  229:iconst_0        
    //  103  230:ldc1            #37  <Int 0x3fffffff>
    //  104  232:ldc2w           #202 <Long 0x58b90bfbe8e7bcd6L>
    //  105  235:invokespecial   #182 <Method void Real(int, int, long)>
    //  106  238:putstatic       #98  <Field Real Real.LN2>
        /* LN10 = new Real(0, 0x40000001, 0x49aec6eed554560bL); */
    //  107  241:new             #181 <Class Real>
    //  108  244:dup             
    //  109  245:iconst_0        
    //  110  246:ldc1            #183 <Int 0x40000001>
    //  111  248:ldc2w           #204 <Long 0x49aec6eed554560bL>
    //  112  251:invokespecial   #182 <Method void Real(int, int, long)>
    //  113  254:putstatic       #206 <Field Real Real.LN10>
        /* LOG10E = new Real(0, 0x3ffffffe, 0x6f2dec549b9438cbL); */
    //  114  257:new             #181 <Class Real>
    //  115  260:dup             
    //  116  261:iconst_0        
    //  117  262:ldc1            #198 <Int 0x3ffffffe>
    //  118  264:ldc2w           #207 <Long 0x6f2dec549b9438cbL>
    //  119  267:invokespecial   #182 <Method void Real(int, int, long)>
    //  120  270:putstatic       #99  <Field Real Real.LOG10E>
        /* MAX = new Real(0, 0x7fffffff, 0x7fffffffffffffffL); */
    //  121  273:new             #181 <Class Real>
    //  122  276:dup             
    //  123  277:iconst_0        
    //  124  278:ldc1            #38  <Int 0x7fffffff>
    //  125  280:ldc2w           #209 <Long 0x7fffffffffffffffL>
    //  126  283:invokespecial   #182 <Method void Real(int, int, long)>
    //  127  286:putstatic       #29  <Field Real Real.MAX>
        /* MIN = new Real(0, 0, 0x4000000000000000L); */
    //  128  289:new             #181 <Class Real>
    //  129  292:dup             
    //  130  293:iconst_0        
    //  131  294:iconst_0        
    //  132  295:ldc2w           #20  <Long 0x4000000000000000L>
    //  133  298:invokespecial   #182 <Method void Real(int, int, long)>
    //  134  301:putstatic       #28  <Field Real Real.MIN>
        /* clz_tab = (new byte[] {
            31, 22, 30, 21, 18, 10, 29, 2, 20, 17, 
            15, 13, 9, 6, 28, 1, 23, 19, 11, 3, 
            16, 14, 7, 24, 12, 4, 8, 25, 5, 26, 
            27, 0
        }); */
    //  135  304:bipush          32
    //  136  306:newarray        byte[]
    //  137  308:dup             
    //  138  309:iconst_0        
    //  139  310:bipush          31
    //  140  312:bastore         
    //  141  313:dup             
    //  142  314:iconst_1        
    //  143  315:bipush          22
    //  144  317:bastore         
    //  145  318:dup             
    //  146  319:iconst_2        
    //  147  320:bipush          30
    //  148  322:bastore         
    //  149  323:dup             
    //  150  324:iconst_3        
    //  151  325:bipush          21
    //  152  327:bastore         
    //  153  328:dup             
    //  154  329:iconst_4        
    //  155  330:bipush          18
    //  156  332:bastore         
    //  157  333:dup             
    //  158  334:iconst_5        
    //  159  335:bipush          10
    //  160  337:bastore         
    //  161  338:dup             
    //  162  339:bipush          6
    //  163  341:bipush          29
    //  164  343:bastore         
    //  165  344:dup             
    //  166  345:bipush          7
    //  167  347:iconst_2        
    //  168  348:bastore         
    //  169  349:dup             
    //  170  350:bipush          8
    //  171  352:bipush          20
    //  172  354:bastore         
    //  173  355:dup             
    //  174  356:bipush          9
    //  175  358:bipush          17
    //  176  360:bastore         
    //  177  361:dup             
    //  178  362:bipush          10
    //  179  364:bipush          15
    //  180  366:bastore         
    //  181  367:dup             
    //  182  368:bipush          11
    //  183  370:bipush          13
    //  184  372:bastore         
    //  185  373:dup             
    //  186  374:bipush          12
    //  187  376:bipush          9
    //  188  378:bastore         
    //  189  379:dup             
    //  190  380:bipush          13
    //  191  382:bipush          6
    //  192  384:bastore         
    //  193  385:dup             
    //  194  386:bipush          14
    //  195  388:bipush          28
    //  196  390:bastore         
    //  197  391:dup             
    //  198  392:bipush          15
    //  199  394:iconst_1        
    //  200  395:bastore         
    //  201  396:dup             
    //  202  397:bipush          16
    //  203  399:bipush          23
    //  204  401:bastore         
    //  205  402:dup             
    //  206  403:bipush          17
    //  207  405:bipush          19
    //  208  407:bastore         
    //  209  408:dup             
    //  210  409:bipush          18
    //  211  411:bipush          11
    //  212  413:bastore         
    //  213  414:dup             
    //  214  415:bipush          19
    //  215  417:iconst_3        
    //  216  418:bastore         
    //  217  419:dup             
    //  218  420:bipush          20
    //  219  422:bipush          16
    //  220  424:bastore         
    //  221  425:dup             
    //  222  426:bipush          21
    //  223  428:bipush          14
    //  224  430:bastore         
    //  225  431:dup             
    //  226  432:bipush          22
    //  227  434:bipush          7
    //  228  436:bastore         
    //  229  437:dup             
    //  230  438:bipush          23
    //  231  440:bipush          24
    //  232  442:bastore         
    //  233  443:dup             
    //  234  444:bipush          24
    //  235  446:bipush          12
    //  236  448:bastore         
    //  237  449:dup             
    //  238  450:bipush          25
    //  239  452:iconst_4        
    //  240  453:bastore         
    //  241  454:dup             
    //  242  455:bipush          26
    //  243  457:bipush          8
    //  244  459:bastore         
    //  245  460:dup             
    //  246  461:bipush          27
    //  247  463:bipush          25
    //  248  465:bastore         
    //  249  466:dup             
    //  250  467:bipush          28
    //  251  469:iconst_5        
    //  252  470:bastore         
    //  253  471:dup             
    //  254  472:bipush          29
    //  255  474:bipush          26
    //  256  476:bastore         
    //  257  477:dup             
    //  258  478:bipush          30
    //  259  480:bipush          27
    //  260  482:bastore         
    //  261  483:dup             
    //  262  484:bipush          31
    //  263  486:iconst_0        
    //  264  487:bastore         
    //  265  488:putstatic       #9   <Field byte[] Real.clz_tab>
        /* tmp0 = new Real(); */
    //  266  491:new             #181 <Class Real>
    //  267  494:dup             
    //  268  495:invokespecial   #211 <Method void Real()>
    //  269  498:putstatic       #46  <Field Real Real.tmp0>
        /* recipTmp = new Real(); */
    //  270  501:new             #181 <Class Real>
    //  271  504:dup             
    //  272  505:invokespecial   #211 <Method void Real()>
    //  273  508:putstatic       #61  <Field Real Real.recipTmp>
        /* recipTmp2 = new Real(); */
    //  274  511:new             #181 <Class Real>
    //  275  514:dup             
    //  276  515:invokespecial   #211 <Method void Real()>
    //  277  518:putstatic       #63  <Field Real Real.recipTmp2>
        /* sqrtTmp = new Real(); */
    //  278  521:new             #181 <Class Real>
    //  279  524:dup             
    //  280  525:invokespecial   #211 <Method void Real()>
    //  281  528:putstatic       #79  <Field Real Real.sqrtTmp>
        /* expTmp = new Real(); */
    //  282  531:new             #181 <Class Real>
    //  283  534:dup             
    //  284  535:invokespecial   #211 <Method void Real()>
    //  285  538:putstatic       #80  <Field Real Real.expTmp>
        /* expTmp2 = new Real(); */
    //  286  541:new             #181 <Class Real>
    //  287  544:dup             
    //  288  545:invokespecial   #211 <Method void Real()>
    //  289  548:putstatic       #87  <Field Real Real.expTmp2>
        /* expTmp3 = new Real(); */
    //  290  551:new             #181 <Class Real>
    //  291  554:dup             
    //  292  555:invokespecial   #211 <Method void Real()>
    //  293  558:putstatic       #96  <Field Real Real.expTmp3>
        /* tmp1 = new Real(); */
    //  294  561:new             #181 <Class Real>
    //  295  564:dup             
    //  296  565:invokespecial   #211 <Method void Real()>
    //  297  568:putstatic       #107 <Field Real Real.tmp1>
        /* tmp2 = new Real(); */
    //  298  571:new             #181 <Class Real>
    //  299  574:dup             
    //  300  575:invokespecial   #211 <Method void Real()>
    //  301  578:putstatic       #100 <Field Real Real.tmp2>
        /* tmp3 = new Real(); */
    //  302  581:new             #181 <Class Real>
    //  303  584:dup             
    //  304  585:invokespecial   #211 <Method void Real()>
    //  305  588:putstatic       #105 <Field Real Real.tmp3>
        /* tmp4 = new Real(); */
    //  306  591:new             #181 <Class Real>
    //  307  594:dup             
    //  308  595:invokespecial   #211 <Method void Real()>
    //  309  598:putstatic       #121 <Field Real Real.tmp4>
        /* tmp5 = new Real(); */
    //  310  601:new             #181 <Class Real>
    //  311  604:dup             
    //  312  605:invokespecial   #211 <Method void Real()>
    //  313  608:putstatic       #145 <Field Real Real.tmp5>
        /* ftoaBuf = new StringBuffer(40); */
    //  314  611:new             #212 <Class java.lang.StringBuffer>
    //  315  614:dup             
    //  316  615:bipush          40
    //  317  617:invokespecial   #213 <Method void StringBuffer(int)>
    //  318  620:putstatic       #154 <Field java.lang.StringBuffer Real.ftoaBuf>
        /* ftoaExp = new StringBuffer(15); */
    //  319  623:new             #212 <Class java.lang.StringBuffer>
    //  320  626:dup             
    //  321  627:bipush          15
    //  322  629:invokespecial   #213 <Method void StringBuffer(int)>
    //  323  632:putstatic       #171 <Field java.lang.StringBuffer Real.ftoaExp>
        /* tmpFormat = new NumberFormat(); */
    //  324  635:new             #214 <Class Real$NumberFormat>
    //  325  638:dup             
    //  326  639:invokespecial   #215 <Method void Real$NumberFormat()>
    //  327  642:putstatic       #179 <Field Real$NumberFormat Real.tmpFormat>
    //* 328  645:return          
    }
}